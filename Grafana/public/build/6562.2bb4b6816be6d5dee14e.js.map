{"version":3,"file":"6562.2bb4b6816be6d5dee14e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/ConditionalWrap.tsx","webpack://grafana/./public/app/features/alerting/unified/components/common/TextVariants.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/UnusedBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPointHeader.tsx","webpack://grafana/./public/app/plugins/datasource/alertmanager/consts.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/ReceiverMetadataBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useContactPoints.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiverExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiversExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useExportContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/receivers.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/useReceiversMetadata.ts","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/utils.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/types.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/types/contact-points.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts"],"sourcesContent":["import { HTMLAttributes } from 'react';\n\nimport { IconSize, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { cloneElement, forwardRef, Ref } from 'react';\n\ninterface ConditionalWrapProps {\n  shouldWrap: boolean;\n  children: JSX.Element;\n  wrap: (children: JSX.Element) => JSX.Element;\n}\n\nfunction ConditionalWrap({ children, shouldWrap, wrap }: ConditionalWrapProps, _ref: Ref<HTMLElement>) {\n  return shouldWrap ? cloneElement(wrap(children)) : children;\n}\n\nexport default forwardRef(ConditionalWrap);\n","// These are convenience components to deal with i18n shenanigans\n// (see https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#jsx)\n// These help when we need to interpolate variables inside translated strings,\n// where we need to style them differently\n\nimport { Text } from '@grafana/ui';\n\nexport const PrimaryText = ({ content }: { content: string }) => <Text color=\"primary\">{content}</Text>;\n","import { Badge } from '@grafana/ui';\n\nexport const UnusedContactPointBadge = () => (\n  <Badge\n    text=\"Unused\"\n    aria-label=\"unused\"\n    color=\"orange\"\n    icon=\"exclamation-triangle\"\n    // is not used in any policy, but it can receive notifications from an auto auto generated policy. Non admin users can't see auto generated policies.\n    tooltip=\"This contact point is not used in any notification policy\"\n  />\n);\n","import { css } from '@emotion/css';\nimport { Fragment } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Dropdown, LinkButton, Menu, Stack, Text, TextLink, Tooltip, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport { useExportContactPoint } from 'app/features/alerting/unified/components/contact-points/useExportContactPoint';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { createUrl } from '../../utils/url';\nimport MoreButton from '../MoreButton';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\n\nimport { UnusedContactPointBadge } from './components/UnusedBadge';\nimport { RouteReference } from './utils';\n\ninterface ContactPointHeaderProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  policies?: RouteReference[];\n  onDelete: (name: string) => void;\n}\n\nexport const ContactPointHeader = (props: ContactPointHeaderProps) => {\n  const { name, disabled = false, provisioned = false, policies = [], onDelete } = props;\n  const styles = useStyles2(getStyles);\n\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportContactPoint);\n  const [editSupported, editAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n  const [deleteSupported, deleteAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n\n  const [ExportDrawer, openExportDrawer] = useExportContactPoint();\n\n  const numberOfPolicies = policies.length;\n  const isReferencedByAnyPolicy = numberOfPolicies > 0;\n  const isReferencedByRegularPolicies = policies.some((ref) => ref.route.type !== 'auto-generated');\n\n  const canEdit = editSupported && editAllowed && !provisioned;\n  const canDelete = deleteSupported && deleteAllowed && !provisioned && !isReferencedByRegularPolicies;\n\n  const menuActions: JSX.Element[] = [];\n\n  if (exportSupported) {\n    menuActions.push(\n      <Fragment key=\"export-contact-point\">\n        <Menu.Item\n          icon=\"download-alt\"\n          label=\"Export\"\n          ariaLabel=\"export\"\n          disabled={!exportAllowed}\n          data-testid=\"export\"\n          onClick={() => openExportDrawer(name)}\n        />\n        <Menu.Divider />\n      </Fragment>\n    );\n  }\n\n  if (deleteSupported) {\n    menuActions.push(\n      <ConditionalWrap\n        key=\"delete-contact-point\"\n        shouldWrap={!canDelete}\n        wrap={(children) => (\n          <Tooltip content=\"Contact point is currently in use by one or more notification policies\" placement=\"top\">\n            <span>{children}</span>\n          </Tooltip>\n        )}\n      >\n        <Menu.Item\n          label=\"Delete\"\n          ariaLabel=\"delete\"\n          icon=\"trash-alt\"\n          destructive\n          disabled={disabled || !canDelete}\n          onClick={() => onDelete(name)}\n        />\n      </ConditionalWrap>\n    );\n  }\n\n  const referencedByPoliciesText = t('alerting.contact-points.used-by', 'Used by {{ count }} notification policy', {\n    count: numberOfPolicies,\n  });\n\n  return (\n    <div className={styles.headerWrapper}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <Stack alignItems=\"center\" gap={1}>\n          <Text element=\"h2\" variant=\"body\" weight=\"medium\">\n            {name}\n          </Text>\n        </Stack>\n        {isReferencedByAnyPolicy && (\n          <TextLink\n            href={createUrl('/alerting/routes', { contactPoint: name })}\n            variant=\"bodySmall\"\n            color=\"primary\"\n            inline={false}\n          >\n            {referencedByPoliciesText}\n          </TextLink>\n        )}\n        {provisioned && <ProvisioningBadge />}\n        {!isReferencedByAnyPolicy && <UnusedContactPointBadge />}\n        <Spacer />\n        <LinkButton\n          tooltipPlacement=\"top\"\n          tooltip={provisioned ? 'Provisioned contact points cannot be edited in the UI' : undefined}\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={canEdit ? 'pen' : 'eye'}\n          type=\"button\"\n          disabled={disabled}\n          aria-label={`${canEdit ? 'edit' : 'view'}-action`}\n          data-testid={`${canEdit ? 'edit' : 'view'}-action`}\n          href={`/alerting/notifications/receivers/${encodeURIComponent(name)}/edit`}\n        >\n          {canEdit ? 'Edit' : 'View'}\n        </LinkButton>\n        {menuActions.length > 0 && (\n          <Dropdown overlay={<Menu>{menuActions}</Menu>}>\n            <MoreButton />\n          </Dropdown>\n        )}\n      </Stack>\n      {ExportDrawer}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  headerWrapper: css({\n    background: `${theme.colors.background.secondary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    borderTopLeftRadius: `${theme.shape.radius.default}`,\n    borderTopRightRadius: `${theme.shape.radius.default}`,\n  }),\n});\n","export const receiverTypeNames: Record<string, string> = {\n  pagerduty: 'PagerDuty',\n  pushover: 'Pushover',\n  slack: 'Slack',\n  opsgenie: 'OpsGenie',\n  webhook: 'Webhook',\n  victorops: 'VictorOps',\n  wechat: 'WeChat',\n  discord: 'Discord',\n  webex: 'Cisco Webex Teams',\n  sns: 'Amazon SNS',\n  telegram: 'Telegram',\n  msteams: 'Microsoft Teams',\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, LinkButton, Tooltip, useStyles2, Stack } from '@grafana/ui';\n\nimport { ReceiverPluginMetadata } from './useReceiversMetadata';\n\ninterface Props {\n  metadata: ReceiverPluginMetadata;\n}\n\nexport const ReceiverMetadataBadge = ({ metadata: { icon, title, externalUrl, warning } }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack alignItems=\"center\" gap={0.5}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {warning ? (\n          <Tooltip content={warning} theme=\"error\">\n            <Icon name=\"exclamation-triangle\" className={styles.warnIcon} />\n          </Tooltip>\n        ) : (\n          <img src={icon} alt={title} height=\"16px\" />\n        )}\n        <span>{title}</span>\n      </Stack>\n      {externalUrl && (\n        <LinkButton icon=\"external-link-alt\" href={externalUrl} target=\"_blank\" variant=\"secondary\" size=\"sm\" />\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  warnIcon: css({\n    fill: theme.colors.warning.text,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { groupBy, size, upperFirst } from 'lodash';\nimport { Fragment, ReactNode } from 'react';\n\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { PrimaryText } from 'app/features/alerting/unified/components/common/TextVariants';\nimport { ContactPointHeader } from 'app/features/alerting/unified/components/contact-points/ContactPointHeader';\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaManagedReceiverConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { GrafanaNotifierType, NotifierStatus } from 'app/types/alerting';\n\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { MetaText } from '../MetaText';\nimport { ReceiverMetadataBadge } from '../receivers/grafanaAppReceivers/ReceiverMetadataBadge';\nimport { ReceiverPluginMetadata } from '../receivers/grafanaAppReceivers/useReceiversMetadata';\n\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY, RECEIVER_STATUS_KEY } from './useContactPoints';\nimport { getReceiverDescription, ReceiverConfigWithMetadata, RouteReference } from './utils';\n\ninterface ContactPointProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  receivers: ReceiverConfigWithMetadata[];\n  policies?: RouteReference[];\n  onDelete: (name: string) => void;\n}\n\nexport const ContactPoint = ({\n  name,\n  disabled = false,\n  provisioned = false,\n  receivers,\n  policies = [],\n  onDelete,\n}: ContactPointProps) => {\n  const styles = useStyles2(getStyles);\n\n  // TODO probably not the best way to figure out if we want to show either only the summary or full metadata for the receivers?\n  const showFullMetadata = receivers.some((receiver) => Boolean(receiver[RECEIVER_STATUS_KEY]));\n\n  return (\n    <div className={styles.contactPointWrapper} data-testid=\"contact-point\">\n      <Stack direction=\"column\" gap={0}>\n        <ContactPointHeader\n          name={name}\n          policies={policies}\n          provisioned={provisioned}\n          disabled={disabled}\n          onDelete={onDelete}\n        />\n        {showFullMetadata ? (\n          <div>\n            {receivers.map((receiver, index) => {\n              const diagnostics = receiver[RECEIVER_STATUS_KEY];\n              const metadata = receiver[RECEIVER_META_KEY];\n              const sendingResolved = !Boolean(receiver.disableResolveMessage);\n              const pluginMetadata = receiver[RECEIVER_PLUGIN_META_KEY];\n              const key = metadata.name + index;\n\n              return (\n                <ContactPointReceiver\n                  key={key}\n                  name={metadata.name}\n                  type={receiver.type}\n                  description={getReceiverDescription(receiver)}\n                  diagnostics={diagnostics}\n                  pluginMetadata={pluginMetadata}\n                  sendingResolved={sendingResolved}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div className={styles.integrationWrapper}>\n            <ContactPointReceiverSummary receivers={receivers} />\n          </div>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\ninterface ContactPointReceiverProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  sendingResolved?: boolean;\n  diagnostics?: NotifierStatus;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nconst ContactPointReceiver = (props: ContactPointReceiverProps) => {\n  const { name, type, description, diagnostics, pluginMetadata, sendingResolved = true } = props;\n  const styles = useStyles2(getStyles);\n\n  const hasMetadata = diagnostics !== undefined;\n\n  return (\n    <div className={styles.integrationWrapper}>\n      <Stack direction=\"column\" gap={0.5}>\n        <ContactPointReceiverTitleRow\n          name={name}\n          type={type}\n          description={description}\n          pluginMetadata={pluginMetadata}\n        />\n        {hasMetadata && <ContactPointReceiverMetadataRow diagnostics={diagnostics} sendingResolved={sendingResolved} />}\n      </Stack>\n    </div>\n  );\n};\n\nexport interface ContactPointReceiverTitleRowProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nexport function ContactPointReceiverTitleRow(props: ContactPointReceiverTitleRowProps) {\n  const { name, type, description, pluginMetadata } = props;\n\n  const iconName = INTEGRATION_ICONS[type];\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {iconName && <Icon name={iconName} />}\n        {pluginMetadata ? (\n          <ReceiverMetadataBadge metadata={pluginMetadata} />\n        ) : (\n          <Text variant=\"body\" color=\"primary\">\n            {name}\n          </Text>\n        )}\n      </Stack>\n      {description && (\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          {description}\n        </Text>\n      )}\n    </Stack>\n  );\n}\n\ninterface ContactPointReceiverMetadata {\n  sendingResolved: boolean;\n  diagnostics: NotifierStatus;\n}\n\ntype ContactPointReceiverSummaryProps = {\n  receivers: GrafanaManagedReceiverConfig[];\n};\n\n/**\n * This summary is used when we're dealing with non-Grafana managed alertmanager since they\n * don't have any metadata worth showing other than a summary of what types are configured for the contact point\n */\nexport const ContactPointReceiverSummary = ({ receivers }: ContactPointReceiverSummaryProps) => {\n  const countByType = groupBy(receivers, (receiver) => receiver.type);\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {Object.entries(countByType).map(([type, receivers], index) => {\n          const iconName = INTEGRATION_ICONS[type];\n          const receiverName = receiverTypeNames[type] ?? upperFirst(type);\n          const isLastItem = size(countByType) - 1 === index;\n\n          return (\n            <Fragment key={type}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n                {iconName && <Icon name={iconName} />}\n                <Text variant=\"body\">\n                  {receiverName}\n                  {receivers.length > 1 && receivers.length}\n                </Text>\n              </Stack>\n              {!isLastItem && '⋅'}\n            </Fragment>\n          );\n        })}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst ContactPointReceiverMetadataRow = ({ diagnostics, sendingResolved }: ContactPointReceiverMetadata) => {\n  const styles = useStyles2(getStyles);\n\n  const failedToSend = Boolean(diagnostics.lastNotifyAttemptError);\n  const lastDeliveryAttempt = dateTime(diagnostics.lastNotifyAttempt);\n  const lastDeliveryAttemptDuration = diagnostics.lastNotifyAttemptDuration;\n  const hasDeliveryAttempt = lastDeliveryAttempt.isValid();\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" gap={1}>\n        {/* this is shown when the last delivery failed – we don't show any additional metadata */}\n        {failedToSend ? (\n          <>\n            <MetaText color=\"error\" icon=\"exclamation-circle\">\n              <Tooltip content={diagnostics.lastNotifyAttemptError!}>\n                <span>\n                  <Trans i18nKey=\"alerting.contact-points.last-delivery-failed\">Last delivery attempt failed</Trans>\n                </span>\n              </Tooltip>\n            </MetaText>\n          </>\n        ) : (\n          <>\n            {/* this is shown when we have a last delivery attempt */}\n            {hasDeliveryAttempt && (\n              <>\n                <MetaText icon=\"clock-nine\">\n                  <Trans i18nKey=\"alerting.contact-points.last-delivery-attempt\">Last delivery attempt</Trans>\n                  <Tooltip content={lastDeliveryAttempt.toLocaleString()}>\n                    <span>\n                      <Text color=\"primary\">{lastDeliveryAttempt.locale('en').fromNow()}</Text>\n                    </span>\n                  </Tooltip>\n                </MetaText>\n                <MetaText icon=\"stopwatch\">\n                  <Trans i18nKey=\"alerting.contact-points.delivery-duration\">\n                    Last delivery took <PrimaryText content={lastDeliveryAttemptDuration} />\n                  </Trans>\n                </MetaText>\n              </>\n            )}\n            {/* when we have no last delivery attempt */}\n            {!hasDeliveryAttempt && (\n              <MetaText icon=\"clock-nine\">\n                <Trans i18nKey=\"alerting.contact-points.no-delivery-attempts\">No delivery attempts</Trans>\n              </MetaText>\n            )}\n            {/* this is only shown for contact points that only want \"firing\" updates */}\n            {!sendingResolved && (\n              <MetaText icon=\"info-circle\">\n                <Trans i18nKey=\"alerting.contact-points.only-firing\">\n                  Delivering <Text color=\"primary\">only firing</Text> notifications\n                </Trans>\n              </MetaText>\n            )}\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contactPointWrapper: css({\n    borderRadius: `${theme.shape.radius.default}`,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n  }),\n  integrationWrapper: css({\n    position: 'relative',\n\n    background: `${theme.colors.background.primary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: `${theme.shape.radius.default}`,\n    borderBottomRightRadius: `${theme.shape.radius.default}`,\n  }),\n});\n","/**\n * This hook will combine data from both the Alertmanager config\n * and (if available) it will also fetch the status from the Grafana Managed status endpoint\n */\n\nimport { produce } from 'immer';\nimport { remove } from 'lodash';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { onCallApi, OnCallIntegrationDTO } from '../../api/onCallApi';\nimport { usePluginBridge } from '../../hooks/usePluginBridge';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { SupportedPlugin } from '../../types/pluginBridges';\n\nimport { enhanceContactPointsWithMetadata } from './utils';\n\nexport const RECEIVER_STATUS_KEY = Symbol('receiver_status');\nexport const RECEIVER_META_KEY = Symbol('receiver_metadata');\nexport const RECEIVER_PLUGIN_META_KEY = Symbol('receiver_plugin_metadata');\n\nconst RECEIVER_STATUS_POLLING_INTERVAL = 10 * 1000; // 10 seconds\n\n/**\n * This hook will combine data from several endpoints;\n * 1. the alertmanager config endpoint where the definition of the receivers are\n * 2. (if available) the alertmanager receiver status endpoint, currently Grafana Managed only\n * 3. (if available) additional metadata about Grafana Managed contact points\n * 4. (if available) the OnCall plugin metadata\n */\ninterface UseContactPointsWithStatusOptions {\n  includePoliciesCount: boolean;\n  receiverStatusPollingInterval?: number;\n}\n\nconst defaultHookOptions = {\n  includePoliciesCount: true,\n  receiverStatusPollingInterval: RECEIVER_STATUS_POLLING_INTERVAL,\n};\n\nexport function useContactPointsWithStatus({\n  includePoliciesCount,\n  receiverStatusPollingInterval,\n}: UseContactPointsWithStatusOptions = defaultHookOptions) {\n  const { selectedAlertmanager, isGrafanaAlertmanager } = useAlertmanager();\n  const { installed: onCallPluginInstalled, loading: onCallPluginStatusLoading } = usePluginBridge(\n    SupportedPlugin.OnCall\n  );\n\n  // fetch receiver status if we're dealing with a Grafana Managed Alertmanager\n  const fetchContactPointsStatus = alertmanagerApi.endpoints.getContactPointsStatus.useQuery(undefined, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n    // re-fetch status every so often for up-to-date information, allow disabling by passing \"receiverStatusPollingInterval: 0\"\n    pollingInterval: receiverStatusPollingInterval,\n    // skip fetching receiver statuses if not Grafana AM\n    skip: !isGrafanaAlertmanager,\n  });\n\n  // fetch notifier metadata from the Grafana API if we're using a Grafana AM – this will be used to add additional\n  // metadata and canonical names to the receiver\n  const fetchReceiverMetadata = alertmanagerApi.endpoints.grafanaNotifiers.useQuery(undefined, {\n    skip: !isGrafanaAlertmanager,\n  });\n\n  // if the OnCall plugin is installed, fetch its list of integrations so we can match those to the Grafana Managed contact points\n  const { data: onCallIntegrations, isLoading: onCallPluginIntegrationsLoading } =\n    onCallApi.endpoints.grafanaOnCallIntegrations.useQuery(undefined, {\n      skip: !onCallPluginInstalled || !isGrafanaAlertmanager,\n    });\n\n  // null = no installed, undefined = loading, [n] is installed with integrations\n  let onCallMetadata: null | undefined | OnCallIntegrationDTO[] = undefined;\n  if (onCallPluginInstalled) {\n    onCallMetadata = onCallIntegrations ?? [];\n  } else if (onCallPluginInstalled === false) {\n    onCallMetadata = null;\n  }\n\n  // fetch the latest config from the Alertmanager\n  // we use this endpoint only when we need to get the number of policies\n  const fetchAlertmanagerConfiguration = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(\n    selectedAlertmanager!,\n    {\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n      selectFromResult: (result) => ({\n        ...result,\n        contactPoints: result.data\n          ? enhanceContactPointsWithMetadata(\n              fetchContactPointsStatus.data,\n              fetchReceiverMetadata.data,\n              onCallMetadata,\n              result.data.alertmanager_config.receivers ?? [],\n              result.data\n            )\n          : [],\n      }),\n      skip: !includePoliciesCount,\n    }\n  );\n\n  // for Grafana Managed Alertmanager, we use the new read-only endpoint for getting the list of contact points\n  const fetchGrafanaContactPoints = alertmanagerApi.endpoints.getContactPointsList.useQuery(undefined, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n    selectFromResult: (result) => ({\n      ...result,\n      contactPoints: result.data\n        ? enhanceContactPointsWithMetadata(\n            fetchContactPointsStatus.data,\n            fetchReceiverMetadata.data,\n            onCallMetadata,\n            result.data, // contact points from the new readonly endpoint\n            undefined //no config data\n          )\n        : [],\n    }),\n    skip: includePoliciesCount || !isGrafanaAlertmanager,\n  });\n\n  // we will fail silently for fetching OnCall plugin status and integrations\n  const error =\n    fetchAlertmanagerConfiguration.error || fetchGrafanaContactPoints.error || fetchContactPointsStatus.error;\n  const isLoading =\n    fetchAlertmanagerConfiguration.isLoading ||\n    fetchGrafanaContactPoints.isLoading ||\n    fetchContactPointsStatus.isLoading ||\n    onCallPluginStatusLoading ||\n    onCallPluginIntegrationsLoading;\n\n  const unsortedContactPoints = includePoliciesCount\n    ? fetchAlertmanagerConfiguration.contactPoints\n    : fetchGrafanaContactPoints.contactPoints;\n  const contactPoints = unsortedContactPoints.sort((a, b) => a.name.localeCompare(b.name));\n  return {\n    error,\n    isLoading,\n    contactPoints,\n    refetchReceivers: fetchGrafanaContactPoints.refetch,\n  };\n}\n\nexport function useDeleteContactPoint(selectedAlertmanager: string) {\n  const [fetchAlertmanagerConfig] = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useLazyQuery();\n  const [updateAlertManager, updateAlertmanagerState] =\n    alertmanagerApi.endpoints.updateAlertmanagerConfiguration.useMutation();\n\n  const deleteTrigger = (contactPointName: string) => {\n    return fetchAlertmanagerConfig(selectedAlertmanager).then(({ data }) => {\n      if (!data) {\n        return;\n      }\n\n      const newConfig = produce(data, (draft) => {\n        remove(draft?.alertmanager_config?.receivers ?? [], (receiver) => receiver.name === contactPointName);\n        return draft;\n      });\n\n      return updateAlertManager({\n        selectedAlertmanager,\n        config: newConfig,\n      }).unwrap();\n    });\n  };\n\n  return {\n    deleteTrigger,\n    updateAlertmanagerState,\n  };\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiverExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiverExportPreview = ({\n  receiverName,\n  decrypt,\n  exportFormat,\n  onClose,\n}: GrafanaReceiverExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiverQuery({\n    receiverName: receiverName,\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `cp-${receiverName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiverExporterProps {\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiverExporter = ({ onClose, receiverName, decrypt }: GrafanaReceiverExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiverExportPreview\n        receiverName={receiverName}\n        decrypt={decrypt}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n};\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiversExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiversExportPreview = ({ decrypt, exportFormat, onClose }: GrafanaReceiversExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiversQuery({\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `contact-points-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiversExporterProps {\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiversExporter = ({ onClose, decrypt }: GrafanaReceiversExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiversExportPreview decrypt={decrypt} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { GrafanaReceiverExporter } from '../export/GrafanaReceiverExporter';\nimport { GrafanaReceiversExporter } from '../export/GrafanaReceiversExporter';\n\nexport const ALL_CONTACT_POINTS = Symbol('all contact points');\n\ntype ExportProps = [JSX.Element | null, (receiver: string | typeof ALL_CONTACT_POINTS) => void];\n\nexport const useExportContactPoint = (): ExportProps => {\n  const [receiverName, setReceiverName] = useState<string | typeof ALL_CONTACT_POINTS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n  const [decryptSecretsSupported, decryptSecretsAllowed] = useAlertmanagerAbility(AlertmanagerAction.DecryptSecrets);\n\n  const canReadSecrets = decryptSecretsSupported && decryptSecretsAllowed;\n\n  const handleClose = useCallback(() => {\n    setReceiverName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (receiverName: string | typeof ALL_CONTACT_POINTS) => {\n    setReceiverName(receiverName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!receiverName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (receiverName === ALL_CONTACT_POINTS) {\n      // use this drawer when we want to export all contact points\n      return <GrafanaReceiversExporter decrypt={canReadSecrets} onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single contact point\n      return <GrafanaReceiverExporter receiverName={receiverName} decrypt={canReadSecrets} onClose={handleClose} />;\n    }\n  }, [canReadSecrets, isExportDrawerOpen, handleClose, receiverName]);\n\n  return [drawer, handleOpen];\n};\n","import { isEmpty, times } from 'lodash';\n\nimport { GrafanaManagedReceiverConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\n\n/**\n * This function will extract the integrations that have been defined for either grafana managed contact point\n * or vanilla Alertmanager receiver.\n *\n * It will attempt to normalize the data structure to how they have been defined for Grafana managed contact points.\n * That way we can work with the same data structure in the UI.\n *\n * We don't normalize the configuration settings and those are blank for vanilla Alertmanager receivers.\n *\n * Example input:\n *  { name: 'my receiver', email_configs: [{ from: \"foo@bar.com\" }] }\n *\n * Example output:\n *  { name: 'my receiver', grafana_managed_receiver_configs: [{ type: 'email', settings: {} }] }\n */\nexport function extractReceivers(receiver: Receiver): GrafanaManagedReceiverConfig[] {\n  if ('grafana_managed_receiver_configs' in receiver) {\n    return receiver.grafana_managed_receiver_configs ?? [];\n  }\n\n  const integrations = Object.entries(receiver)\n    .filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs'))\n    .filter(([_, value]) => Array.isArray(value) && !isEmpty(value))\n    .reduce((acc: GrafanaManagedReceiverConfig[], [key, value]) => {\n      const type = key.replace('_configs', '');\n\n      const configs = times(value.length, () => ({\n        name: receiver.name,\n        type: type,\n        settings: [], // we don't normalize the configuration values\n        disableResolveMessage: false,\n      }));\n\n      return acc.concat(configs);\n    }, []);\n\n  return integrations;\n}\n","import { GrafanaManagedReceiverConfig } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { OnCallIntegrationDTO } from '../../../api/onCallApi';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\nimport { createBridgeURL } from '../../PluginBridge';\n\nimport { GRAFANA_APP_RECEIVERS_SOURCE_IMAGE } from './types';\n\nexport interface ReceiverPluginMetadata {\n  icon: string;\n  title: string;\n  description?: string;\n  externalUrl?: string;\n  warning?: string;\n}\n\nconst onCallReceiverICon = GRAFANA_APP_RECEIVERS_SOURCE_IMAGE[SupportedPlugin.OnCall];\nconst onCallReceiverTitle = 'Grafana OnCall';\n\nexport const onCallReceiverMeta: ReceiverPluginMetadata = {\n  title: onCallReceiverTitle,\n  icon: onCallReceiverICon,\n};\n\nexport function getOnCallMetadata(\n  onCallIntegrations: OnCallIntegrationDTO[] | undefined | null,\n  receiver: GrafanaManagedReceiverConfig,\n  hasAlertManagerConfigData = true\n): ReceiverPluginMetadata {\n  if (!hasAlertManagerConfigData) {\n    return onCallReceiverMeta;\n  }\n\n  // oncall status is still loading\n  if (onCallIntegrations === undefined) {\n    return onCallReceiverMeta;\n  }\n\n  // indication that onCall is not enabled\n  if (onCallIntegrations == null) {\n    return {\n      ...onCallReceiverMeta,\n      warning: 'Grafana OnCall is not installed or is disabled',\n    };\n  }\n\n  const matchingOnCallIntegration = onCallIntegrations.find(\n    (integration) => integration.integration_url === receiver.settings?.url\n  );\n\n  return {\n    ...onCallReceiverMeta,\n    description: matchingOnCallIntegration?.display_name,\n    externalUrl: matchingOnCallIntegration\n      ? createBridgeURL(SupportedPlugin.OnCall, `/integrations/${matchingOnCallIntegration.value}`)\n      : undefined,\n    warning: matchingOnCallIntegration ? undefined : 'OnCall Integration no longer exists',\n  };\n}\n","import { difference, groupBy, take, trim, upperFirst } from 'lodash';\nimport { ReactNode } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  MatcherOperator,\n  Receiver,\n  Route,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO, NotifierStatus, ReceiversStateDTO } from 'app/types';\n\nimport { OnCallIntegrationDTO } from '../../api/onCallApi';\nimport { computeInheritedTree } from '../../utils/notification-policies';\nimport { extractReceivers } from '../../utils/receivers';\nimport { ReceiverTypes } from '../receivers/grafanaAppReceivers/onCall/onCall';\nimport { getOnCallMetadata, ReceiverPluginMetadata } from '../receivers/grafanaAppReceivers/useReceiversMetadata';\n\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY, RECEIVER_STATUS_KEY } from './useContactPoints';\n\nconst AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY = '__grafana_receiver__';\n\nexport function isProvisioned(contactPoint: GrafanaManagedContactPoint) {\n  // for some reason the provenance is on the receiver and not the entire contact point\n  const provenance = contactPoint.grafana_managed_receiver_configs?.find((receiver) => receiver.provenance)?.provenance;\n\n  return Boolean(provenance);\n}\n\n// TODO we should really add some type information to these receiver settings...\nexport function getReceiverDescription(receiver: ReceiverConfigWithMetadata): ReactNode | undefined {\n  if (!receiver.settings) {\n    return undefined;\n  }\n  switch (receiver.type) {\n    case 'email': {\n      const hasEmailAddresses = 'addresses' in receiver.settings; // when dealing with alertmanager email_configs we don't normalize the settings\n      return hasEmailAddresses ? summarizeEmailAddresses(receiver.settings['addresses']) : undefined;\n    }\n    case 'slack': {\n      const recipient: string | undefined = receiver.settings['recipient'];\n      if (!recipient) {\n        return;\n      }\n\n      // Slack channel name might have a \"#\" in the recipient already\n      const channelName = recipient.replace(/^#/, '');\n      return `#${channelName}`;\n    }\n    case 'kafka': {\n      const topicName: string | undefined = receiver.settings['kafkaTopic'];\n      return topicName;\n    }\n    case 'webhook': {\n      const url: string | undefined = receiver.settings['url'];\n      return url;\n    }\n    case ReceiverTypes.OnCall: {\n      return receiver[RECEIVER_PLUGIN_META_KEY]?.description;\n    }\n    default:\n      return receiver[RECEIVER_META_KEY]?.description;\n  }\n}\n\n// input: foo+1@bar.com, foo+2@bar.com, foo+3@bar.com, foo+4@bar.com\n// output: foo+1@bar.com, foo+2@bar.com, +2 more\nexport function summarizeEmailAddresses(addresses: string): string {\n  const MAX_ADDRESSES_SHOWN = 3;\n  const SUPPORTED_SEPARATORS = /,|;|\\n+/g;\n\n  // split all email addresses\n  const emails = addresses.trim().split(SUPPORTED_SEPARATORS).map(trim);\n\n  // grab the first 3 and the rest\n  const summary = take(emails, MAX_ADDRESSES_SHOWN);\n  const rest = difference(emails, summary);\n\n  if (rest.length) {\n    summary.push(`+${rest.length} more`);\n  }\n\n  return summary.join(', ');\n}\n\n// Grafana Managed contact points have receivers with additional diagnostics\nexport interface ReceiverConfigWithMetadata extends GrafanaManagedReceiverConfig {\n  // we're using a symbol here so we'll never have a conflict on keys for a receiver\n  // we also specify that the diagnostics might be \"undefined\" for vanilla Alertmanager\n  [RECEIVER_STATUS_KEY]?: NotifierStatus | undefined;\n  [RECEIVER_META_KEY]: {\n    name: string;\n    description?: string;\n  };\n  // optional metadata that comes from a particular plugin (like Grafana OnCall)\n  [RECEIVER_PLUGIN_META_KEY]?: ReceiverPluginMetadata;\n}\n\nexport interface ContactPointWithMetadata extends GrafanaManagedContactPoint {\n  policies?: RouteReference[]; // now is optional as we don't have the data from the read-only endpoint\n  grafana_managed_receiver_configs: ReceiverConfigWithMetadata[];\n}\n\n/**\n * This function adds the status information for each of the integrations (contact point types) in a contact point\n * 1. we iterate over all contact points\n * 2. for each contact point we \"enhance\" it with the status or \"undefined\" for vanilla Alertmanager\n * contactPoints: list of contact points\n * alertmanagerConfiguration: optional as is passed when we need to get number of policies for each contact point\n * and we prefer using the data from the read-only endpoint.\n */\nexport function enhanceContactPointsWithMetadata(\n  status: ReceiversStateDTO[] = [],\n  notifiers: NotifierDTO[] = [],\n  onCallIntegrations: OnCallIntegrationDTO[] | undefined | null,\n  contactPoints: Receiver[],\n  alertmanagerConfiguration?: AlertManagerCortexConfig\n): ContactPointWithMetadata[] {\n  // compute the entire inherited tree before finding what notification policies are using a particular contact point\n  const fullyInheritedTree = computeInheritedTree(alertmanagerConfiguration?.alertmanager_config?.route ?? {});\n  const usedContactPoints = getUsedContactPoints(fullyInheritedTree);\n  const usedContactPointsByName = groupBy(usedContactPoints, 'receiver');\n\n  const contactPointsList = alertmanagerConfiguration\n    ? (alertmanagerConfiguration?.alertmanager_config.receivers ?? [])\n    : (contactPoints ?? []);\n\n  return contactPointsList.map((contactPoint) => {\n    const receivers = extractReceivers(contactPoint);\n    const statusForReceiver = status.find((status) => status.name === contactPoint.name);\n\n    return {\n      ...contactPoint,\n      policies:\n        alertmanagerConfiguration && usedContactPointsByName && (usedContactPointsByName[contactPoint.name] ?? []),\n      grafana_managed_receiver_configs: receivers.map((receiver, index) => {\n        const isOnCallReceiver = receiver.type === ReceiverTypes.OnCall;\n        // if we don't have alertmanagerConfiguration we can't get the metadata for oncall receivers,\n        // because we don't have the url, as we are not using the alertmanager configuration\n        // but the contact points returned by the read only permissions contact points endpoint (/api/v1/notifications/receivers)\n        return {\n          ...receiver,\n          [RECEIVER_STATUS_KEY]: statusForReceiver?.integrations[index],\n          [RECEIVER_META_KEY]: getNotifierMetadata(notifiers, receiver),\n          // if OnCall plugin is installed, we'll add it to the receiver's plugin metadata\n          [RECEIVER_PLUGIN_META_KEY]: isOnCallReceiver\n            ? getOnCallMetadata(onCallIntegrations, receiver, Boolean(alertmanagerConfiguration))\n            : undefined,\n        };\n      }),\n    };\n  });\n}\n\nexport function isAutoGeneratedPolicy(route: Route) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY && objectMatcher[1] === MatcherOperator.equal\n      );\n    }) ?? false\n  );\n}\n\nexport interface RouteReference {\n  receiver: string;\n  route: {\n    type: 'auto-generated' | 'normal';\n  };\n}\n\nexport function getUsedContactPoints(route: Route): RouteReference[] {\n  const childrenContactPoints = route.routes?.flatMap((route) => getUsedContactPoints(route)) ?? [];\n\n  if (route.receiver) {\n    return [\n      {\n        receiver: route.receiver,\n        route: {\n          type: isAutoGeneratedPolicy(route) ? 'auto-generated' : 'normal',\n        },\n      },\n      ...childrenContactPoints,\n    ];\n  }\n\n  return childrenContactPoints;\n}\n\nfunction getNotifierMetadata(notifiers: NotifierDTO[], receiver: GrafanaManagedReceiverConfig) {\n  const match = notifiers.find((notifier) => notifier.type === receiver.type);\n\n  return {\n    name: match?.name ?? upperFirst(receiver.type),\n    description: match?.description,\n  };\n}\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ClipboardButton, CodeEditor, TextLink, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats, ExportProvider, ProvisioningType } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n  const provider = allGrafanaExportProviders[format];\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [provider, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <FileExportInlineDocumentation exportProvider={provider} />\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n});\n\nfunction FileExportInlineDocumentation({ exportProvider }: { exportProvider: ExportProvider<unknown> }) {\n  const { name, type } = exportProvider;\n\n  const exportInlineDoc: Record<ProvisioningType, { title: string; component: React.ReactNode }> = {\n    file: {\n      title: 'File-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for File Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/file-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    api: {\n      title: 'API-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for API Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/http-api-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    terraform: {\n      title: 'Terraform-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for Terraform Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/terraform-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n  };\n\n  const { title, component } = exportInlineDoc[type];\n\n  return (\n    <Alert title={title} severity=\"info\" bottomSpacing={0} topSpacing={0}>\n      {component}\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export type ProvisioningType = 'file' | 'api' | 'terraform';\n\nexport interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  type: ProvisioningType;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  type: 'file',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n  type: 'file',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n  type: 'terraform',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { SupportedPlugin } from '../../../types/pluginBridges';\n\nexport interface AmRouteReceiver {\n  label: string;\n  value: string;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\nexport const GRAFANA_APP_RECEIVERS_SOURCE_IMAGE: Record<SupportedPlugin, string> = {\n  [SupportedPlugin.OnCall]: 'public/img/alerting/oncall_logo.svg',\n\n  [SupportedPlugin.Incident]: '',\n  [SupportedPlugin.MachineLearning]: '',\n  [SupportedPlugin.Labels]: '',\n  [SupportedPlugin.Slo]: '',\n};\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css({\n    flexGrow: 1,\n    height: '100%',\n    paddingBottom: '16px',\n    marginBottom: theme.spacing(2),\n  }),\n  applyButton: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexGrow: 0,\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n});\n","import { IconName } from '@grafana/ui';\n\nexport const INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n  webhook: 'link',\n  sns: 'amazon',\n};\n","import { isArray, pick, reduce } from 'lodash';\n\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Route,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\n\nimport { Label, normalizeMatchers, unquoteWithUnescape } from './matchers';\n\n// If a policy has no matchers it still can be a match, hence matchers can be empty and match can be true\n// So we cannot use null as an indicator of no match\ninterface LabelMatchResult {\n  match: boolean;\n  matcher: ObjectMatcher | null;\n}\n\nexport const INHERITABLE_KEYS = ['receiver', 'group_by', 'group_wait', 'group_interval', 'repeat_interval'] as const;\nexport type InheritableKeys = typeof INHERITABLE_KEYS;\nexport type InheritableProperties = Pick<Route, InheritableKeys[number]>;\n\ntype LabelsMatch = Map<Label, LabelMatchResult>;\n\ninterface MatchingResult {\n  matches: boolean;\n  labelsMatch: LabelsMatch;\n}\n\n// returns a match results for given set of matchers (from a policy for instance) and a set of labels\nexport function matchLabels(matchers: ObjectMatcher[], labels: Label[]): MatchingResult {\n  const matches = matchLabelsSet(matchers, labels);\n\n  // create initial map of label => match result\n  const labelsMatch: LabelsMatch = new Map(labels.map((label) => [label, { match: false, matcher: null }]));\n\n  // for each matcher, check which label it matched for\n  matchers.forEach((matcher) => {\n    const matchingLabel = labels.find((label) => isLabelMatch(matcher, label));\n\n    // record that matcher for the label\n    if (matchingLabel) {\n      labelsMatch.set(matchingLabel, {\n        match: true,\n        matcher,\n      });\n    }\n  });\n\n  return { matches, labelsMatch };\n}\n\n// Compare set of matchers to set of label\nexport function matchLabelsSet(matchers: ObjectMatcher[], labels: Label[]): boolean {\n  for (const matcher of matchers) {\n    if (!isLabelMatchInSet(matcher, labels)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport interface AlertInstanceMatch {\n  instance: Labels;\n  labelsMatch: LabelsMatch;\n}\n\nexport interface RouteMatchResult<T extends Route> {\n  route: T;\n  labelsMatch: LabelsMatch;\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\n\n// If the current node is not a match, return nothing\n// Normalization should have happened earlier in the code\nfunction findMatchingRoutes<T extends Route>(route: T, labels: Label[]): Array<RouteMatchResult<T>> {\n  let childMatches: Array<RouteMatchResult<T>> = [];\n\n  // If the current node is not a match, return nothing\n  const matchResult = matchLabels(route.object_matchers ?? [], labels);\n  if (!matchResult.matches) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (route.routes) {\n    for (const child of route.routes) {\n      let matchingChildren = findMatchingRoutes(child, labels);\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      childMatches = childMatches.concat(matchingChildren);\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (childMatches.length === 0) {\n    childMatches.push({ route, labelsMatch: matchResult.labelsMatch });\n  }\n\n  return childMatches;\n}\n\n// This is a performance improvement to normalize matchers only once and use the normalized version later on\nexport function normalizeRoute(rootRoute: RouteWithID): RouteWithID {\n  function normalizeRoute(route: RouteWithID) {\n    route.object_matchers = normalizeMatchers(route);\n    delete route.matchers;\n    delete route.match;\n    delete route.match_re;\n    route.routes?.forEach(normalizeRoute);\n  }\n\n  const normalizedRootRoute = structuredClone(rootRoute);\n  normalizeRoute(normalizedRootRoute);\n\n  return normalizedRootRoute;\n}\n\nexport function unquoteRouteMatchers(route: RouteWithID): RouteWithID {\n  function unquoteRoute(route: RouteWithID) {\n    route.object_matchers = route.object_matchers?.map(([name, operator, value]) => {\n      return [unquoteWithUnescape(name), operator, unquoteWithUnescape(value)];\n    });\n    route.routes?.forEach(unquoteRoute);\n  }\n\n  const unwrappedRootRoute = structuredClone(route);\n  unquoteRoute(unwrappedRootRoute);\n\n  return unwrappedRootRoute;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute.route === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: InheritableProperties\n): InheritableProperties {\n  const propsFromParent: InheritableProperties = pick(parentRoute, INHERITABLE_KEYS);\n  const inheritableProperties: InheritableProperties = {\n    ...propsFromParent,\n    ...propertiesParentInherited,\n  };\n\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: InheritableProperties, parentValue, property) => {\n      const parentHasValue = parentValue != null;\n\n      const inheritableValues = [undefined, '', null];\n      // @ts-ignore\n      const childIsInheriting = inheritableValues.some((value) => childRoute[property] === value);\n      const inheritFromValue = childIsInheriting && parentHasValue;\n\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' &&\n        parentHasValue &&\n        isArray(childRoute[property]) &&\n        childRoute[property]?.length === 0;\n\n      const inheritFromParent = inheritFromValue || inheritEmptyGroupByFromParent;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree<T extends Route>(parent: T): T {\n  return {\n    ...parent,\n    routes: parent.routes?.map((child) => {\n      const inheritedProperties = getInheritedProperties(parent, child);\n\n      return computeInheritedTree({\n        ...child,\n        ...inheritedProperties,\n      });\n    }),\n  };\n}\n\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  // At the time of writing, Alertmanager compiles to another (anchored) Regular Expression,\n  // so we should also anchor our UI matches for consistency with this behaviour\n  // https://github.com/prometheus/alertmanager/blob/fd37ce9c95898ca68be1ab4d4529517174b73c33/pkg/labels/matcher.go#L69\n  [MatcherOperator.regex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return re.test(lv);\n  },\n  [MatcherOperator.notRegex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return !re.test(lv);\n  },\n};\n\nfunction isLabelMatchInSet(matcher: ObjectMatcher, labels: Label[]): boolean {\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  let labelValue = ''; // matchers that have no labels are treated as empty string label values\n  const labelForMatcher = Object.fromEntries(labels)[matcherKey];\n  if (labelForMatcher) {\n    labelValue = labelForMatcher;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\n// ⚠️ DO NOT USE THIS FUNCTION FOR ROUTE SELECTION ALGORITHM\n// for route selection algorithm, always compare a single matcher to the entire label set\n// see \"matchLabelsSet\"\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label): boolean {\n  let [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties, isLabelMatchInSet };\n"],"names":["CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","ConditionalWrap","children","shouldWrap","wrap","_ref","PrimaryText","content","UnusedContactPointBadge","Badge","ContactPointHeader","props","name","disabled","provisioned","policies","onDelete","styles","getStyles","exportSupported","exportAllowed","editSupported","editAllowed","deleteSupported","deleteAllowed","ExportDrawer","openExportDrawer","useExportContactPoint","numberOfPolicies","isReferencedByAnyPolicy","isReferencedByRegularPolicies","ref","canEdit","canDelete","menuActions","Menu","Tooltip","referencedByPoliciesText","Stack","Text","TextLink","Provisioning","Spacer","Dropdown","MoreButton","theme","receiverTypeNames","ReceiverMetadataBadge","icon","title","externalUrl","warning","Icon","ContactPoint","receivers","showFullMetadata","receiver","index","diagnostics","metadata","sendingResolved","pluginMetadata","key","ContactPointReceiver","ContactPointReceiverSummary","type","description","hasMetadata","ContactPointReceiverTitleRow","ContactPointReceiverMetadataRow","iconName","countByType","receiverName","isLastItem","Fragment","failedToSend","lastDeliveryAttempt","lastDeliveryAttemptDuration","hasDeliveryAttempt","MetaText","RECEIVER_STATUS_KEY","RECEIVER_META_KEY","RECEIVER_PLUGIN_META_KEY","defaultHookOptions","useContactPointsWithStatus","includePoliciesCount","receiverStatusPollingInterval","selectedAlertmanager","isGrafanaAlertmanager","onCallPluginInstalled","onCallPluginStatusLoading","fetchContactPointsStatus","fetchReceiverMetadata","onCallIntegrations","onCallPluginIntegrationsLoading","onCallMetadata","fetchAlertmanagerConfiguration","result","fetchGrafanaContactPoints","error","isLoading","contactPoints","a","b","useDeleteContactPoint","fetchAlertmanagerConfig","updateAlertManager","updateAlertmanagerState","contactPointName","data","newConfig","draft","GrafanaReceiverExportPreview","decrypt","exportFormat","onClose","receiverDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaReceiverExporter","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaReceiversExportPreview","GrafanaReceiversExporter","ALL_CONTACT_POINTS","setReceiverName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","decryptSecretsSupported","decryptSecretsAllowed","canReadSecrets","handleClose","handleOpen","extractReceivers","_","value","acc","configs","onCallReceiverMeta","getOnCallMetadata","hasAlertManagerConfigData","matchingOnCallIntegration","integration","AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY","isProvisioned","contactPoint","getReceiverDescription","summarizeEmailAddresses","recipient","addresses","SUPPORTED_SEPARATORS","emails","summary","rest","enhanceContactPointsWithMetadata","status","notifiers","alertmanagerConfiguration","fullyInheritedTree","usedContactPoints","getUsedContactPoints","usedContactPointsByName","statusForReceiver","isOnCallReceiver","getNotifierMetadata","isAutoGeneratedPolicy","route","config","objectMatcher","childrenContactPoints","match","notifier","format","textDefinition","fileExportPreviewStyles","provider","onDownload","blob","formattedTextDefinition","FileExportInlineDocumentation","height","exportProvider","exportInlineDoc","component","onTabChange","formatProviders","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","GRAFANA_APP_RECEIVERS_SOURCE_IMAGE","cloudRulesTabs","RuleInspector","setValue","drawerStyles","onApply","formValues","RuleInspectorTabs","InspectorYamlTab","tabs","tab","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","INTEGRATION_ICONS","INHERITABLE_KEYS","matchLabels","matchers","labels","matches","matchLabelsSet","labelsMatch","label","matcher","matchingLabel","isLabelMatch","isLabelMatchInSet","findMatchingRoutes","childMatches","matchResult","child","matchingChildren","normalizeRoute","rootRoute","normalizedRootRoute","unquoteRouteMatchers","unquoteRoute","operator","unwrappedRootRoute","findMatchingAlertGroups","routeTree","alertGroups","matchingGroups","group","matchingAlerts","alert","matchingRoute","getInheritedProperties","parentRoute","childRoute","propertiesParentInherited","inheritableProperties","inheritedProperties","parentValue","property","parentHasValue","inheritFromValue","inheritEmptyGroupByFromParent","computeInheritedTree","parent","OperatorFunctions","lv","mv","matcherKey","matcherValue","labelValue","labelForMatcher","matchFunction","labelKey"],"sourceRoot":""}