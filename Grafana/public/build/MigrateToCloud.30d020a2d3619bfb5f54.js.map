{"version":3,"file":"MigrateToCloud.30d020a2d3619bfb5f54.js","mappings":"yOAWO,MAAMA,EAAW,CAAC,CAAE,SAAAC,EAAU,MAAAC,EAAO,SAAAC,EAAU,UAAAC,CAAU,OAE5D,QAACC,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACC,EAAA,EAAI,CAAC,QAAQ,KAAM,SAAAJ,CAAA,CAAM,KAC1B,OAACI,EAAA,EAAI,CAAC,MAAM,YAAa,SAAAL,CAAA,CAAS,EACjCE,MACC,OAACI,EAAA,EAAQ,CAAC,KAAMJ,EAAU,SAAQ,GAC/B,SAAAC,GAAaD,CAAA,CAChB,GAEJ,ECjBSK,EAAW,OAEpB,OAACR,EAAQ,CAAC,SAAO,KAAE,+CAAgD,uCAAuC,EACxG,mBAAC,KAAK,CAAC,QAAQ,8CAA8C,gQAI7D,EACF,E,0BCJG,MAAMS,EAAqB,IAAM,CACtC,MAAMC,KAAS,MAAWC,EAAS,EAEnC,SACE,QAACC,EAAA,EAAG,CAAC,WAAW,aAAa,QAAQ,OAAO,UAAU,SAAS,IAAK,EAClE,oBAACZ,EAAA,CACC,SAAO,KAAE,qCAAsC,wBAAwB,EACvE,aAAW,KAAE,0CAA2C,8CAA8C,EACtG,SAAS,+FAET,oBAACK,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC,KAAK,CAAC,QAAQ,oCAAoC,0FAEnD,KACA,QAAC,MAAG,UAAWK,EAAO,KACpB,oBAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,mHAErD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,oDAErD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,oFAErD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,gIAGrD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,0KAGrD,EACF,GACF,GACF,EACF,KACA,OAACH,EAAA,EAAQ,CAAC,KAAK,+CACZ,iBAAE,kDAAmD,8BAA8B,EACtF,KACA,OAACA,EAAA,EAAQ,CAAC,KAAK,4EACZ,iBAAE,oDAAqD,+BAA+B,EACzF,GACF,CAEJ,EAEMI,GAAaE,IAA0B,CAC3C,QAAM,OAAI,CACR,QAAS,QACX,CAAC,CACH,G,iDChEO,SAASC,GAAkB,CAChC,SACE,OAACC,EAAA,EAAK,CAAC,SAAS,QAAQ,SAAO,KAAE,+CAAgD,sBAAsB,EACrG,mBAAC,KAAK,CAAC,QAAQ,8CAA8C,yEAE7D,EACF,CAEJ,C,gDCEO,MAAMC,GAAmB,CAAC,CAAE,OAAAC,EAAQ,UAAAC,EAAW,eAAAC,CAAe,OAEjE,QAACC,EAAA,GACC,OAAAH,EACA,SAAO,KAAE,+CAAgD,yBAAyB,EAClF,UAAWC,EAEV,UAAAC,KAAiB,OAACE,GAAA,CAAoB,eAAAF,CAAA,CAAgC,KAAK,OAACL,EAAe,EAAC,KAE7F,QAACM,EAAA,EAAM,UAAN,CACC,oBAACE,EAAA,GAAM,CAAC,QAAQ,YAAY,QAASJ,EACnC,mBAAC,KAAK,CAAC,QAAQ,+CAA+C,iBAAK,EACrE,EAECC,MACC,OAACI,EAAA,EAAe,CAAC,QAAQ,UAAU,QAAS,IAAMJ,EAAgB,gBAAiBD,EACjF,mBAAC,KAAK,CAAC,QAAQ,wDAAwD,uCAA2B,EACpG,GAEJ,GACF,EAIJ,SAASG,GAAoB,CAAE,eAAAF,CAAe,EAA+B,CAC3E,MAAMK,KAAU,SAAM,EACtB,SACE,OAACC,EAAA,GACC,eAAa,KACX,2DACA,yGACF,EACA,QAASD,EACT,SAAO,KAAE,qDAAsD,OAAO,EAEtE,oBAACnB,EAAA,EAAK,CACJ,oBAACqB,EAAA,EAAK,CAAC,GAAIF,EAAS,MAAOL,EAAgB,SAAQ,GAAC,KACpD,OAACI,EAAA,EAAe,CAAC,KAAK,gBAAgB,QAAS,IAAMJ,EACnD,mBAAC,KAAK,CAAC,QAAQ,qDAAqD,6BAAiB,EACvF,GACF,EACF,CAEJ,C,eC9CO,SAASQ,GAA6BC,EAA0C,CACrF,KAAM,CAAE,OAAAX,EAAQ,SAAAY,EAAU,UAAAC,EAAW,UAAAC,CAAU,EAAIH,EAE7CI,KACJ,oBACE,oBAAC,KACC,mBAAC,KAAK,CAAC,QAAQ,uDAAuD,2IAGtE,EACF,EAECH,MACC,OAACd,EAAA,GACC,SAAS,QACT,SAAO,KAAE,8DAA+D,sBAAsB,EAChG,GAEJ,EAGF,SACE,OAACkB,EAAA,GACC,OAAAhB,EACA,SAAO,KAAE,wDAAyD,wBAAwB,EAC1F,KAAAe,EACA,eAAa,KAAE,iEAAkE,cAAc,EAC/F,UAAAF,EACA,UAAAC,CAAA,CACF,CAEJ,C,eC9BO,MAAMG,GAAc,CAAC,CAAE,SAAAC,EAAU,eAAAC,EAAgB,WAAAC,CAAW,IAC7DA,KACK,OAAC,IAAQ,CAAC,MAAO,IAAK,EACpBF,KAEP,OAAC7B,EAAA,EAAI,CAAC,MAAM,UACV,mBAAC,KAAK,CAAC,QAAQ,uCAAuC,oCAAwB,EAChF,EAEO8B,IAAmB,mCACrB,OAAC,KAAK,CAAC,QAAQ,0CAA0C,2BAAe,EACtEA,KAEP,OAAC9B,EAAA,EAAI,CAAC,MAAM,QACV,mBAAC,KAAK,CAAC,QAAQ,8CAA8C,kCAAsB,EACrF,KAKF,OAACA,EAAA,EAAI,CAAC,MAAM,UACV,mBAAC,KAAK,CAAC,QAAQ,wCAAwC,mBAAO,EAChE,ECfJ,SAASgC,GAAcC,EAAc,CACnC,GAAI,IAAC,OAAsBA,CAAG,GAAK,OAAOA,EAAI,MAAS,UAAY,CAACA,EAAI,KACtE,OAAO,KAGT,MAAMC,EAAOD,GAAK,KACZE,EAAU,YAAaD,GAAQ,OAAOA,EAAK,SAAY,SAAWA,EAAK,QAAU,KACjFE,EAAY,cAAeF,GAAQ,OAAOA,EAAK,WAAc,SAAWA,EAAK,UAAY,KACzFG,EAAa,eAAgBH,GAAQ,OAAOA,EAAK,YAAe,SAAWA,EAAK,WAAa,KAEnG,MAAI,CAACC,GAAW,CAACC,GAAa,CAACC,EACtB,KAGF,CAAE,QAAAF,EAAS,UAAAC,EAAW,WAAAC,CAAW,CAC1C,CAEO,MAAMC,GAAqB,IAAM,CACtC,KAAM,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EACtD,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EAEtDC,KAAgB,MAA+B,EAC/C,CAACC,EAAqBC,CAAmB,KAAI,MAAqC,EAClF,CAACC,EAAqBC,CAAmB,KAAI,MAAqC,EAElFC,EAAqBhB,GAAcW,EAAc,KAAK,EAMtDd,EAAW,EAAQc,EAAc,MAAM,IAAOK,GAAoB,aAAe,IACjFC,EAAYN,EAAc,YAAcE,EAAoB,UAE5DK,KAAsB,eAAY,SAAY,CAG5C,UAFO,MAAMN,EAAoB,GAGrCJ,EAAmB,EAAI,CAE3B,EAAG,CAACI,CAAmB,CAAC,EAElBO,KAAoB,eAAY,SAAY,CAChD,GAAI,CAACR,EAAc,MAAM,GACvB,OAII,UADO,MAAMG,EAAoB,CAAE,IAAKH,EAAc,KAAK,EAAG,CAAC,GAEnED,EAAmB,EAAK,CAE5B,EAAG,CAACI,EAAqBH,EAAc,IAAI,CAAC,EAE5C,SACE,oBACE,qBAACrC,EAAA,EAAG,CAAC,QAAQ,OAAO,WAAW,aAAa,UAAU,SAAS,IAAK,EACjE,UAAAuC,GAAqB,WACpB,OAACrC,EAAe,EAAC,KAEjB,OAACR,EAAA,EAAI,CAAC,MAAM,YACV,oBAAC,KAAK,CAAC,QAAQ,0CAA0C,4BACvC,OAChB,OAAC4B,GAAW,CAAC,SAAAC,EAAoB,WAAYoB,EAAW,eAAgBD,GAAoB,UAAW,GACzG,EACF,EAGDnB,KACC,OAACb,EAAA,GAAM,CAAC,QAAS,IAAM0B,EAAmB,EAAI,EAAG,QAAQ,cACtD,iBAAE,iDAAkD,cAAc,EACrE,KAEA,OAAC1B,EAAA,GAAM,CAAC,SAAUiC,EAAW,QAASC,EACnC,SAAAL,EAAoB,aACjB,KAAE,2DAA4D,iCAAiC,KAC/F,KAAE,mDAAoD,4BAA4B,EACxF,GAEJ,KAEA,OAACnC,GAAA,CACC,OAAQ6B,EACR,UAAW,IAAMC,EAAmB,EAAK,EACzC,eAAgBK,EAAoB,MAAM,MAC5C,KAEA,OAACxB,GAAA,CACC,OAAQoB,EACR,UAAWU,EACX,UAAW,IAAMT,EAAmB,EAAK,EACzC,SAAU,EAAQK,EAAoB,KAAK,CAC7C,GACF,CAEJ,EC1Ga,GAAO,OAEhB,OAACzC,EAAA,EAAG,CAAC,gBAAgB,YAAY,QAAQ,OAAO,WAAW,SAAS,UAAU,SAC5E,oBAACA,EAAA,EAAG,CAAC,SAAU,GAAI,SAAU,EAAG,SAAU,EAAG,IAAK,EAAG,UAAU,SAAS,QAAQ,OAC9E,qBAACP,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACG,EAAQ,EAAC,KACV,OAACoC,GAAkB,EAAC,GACtB,KAEA,OAACnC,EAAkB,EAAC,GACtB,EACF,E,eCNG,MAAMiD,GAAkB,CAAC,CAAE,OAAAzC,EAAQ,QAAA0C,EAAS,UAAAJ,EAAW,oBAAAK,EAAqB,UAAA7B,CAAU,IAAa,CACxG,MAAM8B,KACJ,QAACxD,EAAA,EAAK,CAAC,UAAU,SACd,UAAAsD,MACC,OAAC5C,EAAA,GACC,SAAS,QACT,SAAO,KAAE,0CAA2C,kCAAkC,EACxF,KAEF,OAAC,OACC,mBAAC,KAAK,CAAC,QAAQ,yCAAyC,0KAGxD,EACF,GACF,EAGF,SACE,OAACkB,EAAA,GACC,OAAAhB,EACA,SAAO,KAAE,0CAA2C,6BAA6B,EACjF,QAAM,oBAAE,EACR,YAAa4C,EACb,YACEN,KACI,KAAE,kDAAmD,kBAAkB,KACvE,KAAE,+CAAgD,YAAY,EAEpE,eAAa,KAAE,2CAA4C,QAAQ,EACnE,UAAWK,EACX,UAAA7B,CAAA,CACF,CAEJ,E,4BCvBO,MAAM+B,GAAe,CAAC,CAAE,OAAA7C,EAAQ,UAAAsC,EAAW,QAAAI,EAAS,UAAAzC,EAAW,UAAAY,CAAU,IAAa,CAC3F,MAAMiC,KAAU,SAAM,EAChBrD,KAAS,MAAW,EAAS,EAE7B,CACJ,aAAAsD,EACA,SAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,EACpB,MAAAC,CACF,KAAI,OAAkB,CACpB,cAAe,CACb,MAAO,EACT,CACF,CAAC,EAEKC,EAAQD,EAAM,OAAO,EAErBE,EAA6CC,GAAa,CAC9DxC,EAAU,CACR,gCAAiC,CAC/B,UAAWwC,EAAS,KACtB,CACF,CAAC,EAAE,KAAMC,GAAS,CACC,OAAOA,GAAS,UAAYA,GAAQ,UAAWA,GAE9DrD,EAAU,CAEd,CAAC,CACH,EAEA,SACE,OAACE,EAAA,GACC,OAAAH,EACA,SAAO,KAAE,uCAAwC,0BAA0B,EAC3E,UAAWC,EAEX,oBAAC,QAAK,SAAU8C,EAAaK,CAAgB,EAC3C,oBAAC/D,EAAA,EAAI,CAAC,MAAM,YACV,oBAACD,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC,KAAK,CAAC,QAAQ,kDAAkD,8DAEjE,KAEA,OAAC,OACC,mBAACE,EAAA,EAAQ,CAAC,KAAK,6DAA6D,SAAQ,GACjF,iBAAE,8CAA+C,mCAAmC,EACvF,EACF,KAEA,OAAC,KAAK,CAAC,QAAQ,kDAAkD,gLAGjE,KAEA,OAAC,OACC,mBAACA,EAAA,EAAQ,CAAC,KAAK,oCAAoC,SAAQ,GACxD,iBAAE,kDAAmD,sBAAsB,EAC9E,EACF,KAEA,OAAC,OACC,mBAAC,KAAK,CAAC,QAAQ,4CAA4C,wKAG3D,EACF,KAEA,OAAC,OACC,mBAAC,KAAK,CAAC,QAAQ,yDAAyD,0KAGxE,EACF,EAECoD,MACC,OAAC5C,EAAA,GACC,SAAS,QACT,SAAO,KAAE,mDAAoD,oBAAoB,EAEjF,mBAAC,KAAK,CAAC,QAAQ,yDAAyD,8FAExE,EACF,KAGF,OAACU,EAAA,GACC,UAAWf,EAAO,MAClB,QAAS,CAAC,CAACwD,EAAO,MAClB,MAAOA,EAAO,OAAO,QACrB,SAAO,KAAE,kDAAmD,iBAAiB,EAC7E,SAAQ,GAER,mBAACxC,EAAA,GACE,GAAGuC,EAAS,QAAS,CACpB,YAAU,KAAE,sDAAuD,6BAA6B,CAClG,CAAC,EACD,GAAIF,EACJ,eAAa,KAAE,8DAA+D,kBAAkB,EAClG,EACF,GACF,EACF,KAEA,QAAC3C,EAAA,EAAM,UAAN,CACC,oBAACE,EAAA,GAAM,CAAC,QAAQ,YAAY,QAASJ,EACnC,mBAAC,KAAK,CAAC,QAAQ,wCAAwC,kBAAM,EAC/D,KACA,OAACI,EAAA,GAAM,CAAC,KAAK,SAAS,SAAUiC,GAAa,CAACa,EAC3C,SAAAb,KACG,KAAE,4CAA6C,6BAA6B,KAC5E,KAAE,yCAA0C,uBAAuB,EACzE,GACF,GACF,EACF,CAEJ,EAEM,GAAa1C,IAA0B,CAC3C,SAAO,OAAI,CACT,UAAW,SACb,CAAC,CACH,GCvIa2D,GAAe,IAAM,CAChC,KAAM,CAACC,EAAWC,CAAY,KAAI,YAAS,EAAK,EAC1C,CAACC,EAAiBC,CAAuB,KAAI,MAAyB,EAE5E,SACE,oBACE,qBAAChE,EAAA,EAAG,CAAC,QAAQ,OAAO,IAAK,EAAG,UAAU,SAAS,WAAW,SAAS,gBAAgB,YACjF,oBAACN,EAAA,EAAI,CAAC,QAAQ,KAAK,cAAc,SAC/B,mBAAC,KAAK,CAAC,QAAQ,8BAA8B,4CAAgC,EAC/E,KAEA,OAACgB,EAAA,GAAM,CAAC,SAAUsD,EAAwB,UAAW,QAAS,IAAMF,EAAa,EAAI,EACnF,mBAAC,KAAK,CAAC,QAAQ,8BAA8B,0CAA8B,EAC7E,GACF,KAEA,OAACZ,GAAA,CACC,OAAQW,EACR,UAAWG,EAAwB,UACnC,QAASA,EAAwB,QACjC,UAAWD,EACX,UAAW,IAAMD,EAAa,EAAK,EACrC,GACF,CAEJ,EC7BaG,GAAe,OAExB,QAACxE,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACL,EAAA,CACC,SAAO,KAAE,uCAAwC,wBAAwB,EACzE,aAAW,KAAE,4CAA6C,4BAA4B,EACtF,SAAS,qCAET,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,4OAIrD,EACF,KAEA,OAACA,EAAA,CACC,SAAO,KAAE,kCAAmC,wBAAwB,EACpE,aAAW,KAAE,uCAAwC,mCAAmC,EACxF,SAAS,8BAET,mBAAC,KAAK,CAAC,QAAQ,iCAAiC,8MAGhD,EACF,KAEA,OAACA,EAAA,CACC,SAAO,KAAE,sCAAuC,eAAe,EAC/D,aAAW,KAAE,2CAA4C,2BAA2B,EACpF,SAAS,4BAET,mBAAC,KAAK,CAAC,QAAQ,qCAAqC,kQAIpD,EACF,GACF,ECrCS8E,GAAgB,OAEzB,QAACzE,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACL,EAAA,CACC,SAAO,KAAE,6BAA8B,oDAAoD,EAC3F,aAAW,KAAE,kCAAmC,iBAAiB,EACjE,SAAS,+FAET,mBAAC,KAAK,CAAC,QAAQ,4BAA4B,6MAG3C,EACF,KACA,OAACA,EAAA,CACC,SAAO,KAAE,iCAAkC,wBAAwB,EACnE,aAAW,KAAE,sCAAuC,uBAAuB,EAC3E,SAAS,8BAET,mBAAC,KAAK,CAAC,QAAQ,gCAAgC,2KAG/C,EACF,KACA,OAACA,EAAA,CACC,SAAO,KAAE,oCAAqC,gDAAgD,EAC9F,aAAW,KAAE,yCAA0C,sCAAsC,EAC7F,SAAS,4EAET,mBAAC,KAAK,CAAC,QAAQ,mCAAmC,sHAGlD,EACF,GACF,EChCS+E,GAAa,OAEtB,OAACnE,EAAA,EAAG,CAAC,gBAAgB,YAAY,QAAQ,OAAO,WAAW,SAAS,UAAU,SAC5E,mBAACA,EAAA,EAAG,CAAC,SAAU,IAAK,SAAU,EAAG,SAAU,EACzC,oBAACP,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACmE,GAAY,EAAC,KAEd,QAACQ,GAAA,GACC,WAAW,aACX,IAAK,EACL,QAAS,CACP,GAAI,EACJ,GAAI,CACN,EAEA,oBAACH,GAAY,EAAC,KACd,OAACC,GAAa,EAAC,GACjB,GACF,EACF,EACF,E,gBCjBG,SAASG,EAAc,CAAE,MAAA/E,EAAO,SAAAD,CAAS,EAAuB,CACrE,SACE,QAACW,EAAA,EAAG,CAAC,SAAU,CAAE,GAAI,EAAG,IAAK,EAAG,EAAG,QAAQ,OAAO,UAAU,SAC1D,oBAACN,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAC7B,SAAAJ,CAAA,CACH,KACA,OAACI,EAAA,EAAI,CAAC,QAAQ,KAAM,SAAAL,CAAA,CAAS,GAC/B,CAEJ,CCMO,SAASiF,GAAiBtD,EAA8B,CAC7D,KAAM,CACJ,QAAAuD,EACA,SAAAC,EACA,OAAAC,EACA,oBAAAC,EACA,aAAAC,EACA,kBAAAC,EACA,uBAAAC,EACA,gBAAAC,EAEA,mBAAAC,EACA,wBAAAC,EACA,iBAAAC,CACF,EAAIjE,EAMJ,SACE,QAAChB,EAAA,GACC,YAAY,OACZ,YAAY,QACZ,QAAS,EACT,QAAQ,OACR,IAAK,EACL,WAAW,SACX,eAAe,gBAEf,qBAACP,EAAA,EAAK,CAAC,IAAK,EAAG,KAAK,OAClB,oBAAC4E,EAAa,CAAC,SAAO,KAAE,yCAA0C,oBAAoB,EACnF,SAAAG,GAAU,QACTA,GAAU,WAEV,OAAC9E,EAAA,EAAI,CAAC,MAAM,YACV,mBAAC,KAAK,CAAC,QAAQ,gDAAgD,2BAAe,EAChF,EAEJ,KAEA,OAAC2E,EAAa,CAAC,SAAO,KAAE,gDAAiD,iBAAiB,EACvF,SA1BU,CA0BV,CACH,KAEA,OAACA,EAAa,CAAC,SAAO,KAAE,kDAAmD,QAAQ,EAChF,SA7BU,CA6BV,CACH,KAEA,OAACA,EAAa,CAAC,SAAO,KAAE,qDAAsD,uBAAuB,EAClG,SAhCY,CAgCZ,CACH,KAEA,QAACA,EAAa,CAAC,SAAO,KAAE,8CAA+C,cAAc,EAClF,UAAAE,EAAQ,QACT,OAACW,GAAA,EAAK,CAAC,EAAG,EAAG,OAAO,QAAS,MAC7B,OAACxE,EAAA,IACC,SAAU+D,EACV,QAASE,EACT,QAAQ,YACR,KAAK,KACL,KAAMD,EAAsB,UAAY,OAExC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,sBAAU,EACjE,GACF,GACF,EAECE,MACC,OAAClE,EAAA,GAAM,CAAC,SAAU+D,EAAQ,QAASK,EAAiB,KAAMD,EAAyB,UAAY,OAC7F,mBAAC,KAAK,CAAC,QAAQ,2CAA2C,0BAAc,EAC1E,EAGDE,MACC,OAACrE,EAAA,IACC,SAAU+D,GAAUO,EACpB,QAASC,EACT,KAAMD,EAA0B,UAAY,OAE5C,mBAAC,KAAK,CAAC,QAAQ,4CAA4C,2BAAe,EAC5E,GAEJ,CAEJ,C,sCCjGO,SAASG,GAASnE,EAA8C,CACrE,MAAMY,EAAOZ,EAAM,IAAI,SAEvB,SACE,QAACvB,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SACxC,oBAAC2F,GAAA,CAAa,SAAUxD,CAAA,CAAM,KAE9B,OAACnC,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC5B,SAAAmC,EAAK,OAAS,gBAAe,OAACyD,GAAA,CAAe,KAAAzD,CAAA,CAAY,KAAK,OAAC0D,GAAA,CAAc,KAAA1D,CAAA,CAAY,EAC5F,GACF,CAEJ,CAEA,SAAS2D,GAAkBC,EAAuB,CAChD,GAAI,UAAWA,GAAiB,OAAOA,EAAc,OAAU,SAC7D,OAAOA,EAAc,KAIzB,CAEA,SAASH,GAAe,CAAE,KAAAzD,CAAK,EAAyC,CACtE,MAAM6D,EAAgB7D,EAAK,MACrB8D,EAAaC,EAAcF,CAAa,EAE9C,OAAKC,KAgBH,oBACE,oBAAC,QAAM,SAAAA,EAAW,KAAK,KACvB,OAAChG,EAAA,EAAI,CAAC,MAAM,YAAa,SAAAgG,EAAW,KAAK,GAC3C,KAjBE,oBACE,oBAAChG,EAAA,EAAI,CACH,oBAAC,KAAK,CAAC,QAAQ,2DAA2D,yBAC3D,CAAE,cAAA+F,CAAc,GAC/B,EACF,KACA,OAAC/F,EAAA,EAAI,CAAC,MAAM,YACV,mBAAC,KAAK,CAAC,QAAQ,0DAA0D,+BAAmB,EAC9F,GACF,CAUN,CAEA,SAAS4F,GAAc,CAAE,KAAA1D,CAAK,EAAyC,CACrE,MAAMgE,EAAehE,EAAK,MAEpB,CAAE,KAAM4D,EAAe,QAAAzC,CAAQ,KAAI,MAA0B,CACjE,IAAK6C,CACP,CAAC,EAEKC,KAAgB,WAAQ,KACpBL,GAAe,WAAaD,GAAkBC,EAAc,SAAS,IAAMI,EAClF,CAACJ,EAAeI,CAAY,CAAC,EAEhC,OAAI7C,KAGA,oBACE,oBAACrD,EAAA,EAAI,CAAC,OAAM,GAAC,oCAAwB,KACrC,QAACA,EAAA,EAAI,CAAC,MAAM,YAAY,uBAAWkG,CAAA,EAAa,GAClD,EAICJ,KAKH,oBACE,oBAAC,QAAM,SAAAK,CAAA,CAAc,KACrB,OAACnG,EAAA,EAAI,CAAC,MAAM,YAAa,SAAA8F,EAAc,MAAM,aAAe,aAAa,GAC3E,KAPO,OAACM,GAAA,EAAa,CASzB,CAEA,SAASA,IAAe,CACtB,SACE,oBACE,oBAAC,IAAQ,CAAC,MAAO,IAAK,KACtB,OAAC,IAAQ,CAAC,MAAO,IAAK,GACxB,CAEJ,CAEA,SAASV,GAAa,CAAE,SAAAW,CAAS,EAA6C,CAC5E,MAAMjG,KAAS,MAAWkG,EAAa,EACjCN,EAAaC,EAAcI,EAAS,OAAS,aAAeA,EAAS,MAAQ,MAAS,EAE5F,GAAIA,EAAS,OAAS,YACpB,SAAO,OAACE,EAAA,EAAI,CAAC,KAAK,KAAK,KAAK,WAAY,GAG1C,GAAIF,EAAS,OAAS,cAAgBL,GAAY,MAAM,MAAM,OAAO,MACnE,SAAO,OAAC,OAAI,UAAW5F,EAAO,KAAM,IAAK4F,EAAW,KAAK,KAAK,MAAM,MAAO,IAAI,EAAG,GAC7E,GAAIK,EAAS,OAAS,aAC3B,SAAO,OAACE,EAAA,EAAI,CAAC,KAAK,KAAK,KAAK,UAAW,EAI3C,CAEA,SAASD,IAAgB,CACvB,MAAO,CACL,QAAM,OAAI,CACR,QAAS,QACT,SAAO,MAAW,IAAI,EACtB,UAAQ,MAAW,IAAI,CACzB,CAAC,CACH,CACF,CAEA,SAASL,EAAcF,EAA2E,CAWhG,SAVmB,WAAQ,IAAM,CAC/B,GAAKA,EAIL,OACES,EAAA,EAAO,YAAYT,CAAa,GAAK,OAAO,OAAOS,EAAA,EAAO,WAAW,EAAE,KAAMC,GAAOA,EAAG,MAAQV,CAAa,CAEhH,EAAG,CAACA,CAAa,CAAC,CAGpB,CCzIO,SAASW,GAAWpF,EAA8C,CACvE,KAAM,CAAE,OAAAqF,EAAQ,MAAAC,CAAM,EAAItF,EAAM,IAAI,SAKpC,OAAIqF,IAAW,aACN,OAAC3G,EAAA,EAAI,CAAC,MAAM,YAAa,iBAAE,gDAAiD,kBAAkB,EAAE,EAC9F2G,IAAW,QACb,OAAC3G,EAAA,EAAI,CAAC,MAAM,UAAW,iBAAE,4CAA6C,mBAAmB,EAAE,EACzF2G,IAAW,WAElB,QAAC5G,EAAA,EAAK,CAAC,WAAW,SAChB,oBAACC,EAAA,EAAI,CAAC,MAAM,QAAS,iBAAE,0CAA2C,OAAO,EAAE,EAE1E4G,MAEC,OAAC5F,EAAA,GAAM,CAAC,KAAK,KAAK,QAAQ,YAAY,QAAS,IAAM,OAAO,MAAM4F,CAAK,EACpE,iBAAE,wDAAyD,SAAS,EACvE,GAEJ,KAIG,OAAC5G,EAAA,EAAI,CAAC,MAAM,YAAa,iBAAE,2CAA4C,SAAS,EAAE,CAC3F,CC1BO,SAAS6G,GAASvF,EAA8C,CACrE,KAAM,CAAE,KAAAwF,CAAK,EAAIxF,EAAM,IAAI,SAE3B,OAAQwF,EAAM,CACZ,IAAK,aACH,SAAO,KAAE,4CAA6C,aAAa,EACrE,IAAK,YACH,SAAO,KAAE,2CAA4C,WAAW,EAClE,IAAK,SACH,SAAO,KAAE,wCAAyC,QAAQ,EAC5D,QACE,SAAO,KAAE,yCAA0C,SAAS,CAChE,CACF,CCNA,MAAMC,GAAU,CACd,CAAE,GAAI,OAAQ,OAAQ,OAAQ,KAAMtB,EAAS,EAC7C,CAAE,GAAI,OAAQ,OAAQ,OAAQ,KAAMoB,EAAS,EAC7C,CAAE,GAAI,SAAU,OAAQ,SAAU,KAAMH,EAAW,CACrD,EAEO,SAASM,GAAe,CAAE,UAAAC,CAAU,EAAwB,CACjE,SAAO,OAACC,GAAA,EAAgB,CAAC,QAAAH,GAAkB,KAAME,EAAW,SAAWE,GAAMA,EAAE,MAAO,SAAU,GAAI,CACtG,C,gBCVO,SAASC,EAAQ9F,EAAqB,CAC3C,KAAM,CAAE,MAAA1B,EAAO,UAAAyH,EAAW,SAAA1H,CAAS,EAAI2B,EAEvC,SACE,QAAChB,EAAA,EAAG,CAAC,SAAU,GAAI,QAAQ,OAAO,UAAU,MAAM,IAAK,EAAG,WAAW,aAClE,UAAA+G,MAAa,OAAC/G,EAAA,EAAG,CAAE,SAAA+G,CAAA,CAAU,KAE9B,QAACtH,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SAAS,WAAW,aAC3C,oBAACC,EAAA,EAAI,CAAC,QAAQ,KAAK,QAAQ,KACxB,SAAAJ,CAAA,CACH,EAECD,CAAA,EACH,GACF,CAEJ,CCfO,SAAS2H,GAAiBhG,EAAyB,CACxD,KAAM,CAAE,SAAAiG,EAAU,UAAAtE,EAAW,QAAAuE,CAAQ,EAAIlG,EAEzC,SACE,QAAC8F,EAAA,CACC,SAAO,KAAE,wCAAyC,oBAAoB,EACtE,aAAW,OAACb,EAAA,EAAI,CAAC,KAAK,MAAM,KAAK,IAAK,GAEtC,oBAACvG,EAAA,EAAI,CAAC,QAAQ,IAAI,QAAQ,OAAO,MAAM,YACrC,mBAAC,KAAK,CAAC,QAAQ,8CAA8C,0RAI7D,EACF,KAEA,OAACA,EAAA,EAAI,CAAC,QAAQ,IAAI,QAAQ,OAAO,MAAM,YACrC,mBAAC,KAAK,CAAC,QAAQ,gDAAgD,6FAE/D,EACF,KAEA,OAACgB,EAAA,GAAM,CAAC,SAAAuG,EAAoB,QAAAC,EAAkB,KAAMvE,EAAY,UAAY,OAC1E,mBAAC,KAAK,CAAC,QAAQ,2CAA2C,0BAAc,EAC1E,GACF,CAEJ,CAEO,SAASwE,GAAoBnG,EAAyB,CAC3D,KAAM,CAAE,SAAAiG,EAAU,UAAAtE,EAAW,QAAAuE,CAAQ,EAAIlG,EAEzC,SACE,QAAC8F,EAAA,CACC,SAAO,KAAE,2CAA4C,gCAAgC,EACrF,aAAW,OAACM,GAAA,EAAO,CAAC,OAAM,GAAC,EAE3B,oBAAC1H,EAAA,EAAI,CAAC,QAAQ,IAAI,QAAQ,OAAO,MAAM,YACrC,mBAAC,KAAK,CAAC,QAAQ,iDAAiD,2KAGhE,EACF,KAEA,OAACA,EAAA,EAAI,CAAC,QAAQ,IAAI,QAAQ,OAAO,MAAM,YACrC,mBAAC,KAAK,CAAC,QAAQ,qDAAqD,sEAEpE,EACF,KAEA,OAACgB,EAAA,GAAM,CAAC,SAAAuG,EAAoB,QAAAC,EAAkB,KAAMvE,EAAY,UAAY,OAAW,QAAQ,YAC7F,mBAAC,KAAK,CAAC,QAAQ,2CAA2C,2BAAe,EAC3E,GACF,CAEJ,CC1BA,SAAS0E,IAAsB,CAC7B,MAAMC,KAAS,MAAuB,EAChCC,EAAkBD,EAAO,MAAM,UAAU,GAAG,EAAE,EAEpD,MAAO,CACL,GAAGA,EACH,KAAMC,CACR,CACF,CAEA,MAAMC,GAAqD,CACzD,eACA,WACA,YACA,qBACA,YACF,EAEMC,GAA2D,CAAC,eAAgB,UAAU,EAEtFC,EAA4D,CAAC,YAAa,qBAAsB,YAAY,EAE5GC,GAAuB,EAAI,IAEjC,SAASC,GAAqBC,EAAqB,CACjD,KAAM,CAACC,EAAYC,CAAa,KAAI,YAAS,EAAK,EAE5CC,KAAa,MAAwBH,EAAa,CAAE,IAAKA,CAAW,EAAI,IAAS,EACjFI,EAAWD,EAAW,MAAM,WAAW,GAAG,EAAE,EAE5CE,EAAuBL,GAAcI,GAAU,IAAM,CAAE,IAAKJ,EAAY,YAAaI,EAAS,GAAI,EAAI,KAEtGE,KAAiB,MAAoBD,EAAsB,CAC/D,gBAAiBJ,EAAaH,GAAuB,EACrD,uBAAwB,EAC1B,CAAC,EAED,sBAAU,IAAM,CACd,MAAMG,EAAaN,GAAqB,SAASW,EAAe,MAAM,MAAM,EAC5EJ,EAAcD,CAAU,CAC1B,EAAG,CAACK,GAAgB,MAAM,MAAM,CAAC,EAE1B,CACL,GAAGA,EAEH,MAAOH,EAAW,OAASG,EAAe,MAI1C,QAASH,EAAW,SAAWG,EAAe,QAC9C,UAAWH,EAAW,WAAaG,EAAe,UAClD,WAAYH,EAAW,YAAcG,EAAe,UACtD,CACF,CAEO,MAAM,GAAO,IAAM,CACxB,KAAM,CAACC,EAAqBC,CAAsB,KAAI,YAAS,EAAK,EAC9D9D,EAAU8C,GAAoB,EAC9B7C,EAAWoD,GAAqBrD,EAAQ,MAAM,GAAG,EACjD,CAAC+D,EAAuBC,CAAoB,KAAI,MAA0B,EAC1E,CAACC,EAAuBC,CAAoB,KAAI,MAA0B,EAC1E,CAACC,EAAuBC,CAAoB,KAAI,MAA0B,EAC1E,CAACC,EAAmBC,CAAgB,KAAI,MAAyB,EAEjEhB,EAAatD,EAAQ,MAAM,IAC3BuE,EAActE,EAAS,MAAM,IAC7BuE,EAAmBxE,EAAQ,UAC3B8B,EAAS7B,EAAS,MAAM,OAIxBC,EACJ8D,EAAqB,WACrBE,EAAqB,WACrBE,EAAqB,WACrBpE,EAAQ,WACRC,EAAS,WACTqE,EAAiB,UAEbjE,EAAoB,CAACJ,EAAS,WAAa,CAACA,EAAS,KACrDwE,EAAuBvB,GAA2B,SAASpB,CAAM,EACjEtB,GAAqBsB,IAAW,kBAAoBqB,EAA4B,SAASrB,CAAM,EAE/F4C,KAAmB,eAAY,SAAY,CAC3CpB,GACFe,EAAkB,CAAE,IAAKf,CAAW,CAAC,CAEzC,EAAG,CAACe,EAAmBf,CAAU,CAAC,EAE5BqB,KAAuB,eAAY,IAAM,CACzCrB,GACFS,EAAsB,CAAE,IAAKT,CAAW,CAAC,CAE7C,EAAG,CAACS,EAAuBT,CAAU,CAAC,EAEhCsB,MAAuB,eAAY,IAAM,CACzCtB,GAAciB,GAChBN,EAAsB,CAAE,IAAKX,EAAY,YAAAiB,CAAyB,CAAC,CAEvE,EAAG,CAACN,EAAuBX,EAAYiB,CAAW,CAAC,EAE7CM,MAAuB,eAAY,IAAM,CACzCvB,GAAciB,GAChBJ,EAAsB,CAAE,IAAKb,EAAY,YAAAiB,CAAyB,CAAC,CAEvE,EAAG,CAACJ,EAAuBb,EAAYiB,CAAW,CAAC,EAEnD,OAAIC,KAEK,OAAC,OAAI,sBAAU,EACZxE,EAAQ,QAKlB,oBACE,qBAAC9E,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAE5B,UAAA8I,EAAqB,YACpB,OAACpI,EAAA,GACC,SAAS,QACT,SAAO,KACL,qDACA,6CACF,EAEA,mBAAC,KAAK,CAAC,QAAQ,2DAA2D,wDAE1E,EACF,EAGD0I,EAAiB,YAChB,OAAC1I,EAAA,GACC,SAAS,QACT,SAAO,KAAE,kDAAmD,kCAAkC,EAE9F,mBAAC,KAAK,CAAC,QAAQ,wDAAwD,wDAEvE,EACF,EAGDoE,EAAQ,SACP,OAACD,GAAA,CACC,QAASC,EAAQ,KACjB,SAAUC,EAAS,KACnB,OAAAC,EACA,oBAAqBoE,EAAiB,UACtC,aAAcI,EACd,kBAAArE,EACA,uBAAwB2D,EAAqB,UAC7C,gBAAiBW,EACjB,mBAAAnE,GACA,wBAAyB0D,EAAqB,WAAaf,EAA4B,SAASrB,CAAM,EACtG,iBAAkB8C,EAAA,CACpB,GAGAvE,GAAqBoE,OACrB,QAAChJ,EAAA,EAAG,CAAC,QAAQ,OAAO,eAAe,SAAS,SAAU,GACnD,UAAA4E,MACC,OAACoC,GAAA,CACC,SAAUvC,EACV,UAAW8D,EAAqB,UAChC,QAASW,CAAA,CACX,EAGDF,MACC,OAAC7B,GAAA,CACC,SAAU1C,EACV,UAAWkE,EAAqB,UAChC,QAASS,EAAA,CACX,GAEJ,EAGD5E,EAAS,MAAM,SAAWA,EAAS,KAAK,QAAQ,OAAS,MACxD,OAACkC,GAAc,CAAC,UAAWlC,EAAS,KAAK,QAAS,GAEtD,KAEA,OAAC1B,GAAA,CACC,OAAQsF,EACR,UAAWS,EAAiB,UAC5B,QAASA,EAAiB,QAC1B,oBAAqBI,EACrB,UAAW,IAAMZ,EAAuB,EAAK,EAC/C,GACF,KAhFO,OAAClE,GAAU,EAAC,CAkFvB,EChOe,SAASkF,IAAiB,CACvC,MAAMC,EAAcpD,EAAA,EAAO,0BAC3B,SACE,QAACqD,EAAA,EAAI,CAAC,MAAM,mBACV,oBAACpJ,EAAA,GACC,SAAO,KAAE,wCAAyC,+CAA+C,EACjG,iBAAe,KAAE,8CAA+C,eAAe,EAC/E,SAAU,OACV,SACEmJ,EACI,IAAM,CACJ,OAAO,SAAS,KAAOA,CACzB,EACA,OAGN,mBAAC,KAAK,CAAC,QAAQ,0CAA0C,wFAEzD,EACF,EACCpD,EAAA,EAAO,0BAAyB,OAAC,GAAS,EAAC,KAAK,OAAC,GAAU,EAAC,GAC/D,CAEJ,C","sources":["webpack://grafana/./public/app/features/migrate-to-cloud/shared/InfoItem.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/EmptyState/InfoPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/EmptyState/MigrationStepsPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/TokenErrorAlert.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/CreateTokenModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/DeleteTokenConfirmationModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/TokenStatus.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/MigrationTokenPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/DisconnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/ConnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/CallToAction.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneLeft.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneRight.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/EmptyState.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationSummary.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/NameCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/StatusCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/TypeCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ResourcesTable.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/CTAInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/SnapshotCTAs.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/MigrateToCloud.tsx"],"sourcesContent":["import { ReactNode } from 'react';\n\nimport { Stack, Text, TextLink } from '@grafana/ui';\n\ninterface Props {\n  children: NonNullable<ReactNode>;\n  title: string;\n  linkTitle?: string;\n  linkHref?: string;\n}\n\nexport const InfoItem = ({ children, title, linkHref, linkTitle }: Props) => {\n  return (\n    <Stack gap={2} direction=\"column\">\n      <Text element=\"h4\">{title}</Text>\n      <Text color=\"secondary\">{children}</Text>\n      {linkHref && (\n        <TextLink href={linkHref} external>\n          {linkTitle ?? linkHref}\n        </TextLink>\n      )}\n    </Stack>\n  );\n};\n","import { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPane = () => {\n  return (\n    <InfoItem title={t('migrate-to-cloud.migrate-to-this-stack.title', 'Let us help you migrate to this stack')}>\n      <Trans i18nKey=\"migrate-to-cloud.migrate-to-this-stack.body\">\n        You can migrate some resources from your self-managed Grafana installation to this cloud stack. To do this\n        securely, you&apos;ll need to generate a migration token. Your self-managed instance will use the token to\n        authenticate with this cloud stack.\n      </Trans>\n    </InfoItem>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Box, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const MigrationStepsPane = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" direction=\"column\" gap={2}>\n      <InfoItem\n        title={t('migrate-to-cloud.get-started.title', 'Performing a migration')}\n        linkTitle={t('migrate-to-cloud.get-started.link-title', 'Learn more about Private Data Source Connect')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Stack direction=\"column\" gap={2}>\n          <Trans i18nKey=\"migrate-to-cloud.get-started.body\">\n            The migration process must be started from your self-managed Grafana instance.\n          </Trans>\n          <ol className={styles.list}>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-1\">\n                Log in to your self-managed instance and navigate to Administration, General, Migrate to Grafana Cloud.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-2\">\n                Select &quot;Migrate this instance to Cloud&quot;.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-3\">\n                You&apos;ll be prompted for a migration token. Generate one from this screen.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-4\">\n                In your self-managed instance, select &quot;Upload everything&quot; to upload data sources and\n                dashboards to this cloud stack.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-5\">\n                If some of your data sources will not work over the public internet, you’ll need to install Private Data\n                Source Connect in your self-managed environment.\n              </Trans>\n            </li>\n          </ol>\n        </Stack>\n      </InfoItem>\n      <TextLink href=\"/connections/private-data-source-connections\">\n        {t('migrate-to-cloud.get-started.configure-pdc-link', 'Configure PDC for this stack')}\n      </TextLink>\n      <TextLink href=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\">\n        {t('migrate-to-cloud.migrate-to-this-stack.link-title', 'View the full migration guide')}\n      </TextLink>\n    </Box>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  list: css({\n    padding: 'revert',\n  }),\n});\n","import { Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nexport function TokenErrorAlert() {\n  return (\n    <Alert severity=\"error\" title={t('migrate-to-cloud.migration-token.error-title', 'Something went wrong')}>\n      <Trans i18nKey=\"migrate-to-cloud.migration-token.error-body\">\n        Unable to generate a migration token. Please try again later.\n      </Trans>\n    </Alert>\n  );\n}\n","import { useId } from 'react';\n\nimport { Modal, Button, Input, Stack, ClipboardButton, Field } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\ninterface Props {\n  isOpen: boolean;\n  hideModal: () => void;\n  migrationToken?: string;\n}\n\nexport const CreateTokenModal = ({ isOpen, hideModal, migrationToken }: Props) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.migration-token.modal-title', 'Migration token created')}\n      onDismiss={hideModal}\n    >\n      {migrationToken ? <TokenSuccessContent migrationToken={migrationToken} /> : <TokenErrorAlert />}\n\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={hideModal}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-close\">Close</Trans>\n        </Button>\n\n        {migrationToken && (\n          <ClipboardButton variant=\"primary\" getText={() => migrationToken} onClipboardCopy={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-and-close\">Copy to clipboard and close</Trans>\n          </ClipboardButton>\n        )}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nfunction TokenSuccessContent({ migrationToken }: { migrationToken: string }) {\n  const inputId = useId();\n  return (\n    <Field\n      description={t(\n        'migrate-to-cloud.migration-token.modal-field-description',\n        'Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.'\n      )}\n      htmlFor={inputId}\n      label={t('migrate-to-cloud.migration-token.modal-field-label', 'Token')}\n    >\n      <Stack>\n        <Input id={inputId} value={migrationToken} readOnly />\n        <ClipboardButton icon=\"clipboard-alt\" getText={() => migrationToken}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-button\">Copy to clipboard</Trans>\n        </ClipboardButton>\n      </Stack>\n    </Field>\n  );\n}\n","import { Alert, ConfirmModal } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface DeleteTokenConfirmationModalProps {\n  isOpen: boolean;\n  hasError: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport function DeleteTokenConfirmationModal(props: DeleteTokenConfirmationModalProps) {\n  const { isOpen, hasError, onConfirm, onDismiss } = props;\n\n  const body = (\n    <>\n      <p>\n        <Trans i18nKey=\"migrate-to-cloud.delete-migration-token-confirm.body\">\n          If you&apos;ve already used this token with a self-managed installation, that installation will no longer be\n          able to upload content.\n        </Trans>\n      </p>\n\n      {hasError && (\n        <Alert\n          severity=\"error\"\n          title={t('migrate-to-cloud.delete-migration-token-confirm.error-title', 'Error deleting token')}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.delete-migration-token-confirm.title', 'Delete migration token')}\n      body={body}\n      confirmText={t('migrate-to-cloud.delete-migration-token-confirm.confirm-button', 'Delete token')}\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n}\n","import Skeleton from 'react-loading-skeleton';\n\nimport { Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface Props {\n  hasToken: boolean;\n  isFetching: boolean;\n  errorMessageId: string | undefined;\n}\n\nexport const TokenStatus = ({ hasToken, errorMessageId, isFetching }: Props) => {\n  if (isFetching) {\n    return <Skeleton width={100} />;\n  } else if (hasToken) {\n    return (\n      <Text color=\"success\">\n        <Trans i18nKey=\"migrate-to-cloud.token-status.active\">Token created and active</Trans>\n      </Text>\n    );\n  } else if (errorMessageId === 'cloudmigrations.tokenNotFound') {\n    return <Trans i18nKey=\"migrate-to-cloud.token-status.no-active\">No active token</Trans>;\n  } else if (errorMessageId) {\n    return (\n      <Text color=\"error\">\n        <Trans i18nKey=\"migrate-to-cloud.token-status.unknown-error\">Error retrieving token</Trans>\n      </Text>\n    );\n  }\n\n  return (\n    <Text color=\"warning\">\n      <Trans i18nKey=\"migrate-to-cloud.token-status.unknown\">Unknown</Trans>\n    </Text>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { isFetchError } from '@grafana/runtime';\nimport { Box, Button, Text } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport {\n  useCreateCloudMigrationTokenMutation,\n  useDeleteCloudMigrationTokenMutation,\n  useGetCloudMigrationTokenQuery,\n} from '../../api';\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\nimport { CreateTokenModal } from './CreateTokenModal';\nimport { DeleteTokenConfirmationModal } from './DeleteTokenConfirmationModal';\nimport { TokenStatus } from './TokenStatus';\n\n// TODO: candidate to hoist and share\nfunction maybeAPIError(err: unknown) {\n  if (!isFetchError<unknown>(err) || typeof err.data !== 'object' || !err.data) {\n    return null;\n  }\n\n  const data = err?.data;\n  const message = 'message' in data && typeof data.message === 'string' ? data.message : null;\n  const messageId = 'messageId' in data && typeof data.messageId === 'string' ? data.messageId : null;\n  const statusCode = 'statusCode' in data && typeof data.statusCode === 'number' ? data.statusCode : null;\n\n  if (!message || !messageId || !statusCode) {\n    return null;\n  }\n\n  return { message, messageId, statusCode };\n}\n\nexport const MigrationTokenPane = () => {\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const getTokenQuery = useGetCloudMigrationTokenQuery();\n  const [createTokenMutation, createTokenResponse] = useCreateCloudMigrationTokenMutation();\n  const [deleteTokenMutation, deleteTokenResponse] = useDeleteCloudMigrationTokenMutation();\n\n  const getTokenQueryError = maybeAPIError(getTokenQuery.error);\n\n  // GetCloudMigrationToken returns a 404 error if no token exists.\n  // When a token is deleted and the GetCloudMigrationToken query is refreshed, RTKQ will retain\n  // both the last successful data (\"we have a token!\") AND the new error. So we need to explicitly\n  // check that we don't have an error AND that we have a token.\n  const hasToken = Boolean(getTokenQuery.data?.id) && getTokenQueryError?.statusCode !== 404;\n  const isLoading = getTokenQuery.isFetching || createTokenResponse.isLoading;\n\n  const handleGenerateToken = useCallback(async () => {\n    const resp = await createTokenMutation();\n\n    if (!('error' in resp)) {\n      setShowCreateModal(true);\n    }\n  }, [createTokenMutation]);\n\n  const handleDeleteToken = useCallback(async () => {\n    if (!getTokenQuery.data?.id) {\n      return;\n    }\n\n    const resp = await deleteTokenMutation({ uid: getTokenQuery.data.id });\n    if (!('error' in resp)) {\n      setShowDeleteModal(false);\n    }\n  }, [deleteTokenMutation, getTokenQuery.data]);\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"flex-start\" direction=\"column\" gap={2}>\n        {createTokenResponse?.isError ? (\n          <TokenErrorAlert />\n        ) : (\n          <Text color=\"secondary\">\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.status\">\n              Current status:{' '}\n              <TokenStatus hasToken={hasToken} isFetching={isLoading} errorMessageId={getTokenQueryError?.messageId} />\n            </Trans>\n          </Text>\n        )}\n\n        {hasToken ? (\n          <Button onClick={() => setShowDeleteModal(true)} variant=\"destructive\">\n            {t('migrate-to-cloud.migration-token.delete-button', 'Delete token')}\n          </Button>\n        ) : (\n          <Button disabled={isLoading} onClick={handleGenerateToken}>\n            {createTokenResponse.isLoading\n              ? t('migrate-to-cloud.migration-token.generate-button-loading', 'Generating a migration token...')\n              : t('migrate-to-cloud.migration-token.generate-button', 'Generate a migration token')}\n          </Button>\n        )}\n      </Box>\n\n      <CreateTokenModal\n        isOpen={showCreateModal}\n        hideModal={() => setShowCreateModal(false)}\n        migrationToken={createTokenResponse.data?.token}\n      />\n\n      <DeleteTokenConfirmationModal\n        isOpen={showDeleteModal}\n        onConfirm={handleDeleteToken}\n        onDismiss={() => setShowDeleteModal(false)}\n        hasError={Boolean(deleteTokenResponse.error)}\n      />\n    </>\n  );\n};\n","import { Box, Stack } from '@grafana/ui';\n\nimport { InfoPane } from './EmptyState/InfoPane';\nimport { MigrationStepsPane } from './EmptyState/MigrationStepsPane';\nimport { MigrationTokenPane } from './MigrationTokenPane/MigrationTokenPane';\n\nexport const Page = () => {\n  return (\n    <Box backgroundColor=\"secondary\" display=\"flex\" alignItems=\"center\" direction=\"column\">\n      <Box maxWidth={90} paddingY={6} paddingX={2} gap={6} direction=\"column\" display=\"flex\">\n        <Stack gap={2} direction=\"column\">\n          <InfoPane />\n          <MigrationTokenPane />\n        </Stack>\n\n        <MigrationStepsPane />\n      </Box>\n    </Box>\n  );\n};\n","import { Alert, ConfirmModal, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface Props {\n  isOpen: boolean;\n  isError: boolean;\n  isLoading: boolean;\n  onDisconnectConfirm: () => Promise<void>;\n  onDismiss: () => void;\n}\n\nexport const DisconnectModal = ({ isOpen, isError, isLoading, onDisconnectConfirm, onDismiss }: Props) => {\n  const confirmBody = (\n    <Stack direction=\"column\">\n      {isError && (\n        <Alert\n          severity=\"error\"\n          title={t('migrate-to-cloud.disconnect-modal.error', 'There was an error disconnecting')}\n        />\n      )}\n      <div>\n        <Trans i18nKey=\"migrate-to-cloud.disconnect-modal.body\">\n          This will remove the migration token from this installation. If you wish to upload more resources in the\n          future, you will need to enter a new migration token.\n        </Trans>\n      </div>\n    </Stack>\n  );\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.disconnect-modal.title', 'Disconnect from cloud stack')}\n      body={<></>} // body is mandatory prop, but i don't wanna\n      description={confirmBody}\n      confirmText={\n        isLoading\n          ? t('migrate-to-cloud.disconnect-modal.disconnecting', 'Disconnecting...')\n          : t('migrate-to-cloud.disconnect-modal.disconnect', 'Disconnect')\n      }\n      dismissText={t('migrate-to-cloud.disconnect-modal.cancel', 'Cancel')}\n      onConfirm={onDisconnectConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { useId } from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, Stack, TextLink, Field, Input, Text, useStyles2, Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { CreateSessionApiArg } from '../../../api';\n\ninterface Props {\n  isOpen: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  hideModal: () => void;\n  onConfirm: (connectStackData: CreateSessionApiArg) => Promise<unknown>;\n}\n\ninterface FormData {\n  token: string;\n}\n\nexport const ConnectModal = ({ isOpen, isLoading, isError, hideModal, onConfirm }: Props) => {\n  const tokenId = useId();\n  const styles = useStyles2(getStyles);\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    watch,\n  } = useForm<FormData>({\n    defaultValues: {\n      token: '',\n    },\n  });\n\n  const token = watch('token');\n\n  const onConfirmConnect: SubmitHandler<FormData> = (formData) => {\n    onConfirm({\n      cloudMigrationSessionRequestDto: {\n        authToken: formData.token,\n      },\n    }).then((resp) => {\n      const didError = typeof resp === 'object' && resp && 'error' in resp;\n      if (!didError) {\n        hideModal();\n      }\n    });\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.connect-modal.title', 'Connect to a cloud stack')}\n      onDismiss={hideModal}\n    >\n      <form onSubmit={handleSubmit(onConfirmConnect)}>\n        <Text color=\"secondary\">\n          <Stack direction=\"column\" gap={2}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-get-started\">\n              To get started, you&apos;ll need a Grafana.com account.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-up/create-user?pg=prod-cloud\" external>\n                {t('migrate-to-cloud.connect-modal.body-sign-up', 'Sign up for a Grafana.com account')}\n              </TextLink>\n            </div>\n\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-cloud-stack\">\n              You&apos;ll also need a cloud stack. If you just signed up, we&apos;ll automatically create your first\n              stack. If you have an account, you&apos;ll need to select or create a stack.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-in/\" external>\n                {t('migrate-to-cloud.connect-modal.body-view-stacks', 'View my cloud stacks')}\n              </TextLink>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token\">\n                Your self-managed Grafana installation needs special access to securely migrate content. You&apos;ll\n                need to create a migration token on your chosen cloud stack.\n              </Trans>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token-instructions\">\n                Log into your cloud stack and navigate to Administration, General, Migrate to Grafana Cloud. Create a\n                migration token on that screen and paste the token here.\n              </Trans>\n            </div>\n\n            {isError && (\n              <Alert\n                severity=\"error\"\n                title={t('migrate-to-cloud.connect-modal.token-error-title', 'Error saving token')}\n              >\n                <Trans i18nKey=\"migrate-to-cloud.connect-modal.token-error-description\">\n                  There was an error saving the token. See the Grafana server logs for more details.\n                </Trans>\n              </Alert>\n            )}\n\n            <Field\n              className={styles.field}\n              invalid={!!errors.token}\n              error={errors.token?.message}\n              label={t('migrate-to-cloud.connect-modal.body-token-field', 'Migration token')}\n              required\n            >\n              <Input\n                {...register('token', {\n                  required: t('migrate-to-cloud.connect-modal.token-required-error', 'Migration token is required'),\n                })}\n                id={tokenId}\n                placeholder={t('migrate-to-cloud.connect-modal.body-token-field-placeholder', 'Paste token here')}\n              />\n            </Field>\n          </Stack>\n        </Text>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.cancel\">Cancel</Trans>\n          </Button>\n          <Button type=\"submit\" disabled={isLoading || !token}>\n            {isLoading\n              ? t('migrate-to-cloud.connect-modal.connecting', 'Connecting to this stack...')\n              : t('migrate-to-cloud.connect-modal.connect', 'Connect to this stack')}\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css({\n    alignSelf: 'stretch',\n  }),\n});\n","import { useState } from 'react';\n\nimport { Box, Button, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useCreateSessionMutation } from '../../../api';\n\nimport { ConnectModal } from './ConnectModal';\n\nexport const CallToAction = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [createMigration, createMigrationResponse] = useCreateSessionMutation();\n\n  return (\n    <>\n      <Box display=\"flex\" gap={2} direction=\"column\" alignItems=\"center\" backgroundColor=\"secondary\">\n        <Text variant=\"h3\" textAlignment=\"center\">\n          <Trans i18nKey=\"migrate-to-cloud.cta.header\">Let us manage your Grafana stack</Trans>\n        </Text>\n\n        <Button disabled={createMigrationResponse.isLoading} onClick={() => setModalOpen(true)}>\n          <Trans i18nKey=\"migrate-to-cloud.cta.button\">Migrate this instance to Cloud</Trans>\n        </Button>\n      </Box>\n\n      <ConnectModal\n        isOpen={modalOpen}\n        isLoading={createMigrationResponse.isLoading}\n        isError={createMigrationResponse.isError}\n        onConfirm={createMigration}\n        hideModal={() => setModalOpen(false)}\n      />\n    </>\n  );\n};\n","import { Stack } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneLeft = () => {\n  return (\n    <Stack gap={4} direction=\"column\">\n      <InfoItem\n        title={t('migrate-to-cloud.what-is-cloud.title', 'What is Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.what-is-cloud.link-title', 'Learn about cloud features')}\n        linkHref=\"https://grafana.com/products/cloud\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.what-is-cloud.body\">\n          Grafana cloud is a fully managed cloud-hosted observability platform ideal for cloud native environments.\n          It&apos;s everything you love about Grafana without the overhead of maintaining, upgrading, and supporting an\n          installation.\n        </Trans>\n      </InfoItem>\n\n      <InfoItem\n        title={t('migrate-to-cloud.why-host.title', 'Why host with Grafana?')}\n        linkTitle={t('migrate-to-cloud.why-host.link-title', 'More questions? Talk to an expert')}\n        linkHref=\"https://grafana.com/contact\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.why-host.body\">\n          In addition to the convenience of managed hosting, Grafana Cloud includes many cloud-exclusive features like\n          SLOs, incident management, machine learning, and powerful observability integrations.\n        </Trans>\n      </InfoItem>\n\n      <InfoItem\n        title={t('migrate-to-cloud.is-it-secure.title', 'Is it secure?')}\n        linkTitle={t('migrate-to-cloud.is-it-secure.link-title', 'Grafana Labs Trust Center')}\n        linkHref=\"https://trust.grafana.com\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.is-it-secure.body\">\n          Grafana Labs is committed to maintaining the highest standards of data privacy and security. By implementing\n          industry-standard security technologies and procedures, we help protect our customers&apos; data from\n          unauthorized access, use, or disclosure.\n        </Trans>\n      </InfoItem>\n    </Stack>\n  );\n};\n","import { Stack } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneRight = () => {\n  return (\n    <Stack gap={4} direction=\"column\">\n      <InfoItem\n        title={t('migrate-to-cloud.pdc.title', 'Not all my data sources are on the public internet')}\n        linkTitle={t('migrate-to-cloud.pdc.link-title', 'Learn about PDC')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pdc.body\">\n          Exposing your data sources to the internet can raise security concerns. Private data source connect (PDC)\n          allows Grafana Cloud to access your existing data sources over a secure network tunnel.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.pricing.title', 'How much does it cost?')}\n        linkTitle={t('migrate-to-cloud.pricing.link-title', 'Grafana Cloud pricing')}\n        linkHref=\"https://grafana.com/pricing\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pricing.body\">\n          Grafana Cloud has a generous free plan and a 14 day unlimited usage trial. After your trial expires,\n          you&apos;ll be billed based on usage over the free plan limits.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.can-i-move.title', 'Can I move this installation to Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.can-i-move.link-title', 'Learn about migrating other settings')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.can-i-move.body\">\n          Once you connect this installation to a cloud stack, you&apos;ll be able to upload data sources and\n          dashboards.\n        </Trans>\n      </InfoItem>\n    </Stack>\n  );\n};\n","import { Box, Grid, Stack } from '@grafana/ui';\n\nimport { CallToAction } from './CallToAction/CallToAction';\nimport { InfoPaneLeft } from './InfoPaneLeft';\nimport { InfoPaneRight } from './InfoPaneRight';\n\nexport const EmptyState = () => {\n  return (\n    <Box backgroundColor=\"secondary\" display=\"flex\" alignItems=\"center\" direction=\"column\">\n      <Box maxWidth={180} paddingY={6} paddingX={2}>\n        <Stack gap={5} direction=\"column\">\n          <CallToAction />\n\n          <Grid\n            alignItems=\"flex-start\"\n            gap={4}\n            columns={{\n              xs: 1,\n              lg: 2,\n            }}\n          >\n            <InfoPaneLeft />\n            <InfoPaneRight />\n          </Grid>\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { ReactNode } from 'react';\n\nimport { Box, Text } from '@grafana/ui';\n\ninterface MigrationInfoProps {\n  title: NonNullable<ReactNode>;\n  children: NonNullable<ReactNode>;\n}\n\nexport function MigrationInfo({ title, children }: MigrationInfoProps) {\n  return (\n    <Box minWidth={{ xs: 0, xxl: 16 }} display=\"flex\" direction=\"column\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {title}\n      </Text>\n      <Text variant=\"h4\">{children}</Text>\n    </Box>\n  );\n}\n","import { Box, Button, Space, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { GetSessionApiResponse, GetSnapshotResponseDto } from '../api';\n\nimport { MigrationInfo } from './MigrationInfo';\n\ninterface MigrationSummaryProps {\n  snapshot: GetSnapshotResponseDto | undefined;\n  session: GetSessionApiResponse;\n  isBusy: boolean;\n\n  disconnectIsLoading: boolean;\n  onDisconnect: () => void;\n\n  showBuildSnapshot: boolean;\n  buildSnapshotIsLoading: boolean;\n  onBuildSnapshot: () => void;\n\n  showUploadSnapshot: boolean;\n  uploadSnapshotIsLoading: boolean;\n  onUploadSnapshot: () => void;\n}\n\nexport function MigrationSummary(props: MigrationSummaryProps) {\n  const {\n    session,\n    snapshot,\n    isBusy,\n    disconnectIsLoading,\n    onDisconnect,\n    showBuildSnapshot,\n    buildSnapshotIsLoading,\n    onBuildSnapshot,\n\n    showUploadSnapshot,\n    uploadSnapshotIsLoading,\n    onUploadSnapshot,\n  } = props;\n\n  const totalCount = 0;\n  const errorCount = 0;\n  const successCount = 0;\n\n  return (\n    <Box\n      borderColor=\"weak\"\n      borderStyle=\"solid\"\n      padding={2}\n      display=\"flex\"\n      gap={4}\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Stack gap={4} wrap=\"wrap\">\n        <MigrationInfo title={t('migrate-to-cloud.summary.snapshot-date', 'Snapshot timestamp')}>\n          {snapshot?.created ? (\n            snapshot?.created\n          ) : (\n            <Text color=\"secondary\">\n              <Trans i18nKey=\"migrate-to-cloud.summary.snapshot-not-created\">Not yet created</Trans>\n            </Text>\n          )}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.total-resource-count', 'Total resources')}>\n          {totalCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.errored-resource-count', 'Errors')}>\n          {errorCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.successful-resource-count', 'Successfully migrated')}>\n          {successCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.target-stack-title', 'Uploading to')}>\n          {session.slug}\n          <Space h={1} layout=\"inline\" />\n          <Button\n            disabled={isBusy}\n            onClick={onDisconnect}\n            variant=\"secondary\"\n            size=\"sm\"\n            icon={disconnectIsLoading ? 'spinner' : undefined}\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.disconnect\">Disconnect</Trans>\n          </Button>\n        </MigrationInfo>\n      </Stack>\n\n      {showBuildSnapshot && (\n        <Button disabled={isBusy} onClick={onBuildSnapshot} icon={buildSnapshotIsLoading ? 'spinner' : undefined}>\n          <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Build snapshot</Trans>\n        </Button>\n      )}\n\n      {showUploadSnapshot && (\n        <Button\n          disabled={isBusy || uploadSnapshotIsLoading}\n          onClick={onUploadSnapshot}\n          icon={uploadSnapshotIsLoading ? 'spinner' : undefined}\n        >\n          <Trans i18nKey=\"migrate-to-cloud.summary.upload-migration\">Upload snapshot</Trans>\n        </Button>\n      )}\n    </Box>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CellProps, Stack, Text, Icon, useStyles2 } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useGetDashboardByUidQuery, MigrateDataResponseItemDto } from '../api';\n\nexport function NameCell(props: CellProps<MigrateDataResponseItemDto>) {\n  const data = props.row.original;\n\n  return (\n    <Stack direction=\"row\" gap={2} alignItems=\"center\">\n      <ResourceIcon resource={data} />\n\n      <Stack direction=\"column\" gap={0}>\n        {data.type === 'DATASOURCE' ? <DatasourceInfo data={data} /> : <DashboardInfo data={data} />}\n      </Stack>\n    </Stack>\n  );\n}\n\nfunction getDashboardTitle(dashboardData: object) {\n  if ('title' in dashboardData && typeof dashboardData.title === 'string') {\n    return dashboardData.title;\n  }\n\n  return undefined;\n}\n\nfunction DatasourceInfo({ data }: { data: MigrateDataResponseItemDto }) {\n  const datasourceUID = data.refId;\n  const datasource = useDatasource(datasourceUID);\n\n  if (!datasource) {\n    return (\n      <>\n        <Text>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-title\">\n            Data source {{ datasourceUID }}\n          </Trans>\n        </Text>\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-type\">Unknown data source</Trans>\n        </Text>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <span>{datasource.name}</span>\n      <Text color=\"secondary\">{datasource.type}</Text>\n    </>\n  );\n}\n\nfunction DashboardInfo({ data }: { data: MigrateDataResponseItemDto }) {\n  const dashboardUID = data.refId;\n  // TODO: really, the API should return this directly\n  const { data: dashboardData, isError } = useGetDashboardByUidQuery({\n    uid: dashboardUID,\n  });\n\n  const dashboardName = useMemo(() => {\n    return (dashboardData?.dashboard && getDashboardTitle(dashboardData.dashboard)) ?? dashboardUID;\n  }, [dashboardData, dashboardUID]);\n\n  if (isError) {\n    // Not translated because this is only temporary until the data comes through in the MigrationRun API\n    return (\n      <>\n        <Text italic>Unable to load dashboard</Text>\n        <Text color=\"secondary\">Dashboard {dashboardUID}</Text>\n      </>\n    );\n  }\n\n  if (!dashboardData) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{dashboardName}</span>\n      <Text color=\"secondary\">{dashboardData.meta?.folderTitle ?? 'Dashboards'}</Text>\n    </>\n  );\n}\n\nfunction InfoSkeleton() {\n  return (\n    <>\n      <Skeleton width={250} />\n      <Skeleton width={130} />\n    </>\n  );\n}\n\nfunction ResourceIcon({ resource }: { resource: MigrateDataResponseItemDto }) {\n  const styles = useStyles2(getIconStyles);\n  const datasource = useDatasource(resource.type === 'DATASOURCE' ? resource.refId : undefined);\n\n  if (resource.type === 'DASHBOARD') {\n    return <Icon size=\"xl\" name=\"dashboard\" />;\n  }\n\n  if (resource.type === 'DATASOURCE' && datasource?.meta?.info?.logos?.small) {\n    return <img className={styles.icon} src={datasource.meta.info.logos.small} alt=\"\" />;\n  } else if (resource.type === 'DATASOURCE') {\n    return <Icon size=\"xl\" name=\"database\" />;\n  }\n\n  return undefined;\n}\n\nfunction getIconStyles() {\n  return {\n    icon: css({\n      display: 'block',\n      width: getSvgSize('xl'),\n      height: getSvgSize('xl'),\n    }),\n  };\n}\n\nfunction useDatasource(datasourceUID: string | undefined): DataSourceInstanceSettings | undefined {\n  const datasource = useMemo(() => {\n    if (!datasourceUID) {\n      return undefined;\n    }\n\n    return (\n      config.datasources[datasourceUID] || Object.values(config.datasources).find((ds) => ds.uid === datasourceUID)\n    );\n  }, [datasourceUID]);\n\n  return datasource;\n}\n","import { CellProps, Text, Stack, Button } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nexport function StatusCell(props: CellProps<MigrateDataResponseItemDto>) {\n  const { status, error } = props.row.original;\n\n  // Keep these here to preserve the translations\n  // t('migrate-to-cloud.resource-status.migrating', 'Uploading...')\n\n  if (status === 'PENDING') {\n    return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.not-migrated', 'Not yet uploaded')}</Text>;\n  } else if (status === 'OK') {\n    return <Text color=\"success\">{t('migrate-to-cloud.resource-status.migrated', 'Uploaded to cloud')}</Text>;\n  } else if (status === 'ERROR') {\n    return (\n      <Stack alignItems=\"center\">\n        <Text color=\"error\">{t('migrate-to-cloud.resource-status.failed', 'Error')}</Text>\n\n        {error && (\n          // TODO: trigger a proper modal, probably from the parent, on click\n          <Button size=\"sm\" variant=\"secondary\" onClick={() => window.alert(error)}>\n            {t('migrate-to-cloud.resource-status.error-details-button', 'Details')}\n          </Button>\n        )}\n      </Stack>\n    );\n  }\n\n  return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.unknown', 'Unknown')}</Text>;\n}\n","import { CellProps } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nexport function TypeCell(props: CellProps<MigrateDataResponseItemDto>) {\n  const { type } = props.row.original;\n\n  switch (type) {\n    case 'DATASOURCE':\n      return t('migrate-to-cloud.resource-type.datasource', 'Data source');\n    case 'DASHBOARD':\n      return t('migrate-to-cloud.resource-type.dashboard', 'Dashboard');\n    case 'FOLDER':\n      return t('migrate-to-cloud.resource-type.folder', 'Folder');\n    default:\n      return t('migrate-to-cloud.resource-type.unknown', 'Unknown');\n  }\n}\n","import { InteractiveTable } from '@grafana/ui';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nimport { NameCell } from './NameCell';\nimport { StatusCell } from './StatusCell';\nimport { TypeCell } from './TypeCell';\n\ninterface ResourcesTableProps {\n  resources: MigrateDataResponseItemDto[];\n}\n\nconst columns = [\n  { id: 'name', header: 'Name', cell: NameCell },\n  { id: 'type', header: 'Type', cell: TypeCell },\n  { id: 'status', header: 'Status', cell: StatusCell },\n];\n\nexport function ResourcesTable({ resources }: ResourcesTableProps) {\n  return <InteractiveTable columns={columns} data={resources} getRowId={(r) => r.refId} pageSize={15} />;\n}\n","import { ReactNode } from 'react';\n\nimport { Stack, Box, Text } from '@grafana/ui';\n\ninterface CTAInfoProps {\n  title: NonNullable<ReactNode>;\n  accessory?: ReactNode;\n  children: ReactNode;\n}\n\nexport function CTAInfo(props: CTAInfoProps) {\n  const { title, accessory, children } = props;\n\n  return (\n    <Box maxWidth={44} display=\"flex\" direction=\"row\" gap={1} alignItems=\"flex-start\">\n      {accessory && <Box>{accessory}</Box>}\n\n      <Stack gap={2} direction=\"column\" alignItems=\"flex-start\">\n        <Text element=\"h3\" variant=\"h5\">\n          {title}\n        </Text>\n\n        {children}\n      </Stack>\n    </Box>\n  );\n}\n","import { Button, Icon, Spinner, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { CTAInfo } from './CTAInfo';\n\ninterface SnapshotCTAProps {\n  disabled: boolean;\n  isLoading: boolean;\n  onClick: () => void;\n}\n\nexport function BuildSnapshotCTA(props: SnapshotCTAProps) {\n  const { disabled, isLoading, onClick } = props;\n\n  return (\n    <CTAInfo\n      title={t('migrate-to-cloud.build-snapshot.title', 'No snapshot exists')}\n      accessory={<Icon name=\"cog\" size=\"lg\" />}\n    >\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.build-snapshot.description\">\n          This tool can migrate some resources from this installation to your cloud stack. To get started, you&apos;ll\n          need to create a snapshot of this installation. Creating a snapshot typically takes less than two minutes. The\n          snapshot is stored alongside this Grafana installation.\n        </Trans>\n      </Text>\n\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.build-snapshot.when-complete\">\n          Once the snapshot is complete, you will be able to upload it to your cloud stack.\n        </Trans>\n      </Text>\n\n      <Button disabled={disabled} onClick={onClick} icon={isLoading ? 'spinner' : undefined}>\n        <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Build snapshot</Trans>\n      </Button>\n    </CTAInfo>\n  );\n}\n\nexport function CreatingSnapshotCTA(props: SnapshotCTAProps) {\n  const { disabled, isLoading, onClick } = props;\n\n  return (\n    <CTAInfo\n      title={t('migrate-to-cloud.building-snapshot.title', 'Building installation snapshot')}\n      accessory={<Spinner inline />}\n    >\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.building-snapshot.description\">\n          We&apos;re creating a point-in-time snapshot of the current state of this installation. Once the snapshot is\n          complete. you&apos;ll be able to upload it to Grafana Cloud.\n        </Trans>\n      </Text>\n\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.building-snapshot.description-eta\">\n          Creating a snapshot typically takes less than two minutes.\n        </Trans>\n      </Text>\n\n      <Button disabled={disabled} onClick={onClick} icon={isLoading ? 'spinner' : undefined} variant=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.summary.cancel-snapshot\">Cancel snapshot</Trans>\n      </Button>\n    </CTAInfo>\n  );\n}\n","import { skipToken } from '@reduxjs/toolkit/query/react';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { Alert, Box, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport {\n  SnapshotDto,\n  useCancelSnapshotMutation,\n  useCreateSnapshotMutation,\n  useDeleteSessionMutation,\n  useGetSessionListQuery,\n  useGetShapshotListQuery,\n  useGetSnapshotQuery,\n  useUploadSnapshotMutation,\n} from '../api';\n\nimport { DisconnectModal } from './DisconnectModal';\nimport { EmptyState } from './EmptyState/EmptyState';\nimport { MigrationSummary } from './MigrationSummary';\nimport { ResourcesTable } from './ResourcesTable';\nimport { BuildSnapshotCTA, CreatingSnapshotCTA } from './SnapshotCTAs';\n\n/**\n * Here's how migrations work:\n *\n * A single on-prem instance can be configured to be migrated to multiple cloud instances. We call these 'sessions'.\n *  - GetSessionList returns this the list of migration targets for the on prem instance\n *  - If GetMigrationList returns an empty list, then an empty state to prompt for token should be shown\n *  - The UI (at the moment) only shows the most recently created migration target (the last one returned from the API)\n *    and doesn't allow for others to be created\n *\n * A single on-prem migration 'target' (CloudMigrationSession) can have multiple snapshots.\n * A snapshot represents a copy of all migratable resources at a fixed point in time.\n * A snapshots are created asynchronously in the background, so GetSnapshot must be polled to get the current status.\n *\n * After a snapshot has been created, it will be PENDING_UPLOAD. UploadSnapshot is then called which asynchronously\n * uploads and migrates the snapshot to the cloud instance.\n */\n\nfunction useGetLatestSession() {\n  const result = useGetSessionListQuery();\n  const latestMigration = result.data?.sessions?.at(-1);\n\n  return {\n    ...result,\n    data: latestMigration,\n  };\n}\n\nconst SHOULD_POLL_STATUSES: Array<SnapshotDto['status']> = [\n  'INITIALIZING',\n  'CREATING',\n  'UPLOADING',\n  'PENDING_PROCESSING',\n  'PROCESSING',\n];\n\nconst SNAPSHOT_BUILDING_STATUSES: Array<SnapshotDto['status']> = ['INITIALIZING', 'CREATING'];\n\nconst SNAPSHOT_UPLOADING_STATUSES: Array<SnapshotDto['status']> = ['UPLOADING', 'PENDING_PROCESSING', 'PROCESSING'];\n\nconst STATUS_POLL_INTERVAL = 5 * 1000;\n\nfunction useGetLatestSnapshot(sessionUid?: string) {\n  const [shouldPoll, setShouldPoll] = useState(false);\n\n  const listResult = useGetShapshotListQuery(sessionUid ? { uid: sessionUid } : skipToken);\n  const lastItem = listResult.data?.snapshots?.at(-1); // TODO: account for pagination and ensure we're truely getting the last one\n\n  const getSnapshotQueryArgs = sessionUid && lastItem?.uid ? { uid: sessionUid, snapshotUid: lastItem.uid } : skipToken;\n\n  const snapshotResult = useGetSnapshotQuery(getSnapshotQueryArgs, {\n    pollingInterval: shouldPoll ? STATUS_POLL_INTERVAL : 0,\n    skipPollingIfUnfocused: true,\n  });\n\n  useEffect(() => {\n    const shouldPoll = SHOULD_POLL_STATUSES.includes(snapshotResult.data?.status);\n    setShouldPoll(shouldPoll);\n  }, [snapshotResult?.data?.status]);\n\n  return {\n    ...snapshotResult,\n\n    error: listResult.error || snapshotResult.error,\n\n    // isSuccess and isUninitialised should always be from snapshotResult\n    // as only the 'final' values from those are important\n    isError: listResult.isError || snapshotResult.isError,\n    isLoading: listResult.isLoading || snapshotResult.isLoading,\n    isFetching: listResult.isFetching || snapshotResult.isFetching,\n  };\n}\n\nexport const Page = () => {\n  const [disconnectModalOpen, setDisconnectModalOpen] = useState(false);\n  const session = useGetLatestSession();\n  const snapshot = useGetLatestSnapshot(session.data?.uid);\n  const [performCreateSnapshot, createSnapshotResult] = useCreateSnapshotMutation();\n  const [performUploadSnapshot, uploadSnapshotResult] = useUploadSnapshotMutation();\n  const [performCancelSnapshot, cancelSnapshotResult] = useCancelSnapshotMutation();\n  const [performDisconnect, disconnectResult] = useDeleteSessionMutation();\n\n  const sessionUid = session.data?.uid;\n  const snapshotUid = snapshot.data?.uid;\n  const isInitialLoading = session.isLoading;\n  const status = snapshot.data?.status;\n\n  // isBusy is not a loading state, but indicates that the system is doing *something*\n  // and all buttons should be disabled\n  const isBusy =\n    createSnapshotResult.isLoading ||\n    uploadSnapshotResult.isLoading ||\n    cancelSnapshotResult.isLoading ||\n    session.isLoading ||\n    snapshot.isLoading ||\n    disconnectResult.isLoading;\n\n  const showBuildSnapshot = !snapshot.isLoading && !snapshot.data;\n  const showBuildingSnapshot = SNAPSHOT_BUILDING_STATUSES.includes(status);\n  const showUploadSnapshot = status === 'PENDING_UPLOAD' || SNAPSHOT_UPLOADING_STATUSES.includes(status);\n\n  const handleDisconnect = useCallback(async () => {\n    if (sessionUid) {\n      performDisconnect({ uid: sessionUid });\n    }\n  }, [performDisconnect, sessionUid]);\n\n  const handleCreateSnapshot = useCallback(() => {\n    if (sessionUid) {\n      performCreateSnapshot({ uid: sessionUid });\n    }\n  }, [performCreateSnapshot, sessionUid]);\n\n  const handleUploadSnapshot = useCallback(() => {\n    if (sessionUid && snapshotUid) {\n      performUploadSnapshot({ uid: sessionUid, snapshotUid: snapshotUid });\n    }\n  }, [performUploadSnapshot, sessionUid, snapshotUid]);\n\n  const handleCancelSnapshot = useCallback(() => {\n    if (sessionUid && snapshotUid) {\n      performCancelSnapshot({ uid: sessionUid, snapshotUid: snapshotUid });\n    }\n  }, [performCancelSnapshot, sessionUid, snapshotUid]);\n\n  if (isInitialLoading) {\n    // TODO: better loading state\n    return <div>Loading...</div>;\n  } else if (!session.data) {\n    return <EmptyState />;\n  }\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={4}>\n        {/* TODO: show errors from all mutation's in a... modal? */}\n        {createSnapshotResult.isError && (\n          <Alert\n            severity=\"error\"\n            title={t(\n              'migrate-to-cloud.summary.run-migration-error-title',\n              'There was an error migrating your resources'\n            )}\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.run-migration-error-description\">\n              See the Grafana server logs for more details\n            </Trans>\n          </Alert>\n        )}\n\n        {disconnectResult.isError && (\n          <Alert\n            severity=\"error\"\n            title={t('migrate-to-cloud.summary.disconnect-error-title', 'There was an error disconnecting')}\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.disconnect-error-description\">\n              See the Grafana server logs for more details\n            </Trans>\n          </Alert>\n        )}\n\n        {session.data && (\n          <MigrationSummary\n            session={session.data}\n            snapshot={snapshot.data}\n            isBusy={isBusy}\n            disconnectIsLoading={disconnectResult.isLoading}\n            onDisconnect={handleDisconnect}\n            showBuildSnapshot={showBuildSnapshot}\n            buildSnapshotIsLoading={createSnapshotResult.isLoading}\n            onBuildSnapshot={handleCreateSnapshot}\n            showUploadSnapshot={showUploadSnapshot}\n            uploadSnapshotIsLoading={uploadSnapshotResult.isLoading || SNAPSHOT_UPLOADING_STATUSES.includes(status)}\n            onUploadSnapshot={handleUploadSnapshot}\n          />\n        )}\n\n        {(showBuildSnapshot || showBuildingSnapshot) && (\n          <Box display=\"flex\" justifyContent=\"center\" paddingY={10}>\n            {showBuildSnapshot && (\n              <BuildSnapshotCTA\n                disabled={isBusy}\n                isLoading={createSnapshotResult.isLoading}\n                onClick={handleCreateSnapshot}\n              />\n            )}\n\n            {showBuildingSnapshot && (\n              <CreatingSnapshotCTA\n                disabled={isBusy}\n                isLoading={cancelSnapshotResult.isLoading}\n                onClick={handleCancelSnapshot}\n              />\n            )}\n          </Box>\n        )}\n\n        {snapshot.data?.results && snapshot.data.results.length > 0 && (\n          <ResourcesTable resources={snapshot.data.results} />\n        )}\n      </Stack>\n\n      <DisconnectModal\n        isOpen={disconnectModalOpen}\n        isLoading={disconnectResult.isLoading}\n        isError={disconnectResult.isError}\n        onDisconnectConfirm={handleDisconnect}\n        onDismiss={() => setDisconnectModalOpen(false)}\n      />\n    </>\n  );\n};\n","import { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { Trans, t } from '../../core/internationalization';\n\nimport { Page as CloudPage } from './cloud/Page';\nimport { Page as OnPremPage } from './onprem/Page';\n\nexport default function MigrateToCloud() {\n  const feedbackURL = config.cloudMigrationFeedbackURL;\n  return (\n    <Page navId=\"migrate-to-cloud\">\n      <Alert\n        title={t('migrate-to-cloud.public-preview.title', 'Migrate to Grafana Cloud is in public preview')}\n        buttonContent={t('migrate-to-cloud.public-preview.button-text', 'Give feedback')}\n        severity={'info'}\n        onRemove={\n          feedbackURL\n            ? () => {\n                window.location.href = feedbackURL;\n              }\n            : undefined\n        }\n      >\n        <Trans i18nKey=\"migrate-to-cloud.public-preview.message\">\n          Help us improve this feature by providing feedback and reporting any issues.\n        </Trans>\n      </Alert>\n      {config.cloudMigrationIsTarget ? <CloudPage /> : <OnPremPage />}\n    </Page>\n  );\n}\n"],"names":["InfoItem","children","title","linkHref","linkTitle","Stack","Text","TextLink","InfoPane","MigrationStepsPane","styles","getStyles","Box","theme","TokenErrorAlert","Alert","CreateTokenModal","isOpen","hideModal","migrationToken","Modal","TokenSuccessContent","Button","ClipboardButton","inputId","Field","Input","DeleteTokenConfirmationModal","props","hasError","onConfirm","onDismiss","body","ConfirmModal","TokenStatus","hasToken","errorMessageId","isFetching","maybeAPIError","err","data","message","messageId","statusCode","MigrationTokenPane","showCreateModal","setShowCreateModal","showDeleteModal","setShowDeleteModal","getTokenQuery","createTokenMutation","createTokenResponse","deleteTokenMutation","deleteTokenResponse","getTokenQueryError","isLoading","handleGenerateToken","handleDeleteToken","DisconnectModal","isError","onDisconnectConfirm","confirmBody","ConnectModal","tokenId","handleSubmit","register","errors","watch","token","onConfirmConnect","formData","resp","CallToAction","modalOpen","setModalOpen","createMigration","createMigrationResponse","InfoPaneLeft","InfoPaneRight","EmptyState","Grid","MigrationInfo","MigrationSummary","session","snapshot","isBusy","disconnectIsLoading","onDisconnect","showBuildSnapshot","buildSnapshotIsLoading","onBuildSnapshot","showUploadSnapshot","uploadSnapshotIsLoading","onUploadSnapshot","Space","NameCell","ResourceIcon","DatasourceInfo","DashboardInfo","getDashboardTitle","dashboardData","datasourceUID","datasource","useDatasource","dashboardUID","dashboardName","InfoSkeleton","resource","getIconStyles","Icon","config","ds","StatusCell","status","error","TypeCell","type","columns","ResourcesTable","resources","InteractiveTable","r","CTAInfo","accessory","BuildSnapshotCTA","disabled","onClick","CreatingSnapshotCTA","Spinner","useGetLatestSession","result","latestMigration","SHOULD_POLL_STATUSES","SNAPSHOT_BUILDING_STATUSES","SNAPSHOT_UPLOADING_STATUSES","STATUS_POLL_INTERVAL","useGetLatestSnapshot","sessionUid","shouldPoll","setShouldPoll","listResult","lastItem","getSnapshotQueryArgs","snapshotResult","disconnectModalOpen","setDisconnectModalOpen","performCreateSnapshot","createSnapshotResult","performUploadSnapshot","uploadSnapshotResult","performCancelSnapshot","cancelSnapshotResult","performDisconnect","disconnectResult","snapshotUid","isInitialLoading","showBuildingSnapshot","handleDisconnect","handleCreateSnapshot","handleUploadSnapshot","handleCancelSnapshot","MigrateToCloud","feedbackURL","Page"],"sourceRoot":""}