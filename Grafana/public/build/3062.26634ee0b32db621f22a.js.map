{"version":3,"file":"3062.26634ee0b32db621f22a.js","mappings":"iKAgBO,MAAMA,EAAY,CAAC,CAAE,QAAAC,EAAS,SAAAC,CAAS,IAAsB,CAClE,MAAMC,KAAsB,UAAOF,EAASG,CAAoB,EAC1DC,KAAqB,UAAOJ,EAASK,CAAgB,EAE3D,OAAIH,EAAoB,UACf,OAACI,EAAA,CAAsB,QAASJ,EAAsB,SAAAD,CAAA,CAAS,EAGpEG,EAAmB,UACd,OAACG,EAAA,CAAqB,QAASH,EAAqB,SAAAH,CAAA,CAAS,EAG/D,IACT,EAMMK,EAAwB,CAAC,CAAE,QAAAN,EAAS,SAAAC,CAAS,IAAwC,CACzF,MAAMO,KAAuB,MAA4B,EAGzD,OAFgBC,EAAeD,EAAsBR,CAAO,KAGnD,mBAAG,SAAAC,CAAA,CAAS,EAEZ,IAEX,EAEMM,EAAuB,CAAC,CAAE,QAAAP,EAAS,SAAAC,CAAS,IAAoC,CACpF,MAAMS,KAAuB,MAAqB,EAGlD,OAFgBD,EAAeC,EAAsBV,CAAO,KAGnD,mBAAG,SAAAC,CAAA,CAAS,EAEZ,IAEX,EAKA,SAASQ,EAAiCE,EAAyBX,EAAc,CAC/E,SAAO,SAAMW,CAAS,EACnB,KAAKX,CAAO,EACZ,OAAO,EACP,MAAM,EACN,KAAK,CAAC,CAACY,EAAYC,CAAO,IAAMA,IAAY,EAAI,CACrD,CAEA,SAASV,EAAqBW,EAA4B,CACxD,OAAO,OAAO,OAAO,IAAkB,EAAE,SAASA,CAAM,CAC1D,CAEA,SAAST,EAAiBS,EAAwB,CAChD,OAAO,OAAO,OAAO,IAAc,EAAE,SAASA,CAAM,CACtD,C,+HC5DO,SAASC,EAAmC,CAAE,oBAAAC,CAAoB,EAA4C,CACnH,MAAMC,KAAS,MAAWC,CAAS,EAC7BC,EAAuBH,IAAwB,KAE/C,CAACI,EAAkCC,CAA8B,KAAI,MACzE,KAAe,uBACjB,EACMC,EAA6BF,GAAoCC,EAEjE,CAAE,YAAaE,CAAe,EAAI,IAAgB,UAAU,sCAAsC,SACtG,OACA,CACE,KAAMJ,GAAwB,CAACG,CACjC,CACF,EAMA,GAAI,EAHFC,GAAgB,qBAChB,CAAC,KAAmB,SAAU,KAAmB,GAAG,EAAE,SAASA,GAAgB,mBAAmB,IAEnEJ,EAC/B,OAAO,KAGT,MAAMK,EAAuBD,EAAe,yBAA2B,EAEvE,OAAIA,EAAe,sBAAwB,KAAmB,YAE1D,QAAC,IAAK,CAAC,MAAM,2DAA2D,yKAGtE,OAAC,OAAI,UAAWN,EAAO,UAAW,oIAGlC,GACF,EAIAM,EAAe,sBAAwB,KAAmB,KAAOC,KAEjE,QAAC,IAAK,CAAC,MAAM,iDAAiD,SAAS,UAAU,wJAG/E,OAAC,OAAI,UAAWP,EAAO,UAAW,oIAGlC,GACF,EAIG,IACT,CAEA,MAAMC,EAAaO,IAA0B,CAC3C,aAAW,OAAI,CACb,SAAUA,EAAM,WAAW,UAAU,SACrC,WAAYA,EAAM,WAAW,UAAU,UACzC,CAAC,CACH,E,0ZCnDO,MAAMC,GAAiB,CAAC,CAAE,OAAAC,EAAQ,iBAAAC,CAAiB,IAAa,CACrE,MAAMC,KAAW,eAAY,EACvB,CAACC,EAAmBC,CAAoB,KAAI,YAAkC,CAAC,CAAC,EAChFC,KAAc,MAAW,GAAmB,EAE5CC,KAAe,WAAQ,IACT,OAAO,QAAQN,EAAO,cAAc,EAErC,IAAI,CAAC,CAACO,EAAMC,CAAQ,KAAO,CAC1C,KAAAD,EACA,SAAAC,EACA,YAAaR,EAAO,2BAA6B,CAAC,GAAGO,CAAI,CAC3D,EAAE,EACD,CAACP,CAAM,CAAC,EACL,CAACS,EAAkBC,CAAmB,KAAI,YAAiB,EAE3DC,EAAiB,IAAM,CACvBF,GACFP,KAAS,MAAqBO,EAAkBR,CAAgB,CAAC,EAEnES,EAAoB,MAAS,CAC/B,EAEA,SACE,oBACE,qBAAC,SAAM,UAAWL,EAAY,MAAO,cAAY,kBAC/C,qBAAC,YACC,oBAAC,OAAI,UAAWA,EAAY,UAAW,KACvC,OAAC,QAAI,KACL,OAAC,QAAI,GACP,KACA,OAAC,SACC,oBAAC,MACC,oBAAC,OAAG,KACJ,OAAC,MAAG,oBAAQ,KACZ,OAACjC,EAAA,GACC,QAAS,CACP,KAAmB,2BACnB,KAAmB,2BACnB,KAAmB,0BACrB,EAEA,mBAAC,MAAG,mBAAO,EACb,GACF,EACF,KACA,QAAC,SACE,WAACkC,EAAa,WACb,OAAC,MAAG,UAAWD,EAAY,QACzB,mBAAC,MAAG,QAAS,EAAG,iCAAqB,EACvC,EAEDC,EAAa,IAAI,CAAC,CAAE,KAAAC,EAAM,SAAAC,EAAU,WAAAI,CAAW,EAAGC,IAAQ,CACzD,MAAMC,EAAa,CAAC,CAACX,EAAkBI,CAAI,EAC3C,SACE,QAACQ,EAAAA,SAAA,CACC,qBAAC,MAAc,UAAWF,EAAM,IAAM,EAAIR,EAAY,QAAU,OAC9D,oBAAC,MACC,mBAACW,EAAA,GACC,YAAa,CAACb,EAAkBI,CAAI,EACpC,SAAU,IAAMH,EAAqB,CAAE,GAAGD,EAAmB,CAACI,CAAI,EAAG,CAACO,CAAW,CAAC,EACpF,EACF,KACA,QAAC,MACE,UAAAP,EAAK,IAAEK,MAAc,OAACK,EAAA,GAAiB,EAAC,GAC3C,KACA,QAAC,MAAG,UAAWZ,EAAY,YACxB,UAAAO,MACC,OAACM,EAAA,GACC,MAAI,MACF,qCAAqC,mBAAmBX,CAAI,CAAC,QAC7DN,CACF,EACA,QAAQ,gBACR,KAAK,WACP,EAED,CAACW,MACA,OAACxC,EAAA,EAAS,CAAC,QAAS,CAAC,KAAmB,0BAA0B,EAChE,mBAAC8C,EAAA,GACC,MAAI,MACF,qCAAqC,mBAAmBX,CAAI,CAAC,QAC7DN,CACF,EACA,QAAQ,gBACR,KAAK,MACP,EACF,KAEF,OAAC7B,EAAA,EAAS,CAAC,QAAS,CAAC,KAAmB,kBAAkB,EACxD,mBAAC8C,EAAA,GACC,MAAI,MACF,qCAAqC,mBAAmBX,CAAI,CAAC,aAC7DN,CACF,EACA,QAAQ,gBACR,KAAK,OACP,EACF,EACC,CAACW,MACA,OAACxC,EAAA,EAAS,CAAC,QAAS,CAAC,KAAmB,0BAA0B,EAChE,mBAAC8C,EAAA,GACC,QAAS,IAAMR,EAAoBH,CAAI,EACvC,QAAQ,kBACR,KAAK,YACP,EACF,GAEJ,IApDOA,CAqDT,EACCO,MACC,QAAC,MAAG,UAAWD,EAAM,IAAM,EAAIR,EAAY,QAAU,OACnD,oBAAC,OAAG,KACJ,OAAC,MAAG,QAAS,EACX,mBAACc,EAAA,EAAY,CAAC,MAAM,cAAc,WAAY,GAC5C,mBAACC,GAAA,GACC,MAAO,OACP,OAAQ,OACR,WAAY,GACZ,MAAOZ,EACP,gBAAiB,GACjB,cAAe,CACb,SAAU,GACV,qBAAsB,EACxB,EACF,EACF,EACF,GACF,IAzEWD,CA2Ef,CAEJ,CAAC,GACH,GACF,EAEC,CAAC,CAACE,MACD,OAACY,EAAA,GACC,OAAQ,GACR,MAAM,kBACN,KAAM,6CAA6CZ,CAAgB,KACnE,YAAY,cACZ,UAAWE,EACX,UAAW,IAAMD,EAAoB,MAAS,EAChD,GAEJ,CAEJ,ECrKaY,GAAwB,IAAM,CACzC,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3C,CAAE,KAAAC,EAAM,MAAAC,CAAM,KAAIC,EAAA,GAAsBH,CAAoB,EAElE,OAAIE,KACK,OAACE,EAAA,EAAK,CAAC,MAAM,yCAA0C,gBAAOF,CAAK,EAAE,EAG1ED,KACK,OAACzB,GAAc,CAAC,OAAQyB,EAAM,iBAAkBD,CAAA,CAAuB,EAGzE,IACT,E,4ECVA,MAAMK,GAAsB,IAAM,CAChC,MAAMtC,KAAS,MAAWC,EAAS,EAE7B,CAACsC,EAAcC,CAAe,KAAIC,EAAA,GAAmB,EAErDC,EAAeH,EAAa,IAAI,QAAQ,GAAK,GAC7C,CAACI,EAAaC,CAAc,KAAI,YAASF,CAAY,EAErD,CAACG,EAAGC,CAAM,KAAIC,GAAA,GAClB,IAAM,CACJP,EAAgB,CAAE,OAAQG,CAAY,EAAG,EAAI,CAC/C,EACA,IACA,CAACH,EAAiBG,CAAW,CAC/B,EAEMK,KAAQ,eAAY,IAAM,CAC9BF,EAAO,EACPF,EAAe,EAAE,EACjBJ,EAAgB,CAAE,OAAQ,EAAG,EAAG,EAAI,CACtC,EAAG,CAACM,EAAQN,CAAe,CAAC,EAEtBS,EAAW,EAAQP,EAEzB,SACE,QAAC,KAAK,CAAC,UAAU,MAAM,WAAW,MAAM,IAAK,GAC3C,oBAACQ,GAAA,EAAK,CAAC,UAAWlD,EAAO,SAAU,MAAM,yBACvC,mBAACmD,GAAA,GACC,aAAW,wBACX,YAAY,SACZ,MAAO,GACP,UAAQ,OAACC,GAAA,EAAI,CAAC,KAAK,QAAS,GAC5B,SAAWC,GAAU,CACnBT,EAAeS,EAAM,cAAc,KAAK,CAC1C,EACA,MAAOV,CAAA,CACT,EACF,KACA,OAACW,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,QAAQ,QAAS,IAAMN,EAAM,EAAG,SAAU,CAACC,EAAU,aAAW,QAAQ,iBAEzG,GACF,CAEJ,EAEMhD,GAAY,KAAO,CACvB,YAAU,QAAI,CACZ,aAAc,CAChB,CAAC,CACH,GC/CasD,GAAoB,CAAC,CAAE,iBAAA5C,CAAiB,IAA8B,CACjF,MAAM6C,KAAc,MAA0C7C,CAAgB,EAE9E,SACE,OAAC7B,EAAA,EAAS,CAAC,QAAS,CAAC,KAAmB,2BAA2B,EACjE,oBAACuD,EAAA,EAAK,CAAC,SAAS,OAAO,MAAM,mCAC3B,oBAAC,KAAE,+JAGH,KACA,OAAC,KAAU,CAAC,QAAM,MAAW,uCAAwC1B,CAAgB,EAAG,QAAQ,YAC7F,SAAA6C,EAAc,qBAAuB,qBACxC,GACF,EACF,CAEJ,E,eChBO,MAAMC,GAA6B,CACxCC,EACAC,IACsB,CACtB,KAAM,CAACC,EAAWC,CAAY,KAAI,YAAS,EAAK,EAC1C,CAACC,EAAcC,CAAe,KAAI,YAAiB,EACnD,CAAC5B,EAAO6B,CAAQ,KAAI,YAA8B,EAElDC,KAAgB,eAAY,IAAM,CAClCN,IAIJI,EAAgB,MAAS,EACzBF,EAAa,EAAK,EAClBG,EAAS,MAAS,EACpB,EAAG,CAACL,CAAS,CAAC,EAERO,KAAa,eAAajD,GAAiB,CAC/C8C,EAAgB9C,CAAI,EACpB4C,EAAa,EAAI,EACjBG,EAAS,MAAS,CACpB,EAAG,CAAC,CAAC,EAECG,KAAe,eAAY,IAAM,CACjCL,GACFJ,EAAaI,CAAY,EACtB,KAAK,IAAMD,EAAa,EAAK,CAAC,EAC9B,MAAMG,CAAQ,CAErB,EAAG,CAACN,EAAcI,CAAY,CAAC,EA8B/B,MAAO,IA5Bc,WAAQ,IACvB3B,KACK,OAACiC,GAAA,CAAW,OAAQR,EAAW,UAAWK,EAAe,MAAA9B,CAAA,CAAc,KAI9E,QAACkC,EAAA,GACC,OAAQT,EACR,UAAWK,EACX,qBAAsB,CAACN,EACvB,cAAe,CAACA,EAChB,MAAM,uBAEN,oBAAC,KAAE,mEAAuD,KAC1D,OAAC,KAAE,+DAAmD,KAEtD,QAACU,EAAA,EAAM,UAAN,CACC,oBAACf,EAAA,GAAM,CAAC,KAAK,SAAS,QAAQ,cAAc,QAASa,EAAc,SAAUR,EAC1E,SAAAA,EAAY,cAAgB,4BAC/B,KACA,OAACL,EAAA,GAAM,CAAC,KAAK,SAAS,QAAQ,YAAY,QAASW,EAAe,SAAUN,EAAW,kBAEvF,GACF,GACF,EAED,CAACxB,EAAO8B,EAAeE,EAAcR,EAAWC,CAAS,CAAC,EAEvCM,EAAYD,CAAa,CACjD,EAKMG,GAAa,CAAC,CAAE,OAAAE,EAAQ,UAAAC,EAAW,MAAApC,CAAM,OAC7C,QAACkC,EAAA,GACC,OAAAC,EACA,UAAAC,EACA,qBAAsB,GACtB,cAAe,GACf,MAAO,uBAEP,oBAAC,KAAE,gDAAoC,KACvC,OAAC,KACC,mBAAC,OACC,mBAAC,QAAM,kBAAmBpC,CAAK,EAAE,EACnC,EACF,GACF,E,sCCpFF,MAAMqC,EAAc,IAAI,KAAO,CAC7B,UAAW,EACX,SAAU,EACV,SAAU,EACV,SAAU,EACV,SAAU,CACZ,CAAC,EAGYC,GAAyB,CACpCC,EACAC,IAC+B,CAC/B,MAAMC,KAAe,WAAQ,IACpBF,EAAc,IAAKZ,GAAiBA,EAAa,IAAI,EAC3D,CAACY,CAAa,CAAC,EAEZG,KAAe,WAAQ,IACpBH,EAAc,IAAKZ,GAExBA,EAAa,iCAAiC,IAAKgB,GAAaA,EAAS,IAAiB,EAAE,IAAI,EAAE,KAAK,GAAG,CAC5G,EACC,CAACJ,CAAa,CAAC,EAElB,GAAI,CAACC,EACH,OAAOD,EAGT,MAAMK,EAAWP,EAAY,OAAOI,EAAcD,CAAM,GAAK,CAAC,EACxDK,EAAWR,EAAY,OAAOK,EAAcF,CAAM,GAAK,CAAC,EAExDM,EAAO,CAAC,GAAGF,EAAU,GAAGC,CAAQ,EAEtC,SAAO,SAAKC,CAAI,EAAE,IAAKC,GAAOR,EAAcQ,CAAE,CAAC,GAAK,CAAC,CACvD,E,2BCRYC,GAAAA,IACVA,EAAA,cAAgB,iBAChBA,EAAA,sBAAwB,YAFdA,IAAAA,GAAA,IAKZ,MAAMC,EAAoB,GAEpBC,GAAmB,IAAM,CAC7B,KAAM,CAAE,qBAAApD,CAAqB,KAAI,MAAgB,EAC3C,CAACqD,CAAW,KAAI7C,EAAA,GAAmB,EAEzC,GAAI,CAAE,UAAAkB,EAAW,MAAAxB,EAAO,cAAAuC,CAAc,KAAIa,EAAA,IAA2B,EACrE,KAAM,CAAE,cAAAC,EAAe,wBAAAC,CAAwB,KAAI,MAAsBxD,CAAqB,EACxF,CAACyD,EAA0BC,CAAsB,KAAI,MACzD,KAAmB,kBACrB,EACM,CAACC,EAA8BC,CAA0B,KAAI,MACjE,KAAmB,kBACrB,EAEM,CAACC,EAAaC,CAAe,EAAItC,GAA2B+B,EAAeC,EAAwB,SAAS,EAC5G,CAACO,EAAcC,CAAgB,KAAIC,EAAA,GAAsB,EAEzDvB,GAASW,EAAY,IAAI,QAAQ,EAEvC,GAAInD,EAEF,SAAO,OAACE,EAAA,EAAK,CAAC,MAAM,iCAAkC,kBAAmBF,CAAK,EAAE,EAGlF,GAAIwB,EACF,SAAO,OAACwC,EAAA,EAAkB,CAAC,KAAK,YAAa,GAG/C,MAAMC,GAA+BnE,IAAyB,KAC9D,SACE,oBAEE,qBAACoE,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,MAAM,eAAe,gBACrD,oBAAC/D,GAAmB,EAAC,KAErB,QAAC+D,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EACzB,UAAAX,MACC,OAAC,MACC,KAAK,OACL,aAAW,oBACX,QAAQ,UACR,KAAK,wCACL,SAAU,CAACC,EACZ,6BAED,EAEDC,MACC,OAACtC,EAAA,IACC,KAAK,eACL,QAAQ,YACR,aAAW,aACX,SAAU,CAACuC,EACX,QAAS,IAAMI,EAAiB,GAAkB,EACnD,sBAED,GAEJ,GACF,KACA,OAACK,GAAA,CACC,cAAA5B,EACA,OAAAC,GACA,SAAUS,EACV,SAAWnE,IAAS8E,EAAgB9E,EAAI,EACxC,SAAUwE,EAAwB,UACpC,EAEC,CAACW,OAAgC,OAAC7C,GAAiB,CAAC,iBAAkBtB,CAAA,CAAuB,EAC7F6D,EACAE,CAAA,EACH,CAEJ,EAEMO,GAA2B,IAAM,CACrC,KAAM,CAACC,EAAyBC,CAAqB,KAAI,MACvD,KAAmB,0BACrB,EAEA,SACE,oBACE,qBAACJ,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,eAAe,gBACxD,oBAACK,EAAA,EAAI,CAAC,QAAQ,OAAO,MAAM,YAAY,0EAEvC,EACCF,MACC,OAAC,MACC,KAAK,OACL,QAAQ,UACR,KAAK,wCACL,SAAU,CAACC,EACZ,qCAED,GAEJ,KACA,OAACzE,GAAqB,EAAC,GACzB,CAEJ,EAEM2E,GAAmB,IAAM,CAC7B,KAAM,CAACrB,EAAasB,CAAc,KAAInE,EAAA,GAAmB,EAazD,MAAO,IAZO,WAAQ,IAAM,CAC1B,MAAMoE,EAAavB,EAAY,IAAI,KAAK,EAExC,MAAI,CAACuB,GAAc,CAAC,OAAO,OAAO1B,CAAS,EAAE,IAAI,MAAM,EAAE,SAAS0B,CAAU,EACnE,iBAGFA,GAAc,gBACvB,EAAG,CAACvB,CAAW,CAAC,EAEEwB,GAAmBF,EAAe,CAAE,IAAAE,CAAI,CAAC,CAEpC,CACzB,EAEMC,GAA4B,IAAM,CACtC,KAAM,CAAE,qBAAA9E,CAAqB,KAAI,MAAgB,EAC3C,CAAC+E,EAAWC,CAAY,EAAIN,GAAiB,EAEnD,GAAI,CAAE,cAAAjC,CAAc,KAAIa,EAAA,IAA2B,EAEnD,MAAM2B,EAAuBF,IAAc,iBACrCG,EAA4BH,IAAc,YAEhD,SACE,oBACE,oBAAClH,EAAA,EAAkC,CAAC,oBAAqBmC,CAAA,CAAuB,KAChF,QAACoE,EAAA,EAAK,CAAC,UAAU,SACf,qBAACe,EAAA,EAAO,CACN,oBAACC,EAAA,GACC,MAAM,iBACN,OAAQH,EACR,QAASxC,EAAc,OACvB,YAAa,IAAMuC,EAAa,gBAAuB,EACzD,KACA,OAACI,EAAA,GACC,MAAM,yBACN,OAAQF,EACR,YAAa,IAAMF,EAAa,WAA+B,EACjE,GACF,KACA,OAACK,EAAA,EAAU,CACT,oBAACjB,EAAA,EAAK,CAAC,UAAU,SACd,UAAAa,MAAwB,OAAC7B,GAAA,EAAiB,EAC1C8B,MAA6B,OAACZ,GAAA,EAAyB,GAC1D,EACF,GACF,GACF,CAEJ,EAUMD,GAAoB,CAAC,CACzB,cAAA5B,EACA,SAAA6C,EAAW,GACX,OAAA5C,EACA,SAAA6C,EAAWpC,EACX,SAAAqC,CACF,IAA8B,CAC5B,MAAMC,EAAgBjD,GAAuBC,EAAeC,CAAM,EAC5D,CAAE,KAAAgD,EAAM,UAAAC,EAAW,cAAAC,EAAe,aAAAC,CAAa,KAAIC,EAAA,GAAcL,EAAe,EAAGF,CAAQ,EAEjG,SACE,oBACG,UAAAI,EAAU,IAAI,CAAC9D,EAAckE,IAAU,CACtC,MAAMC,KAAc,OAAcnE,CAAY,EACxCoE,EAAWpE,EAAa,UAAY,CAAC,EACrCqE,EAAM,GAAGrE,EAAa,IAAI,IAAIkE,CAAK,GAEzC,SACE,OAACI,EAAA,IAEC,KAAMtE,EAAa,KACnB,SAAAyD,EACA,SAAAE,EACA,UAAW3D,EAAa,iCACxB,YAAAmE,EACA,SAAAC,CAAA,EANKC,CAOP,CAEJ,CAAC,KACD,OAACE,EAAA,EAAU,CAAC,YAAaV,EAAM,cAAAE,EAA8B,WAAYC,EAAc,mBAAkB,GAAC,GAC5G,CAEJ,EAEA,GAAef,E,6FCxOR,SAASuB,EAA2BC,EAAwC,CACjF,MAAMC,EAAOD,EAAO,UAAU,mBAAmB,SACjD,MAAO,CACL,CACE,MAAO,+BAA6B,QACpC,OAAQ,qBACR,KAAAC,CACF,EACA,CACE,MAAO,+BAA6B,QACpC,OAAQ,qBACR,KAAAA,CACF,EACA,CACE,MAAO,+BAA6B,MACpC,cAAe,4CACf,OAAQ,qBACR,KAAAA,CACF,EACA,CACE,MAAO,+BAA6B,KACpC,cAAe,CAAE,MAAO,yDAA0D,EAClF,OAAQ,yCACR,KAAAA,CACF,EACA,CACE,MAAO,+BAA6B,MACpC,OAAQ,WACR,KAAAA,CACF,EACA,CACE,MAAO,+BAA6B,SACpC,OAAQ,gCACR,KAAAA,CACF,EACA,CACE,MAAO,+BAA6B,aACpC,OAAQ,gCACR,KAAAA,CACF,EACA,CACE,MAAO,+BAA6B,YACpC,OAAQ,wBACR,KAAAA,CACF,CACF,CACF,C,eCpCO,SAASC,EAA+BF,EAA6B,CAC1E,MAAMG,EAAmE,CACvE,kBAAmB,CAAC,GAAG,EACvB,uBAAuBC,EAAOC,EAAUC,EAA6D,CACnG,MAAMC,EAAOH,EAAM,qBAAqBC,CAAQ,EAC1CG,EAAQ,CACZ,gBAAiBH,EAAS,WAC1B,cAAeA,EAAS,WACxB,YAAaE,EAAK,YAClB,UAAWA,EAAK,SAClB,EAEME,EAAqB,IAAIC,EAAmBV,EAAQQ,CAAK,EAG/D,GAAI,CADqBG,EAAqBP,EAAOC,CAAQ,EAE3D,OAAOI,EAAmB,uBAAuB,EAGnD,GAAIH,EAAQ,cAAgBN,EAAO,UAAU,sBAAsB,QAAU,CAACM,EAAQ,iBACpF,OAAOG,EAAmB,wBAAwB,EAGpD,MAAMG,EAAgBR,EAAM,qBAAqB,CAC/C,WAAYC,EAAS,WACrB,OAAQA,EAAS,OAAS,CAC5B,CAAC,EAED,OAAOI,EAAmB,2BAA2BG,EAAc,IAAI,CACzE,CACF,EAEA,OAAOZ,EAAO,UAAU,+BAA+B,cAAeG,CAA8B,CACtG,CAEA,SAASQ,EAAqBP,EAA0BC,EAAoB,CAC1E,MAAMQ,EAAc,CAClB,gBAAiBR,EAAS,WAC1B,cAAeA,EAAS,WACxB,YAAaD,EAAM,iBAAiBC,EAAS,UAAU,EACvD,UAAWD,EAAM,iBAAiBC,EAAS,UAAU,CACvD,EAKA,OAFgBD,EAAM,YADA,iCAC2BS,EAAa,GAAM,GAAO,KAAM,EAAI,EAEtE,KAAMC,GAAUA,EAAM,MAAM,iBAAiBT,CAAQ,CAAC,CACvE,CAEO,MAAMK,CAAmB,CAC9B,YACmBV,EACAQ,EACjB,CAFiB,YAAAR,EACA,WAAAQ,EAGnB,4BAAyB,IAChB,KAAK,iCAA8B,MAAuB,KAAK,MAAM,CAAC,EAG/E,6BAA0B,IACjB,KAAK,8BAA8BT,EAA2B,KAAK,MAAM,CAAC,EAGnF,gCAA8BgB,GAA4E,CACxG,OAAQA,EAAa,CACnB,IAAK,GACH,OAAO,KAAK,iCAA8B,MAAqB,KAAK,MAAM,KAAG,MAAoB,KAAK,MAAM,CAAC,EAC/G,IAAK,SACH,OAAO,KAAK,iCAA8B,MAAqB,KAAK,MAAM,CAAC,EAC7E,IAAK,cACL,IAAK,eACL,IAAK,oBACL,IAAK,SACL,IAAK,cACH,OAAO,KAAK,iCAA8B,MAAuB,KAAK,MAAM,CAAC,EAC/E,QACE,MAAO,CAAE,YAAa,CAAC,CAAE,CAC7B,CACF,EAEA,KAAQ,8BAAgC,IAAIC,KAGnC,CACL,eAHqB,UAAO,GAAGA,CAAI,EAGP,IAAKC,GAAeC,EAA4BD,EAAY,KAAK,KAAK,CAAC,CACrG,EAhCC,CAkCL,CAEA,SAASC,EACP,CAAE,MAAAC,EAAO,OAAAC,EAAQ,cAAAC,EAAe,KAAApB,EAAM,WAAAqB,CAAW,EACjDd,EAC0B,CAC1B,MAAMe,EAAiB,OAAOJ,GAAU,SAAWA,EAAQA,EAAM,MAC3DK,EAAc,OAAOL,GAAU,SAAW,CAAE,MAAAA,EAAc,YAAaC,CAAO,EAAI,CAAE,GAAGD,CAAM,EAEnG,OAAAK,EAAY,cAAgBJ,EAErB,CACL,MAAOI,EACP,KAAAvB,EACA,WAAYqB,GAAcC,EAC1B,MAAAf,EACA,cAAAa,EACA,OAAAD,CACF,CACF,CCvHO,MAAMK,EAA0B,cASvC,EAPyD,CACvD,GAAIA,EACJ,WAAY,CAAC,EACb,QAAS,CAAC,EACV,UAAW,CAAC,EACZ,OAAQ,IAAM,uCAChB,ECKaC,EAAmB,CAC9B1B,EACA2B,IAEG,CACH,KAAM,CAAE,GAAAhF,EAAI,OAAAiF,CAAO,EAAID,EAEL3B,EAAO,UAAU,aAAa,EAClC,KAAM6B,GAAMA,EAAE,KAAOlF,CAAE,IAIrCqD,EAAO,UAAU,SAAS,CAAE,GAAArD,CAAG,CAAC,EAChCiF,EAAO,EAAE,KAAME,GAAY,CACzB9B,EAAO,UAAU,yBAAyBrD,EAAImF,EAAQ,QAAQ,EAC9D9B,EAAO,UAAU,yBAAyBrD,EAAImF,EAAQ,IAAI,CAE5D,CAAC,EACH,ECdMvI,EAAkBwI,GAA+B,CACrD,MAAMC,EAAmB,EAAQD,EAAM,WACjCE,KAAqB,UAA2B,IAAI,EAEpDC,EAAoBC,GAAyC,CACjE,GAAIH,EAAkB,CACpB,MAAMI,EAAgBD,EAAO,iBAAiB,EAE9C,GAAI,CAGFA,EAAO,OAAO,CAAE,OAAQC,EAAe,MAAO,GAAI,CAAC,CACrD,MAAc,CAAC,CACjB,CACF,EAEA,sBAAU,IACD,IAAM,CACXH,EAAmB,SAAS,QAAQ,CACtC,EACC,CAAC,CAAC,KAGH,OAACI,EAAA,GACC,gBAAiB,GACjB,YAAa,GACZ,GAAGN,EACJ,cAAe,CACb,qBAAsB,EACxB,EACA,iBAAAG,EACA,oBAAsBlC,GAAW,CAC/B0B,EAAiB1B,EAAQ,CAA4B,EACrDiC,EAAmB,QAAU/B,EAA+BF,CAAM,CACpE,EACA,SAAUyB,CAAA,CACZ,CAEJ,C,gFCzDO,MAAMa,EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOpBC,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBtBC,EAAyBC,EAAoB,yBAAyB,EACtEC,EAA0BD,EAAoB,0BAA0B,EACxEE,EAA+BF,EAAoB,+BAA+B,EAClFG,EAAoBH,EAAoB,oBAAoB,EAC5DI,EAAyBJ,EAAoB,yBAAyB,EAEnF,SAASA,EAAoBK,EAAmB,CAC9C,MAAO;AAAA,YACGA,CAAS;AAAA;AAAA,UAGrB,CC3BO,SAASC,EAAqB/C,EAAwC,CAC3E,MAAMC,EAAOD,EAAO,UAAU,mBAAmB,MAEjD,MAAO,CACL,CACE,MAAO,SACP,KAAAC,EACA,OAAQ,UACR,cAAe,CAAE,MAAO,gCAAiC,CAC3D,EACA,CAAE,MAAO,WAAY,KAAAA,EAAM,OAAQ,QAAS,EAC5C,CAAE,MAAO,SAAU,KAAAA,EAAM,OAAQ,QAAS,EAC1C,CAAE,MAAO,cAAe,KAAAA,EAAM,OAAQ,YAAa,EACnD,CAAE,MAAO,eAAgB,KAAAA,EAAM,OAAQ,YAAa,EACpD,CAAE,MAAO,oBAAqB,KAAAA,EAAM,OAAQ,YAAa,EACzD,CAAE,MAAO,cAAe,KAAAA,EAAM,OAAQ,QAAS,CACjD,CACF,CAGO,SAAS+C,EAAoBhD,EAAwC,CAC1E,MAAMC,EAAOD,EAAO,UAAU,mBAAmB,MAEjD,MAAO,CACL,CACE,MAAO,CAAE,MAAO,SAAU,OAAQ,UAAW,YAAa,QAAS,EACnE,KAAAC,EACA,OAAQ,SACR,cAAe,CAAE,MAAO,uDAAwD,CAClF,EACA,CACE,MAAO,CAAE,MAAO,SAAU,OAAQ,SAAU,EAC5C,KAAAA,EACA,OAAQ,aACR,cAAe,CAAE,MAAO,wCAAyC,CACnE,EACA,CACE,MAAO,CAAE,MAAO,cAAe,OAAQ,SAAU,EACjD,KAAAA,EACA,OAAQ,aACR,cAAe,6CACjB,EACA,CACE,MAAO,CAAE,MAAO,WAAY,OAAQ,SAAU,EAC9C,KAAAA,EACA,OAAQ,YACR,cAAe,gCACjB,EACA,CACE,MAAO,CAAE,MAAO,SAAU,OAAQ,SAAU,EAC5C,KAAAA,EACA,OAAQ,YACR,cACE,gJACJ,EACA,CACE,MAAO,CAAE,MAAO,eAAgB,OAAQ,SAAU,EAClD,KAAAA,EACA,OAAQ,SACR,cAAe,gDACjB,EACA,CACE,MAAO,CAAE,MAAO,aAAc,OAAQ,SAAU,EAChD,KAAAA,EACA,OAAQ,SACR,cACE,qGACJ,EACA,CACE,MAAO,CAAE,MAAO,eAAgB,OAAQ,SAAU,EAClD,KAAAA,EACA,OAAQ,SACR,cAAe,2FACjB,EACA,CACE,MAAO,CAAE,MAAO,WAAY,OAAQ,SAAU,EAC9C,KAAAA,EACA,OAAQ,SACR,cAAe,iGACjB,EACA,CACE,MAAO,CAAE,MAAO,cAAe,OAAQ,SAAU,EACjD,KAAAA,EACA,OAAQ,SACR,cAAe,qDACjB,EACA,CACE,MAAO,CAAE,MAAO,cAAe,OAAQ,SAAU,EACjD,KAAAA,EACA,OAAQ,SACR,cAAe,iFACjB,CACF,CACF,CAGO,SAASgD,EAAqBjD,EAAwC,CAC3E,MAAMC,EAAOD,EAAO,UAAU,mBAAmB,MAEjD,MAAO,CACL,CAAE,MAAO,SAAU,KAAAC,EAAM,OAAQ,SAAU,EAC3C,CAAE,MAAO,WAAY,KAAAA,EAAM,OAAQ,SAAU,CAC/C,CACF,CAGO,SAASiD,EAAuBlD,EAAwC,CAC7E,MAAMC,EAAOD,EAAO,UAAU,mBAAmB,MAEjD,MAAO,CACL,CAAE,MAAO,cAAe,KAAAC,EAAM,OAAQ,YAAa,EACnD,CAAE,MAAO,QAAS,KAAAA,EAAM,OAAQ,UAAW,EAC3C,CAAE,MAAO,SAAU,KAAAA,EAAM,OAAQ,UAAW,EAC5C,CACE,MAAO,SACP,OAAQ,qCACR,KAAMD,EAAO,UAAU,mBAAmB,MAC5C,CACF,CACF,CAEO,MAAMmD,EAAW,CACtB,OAAQ,CACN,MAAO,aACP,YAAa,gCACb,QAASb,CACX,EACA,aAAc,CACZ,MAAO,eACP,YAAa,oDACb,QAASC,CACX,EACA,YAAa,CACX,MAAO,kBACP,YAAa,sCACb,QAASC,CACX,EACA,aAAc,CACZ,MAAO,mBACP,YAAa,uCACb,QAASE,CACX,EACA,kBAAmB,CACjB,MAAO,wBACP,YAAa,4CACb,QAASC,CACX,EACA,OAAQ,CACN,MAAO,aACP,YAAa,gCACb,QAASC,CACX,EACA,YAAa,CACX,MAAO,kBACP,YAAa,qCACb,QAASC,CACX,CACF,EAGO,SAASO,EAAuBpD,EAAwC,CAC7E,MAAMqD,EAAcrD,EAAO,UAAU,mBAAmB,QAClDsD,EAAoBtD,EAAO,UAAU,6BAA6B,gBAElE,CAAE,OAAAuD,EAAQ,aAAAC,EAAc,YAAAC,EAAa,aAAAC,EAAc,kBAAAC,EAAmB,OAAAC,EAAQ,YAAAC,CAAY,EAAIV,EAEpG,MAAO,CACL,CACE,MAAOI,EAAO,MACd,cAAeA,EAAO,YACtB,KAAMF,EACN,WAAYE,EAAO,QACnB,gBAAiBD,CACnB,EACA,CACE,MAAO,CACL,MAAOE,EAAa,MACpB,OAAQ,SACV,EACA,cAAeA,EAAa,YAC5B,KAAMH,EACN,WAAYG,EAAa,QACzB,gBAAiBF,CACnB,EACA,CACE,MAAOG,EAAY,MACnB,cAAeA,EAAY,YAC3B,KAAMJ,EACN,WAAYI,EAAY,QACxB,gBAAiBH,CACnB,EACA,CACE,MAAOI,EAAa,MACpB,cAAeA,EAAa,YAC5B,KAAML,EACN,WAAYK,EAAa,QACzB,gBAAiBJ,CACnB,EACA,CACE,MAAOK,EAAkB,MACzB,cAAeA,EAAkB,YACjC,KAAMN,EACN,WAAYM,EAAkB,QAC9B,gBAAiBL,CACnB,EACA,CACE,MAAO,CAAE,MAAOM,EAAO,MAAO,OAAQ,SAAU,EAChD,cAAeA,EAAO,YACtB,KAAMP,EACN,WAAYO,EAAO,QACnB,gBAAiBN,CACnB,EACA,CACE,MAAO,CAAE,MAAOO,EAAY,MAAO,OAAQ,SAAU,EACrD,cAAeA,EAAY,YAC3B,KAAMR,EACN,WAAYQ,EAAY,QACxB,gBAAiBP,CACnB,CACF,CACF,C,wEC5NO,MAAMjK,EAAa,CAAC,CACzB,QAAAyK,EACA,KAAAC,EACA,GAAAC,EACA,OAAAC,EACA,QAAAC,EACA,UAAAC,EACA,iBAAAC,EAAmB,MACnB,GAAGC,CACL,IAAa,CACX,MAAMC,EAAY,OAAOR,GAAY,SAAWA,EAAU,OAE1D,SACE,OAAC,IAAO,CAAC,QAASA,EAAS,UAAWM,EACnC,SAAAJ,KACC,OAAC,MACC,QAAQ,YACR,KAAK,OACL,KAAAD,EACA,KAAMC,EACN,KAAK,KACL,OAAAC,EACC,GAAGI,EACJ,aAAYC,CAAA,CACd,KAEA,OAAC,MACC,UAAAH,EACA,QAAQ,YACR,KAAK,OACL,KAAK,KACL,KAAAJ,EACA,KAAK,SACL,QAAAG,EACC,GAAGG,EACJ,aAAYC,CAAA,CACd,EAEJ,CAEJ,C,kDC3CO,SAASzK,EAAsB0K,EAAuBC,EAAmB,CAC9E,MAAMC,EAAc,IAAgB,UAAU,6BAA6B,SAASF,GAAgB,GAAI,CAEtG,0BAA2B,GAC3B,GAAGC,EACH,KAAM,CAACD,CACT,CAAC,EAED,MAAO,CACL,GAAGE,EAEH,MAAOA,EAAY,KACrB,CACF,C,iDCpBO,MAAMC,EAAuBzM,IAA0B,CAC5D,SAAO,OAAI,CACT,MAAO,OACP,aAAcA,EAAM,MAAM,OAAO,QACjC,OAAQ,aAAaA,EAAM,OAAO,OAAO,IAAI,GAC7C,gBAAiBA,EAAM,OAAO,WAAW,UAEzC,GAAI,CACF,QAASA,EAAM,QAAQ,CAAC,CAC1B,EAEA,GAAI,CACF,QAAS,KAAKA,EAAM,QAAQ,CAAC,CAAC,EAChC,EAEA,GAAI,CACF,OAAQ,MACV,CACF,CAAC,EACD,WAAS,OAAI,CACX,gBAAiBA,EAAM,OAAO,WAAW,OAC3C,CAAC,EACD,aAAW,OAAI,CACb,MAAO,MACT,CAAC,EACD,YAAU,OAAI,CACZ,IAAKA,EAAM,QAAQ,CAAC,CACtB,CAAC,EACD,eAAa,OAAI,CACf,UAAW,QACX,MAAO,KACP,WAAY,SAEZ,YAAa,CACX,WAAYA,EAAM,QAAQ,EAAG,CAC/B,CACF,CAAC,CACH,E","sources":["webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplatesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/NotificationTemplates.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/ContactPointsFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/GlobalConfigAlert.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useContactPointsSearch.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPoints.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/alertManagerSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/autocomplete.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/definition.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/register.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/snippets.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/templateDataSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { AlertingAction, useAlertingAbility } from '../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n  const externalAlertmanager = currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME;\n\n  const [readConfigurationStatusSupported, readConfigurationStatusAllowed] = useAlertingAbility(\n    AlertingAction.ReadConfigurationStatus\n  );\n  const canReadConfigurationStatus = readConfigurationStatusSupported && readConfigurationStatusAllowed;\n\n  const { currentData: amChoiceStatus } = alertmanagerApi.endpoints.getGrafanaAlertingConfigurationStatus.useQuery(\n    undefined,\n    {\n      skip: externalAlertmanager || !canReadConfigurationStatus,\n    }\n  );\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || externalAlertmanager) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n","import { Fragment, useMemo, useState } from 'react';\n\nimport { ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { deleteTemplateAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { makeAMLink } from '../../utils/misc';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { DetailsField } from '../DetailsField';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { TemplateEditor } from './TemplateEditor';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const TemplatesTable = ({ config, alertManagerName }: Props) => {\n  const dispatch = useDispatch();\n  const [expandedTemplates, setExpandedTemplates] = useState<Record<string, boolean>>({});\n  const tableStyles = useStyles2(getAlertTableStyles);\n\n  const templateRows = useMemo(() => {\n    const templates = Object.entries(config.template_files);\n\n    return templates.map(([name, template]) => ({\n      name,\n      template,\n      provenance: (config.template_file_provenances ?? {})[name],\n    }));\n  }, [config]);\n  const [templateToDelete, setTemplateToDelete] = useState<string>();\n\n  const deleteTemplate = () => {\n    if (templateToDelete) {\n      dispatch(deleteTemplateAction(templateToDelete, alertManagerName));\n    }\n    setTemplateToDelete(undefined);\n  };\n\n  return (\n    <>\n      <table className={tableStyles.table} data-testid=\"templates-table\">\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>Template</th>\n            <Authorize\n              actions={[\n                AlertmanagerAction.CreateNotificationTemplate,\n                AlertmanagerAction.UpdateNotificationTemplate,\n                AlertmanagerAction.DeleteNotificationTemplate,\n              ]}\n            >\n              <th>Actions</th>\n            </Authorize>\n          </tr>\n        </thead>\n        <tbody>\n          {!templateRows.length && (\n            <tr className={tableStyles.evenRow}>\n              <td colSpan={3}>No templates defined.</td>\n            </tr>\n          )}\n          {templateRows.map(({ name, template, provenance }, idx) => {\n            const isExpanded = !!expandedTemplates[name];\n            return (\n              <Fragment key={name}>\n                <tr key={name} className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                  <td>\n                    <CollapseToggle\n                      isCollapsed={!expandedTemplates[name]}\n                      onToggle={() => setExpandedTemplates({ ...expandedTemplates, [name]: !isExpanded })}\n                    />\n                  </td>\n                  <td>\n                    {name} {provenance && <ProvisioningBadge />}\n                  </td>\n                  <td className={tableStyles.actionsCell}>\n                    {provenance && (\n                      <ActionIcon\n                        to={makeAMLink(\n                          `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                          alertManagerName\n                        )}\n                        tooltip=\"view template\"\n                        icon=\"file-alt\"\n                      />\n                    )}\n                    {!provenance && (\n                      <Authorize actions={[AlertmanagerAction.UpdateNotificationTemplate]}>\n                        <ActionIcon\n                          to={makeAMLink(\n                            `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                            alertManagerName\n                          )}\n                          tooltip=\"edit template\"\n                          icon=\"pen\"\n                        />\n                      </Authorize>\n                    )}\n                    <Authorize actions={[AlertmanagerAction.CreateContactPoint]}>\n                      <ActionIcon\n                        to={makeAMLink(\n                          `/alerting/notifications/templates/${encodeURIComponent(name)}/duplicate`,\n                          alertManagerName\n                        )}\n                        tooltip=\"Copy template\"\n                        icon=\"copy\"\n                      />\n                    </Authorize>\n                    {!provenance && (\n                      <Authorize actions={[AlertmanagerAction.DeleteNotificationTemplate]}>\n                        <ActionIcon\n                          onClick={() => setTemplateToDelete(name)}\n                          tooltip=\"delete template\"\n                          icon=\"trash-alt\"\n                        />\n                      </Authorize>\n                    )}\n                  </td>\n                </tr>\n                {isExpanded && (\n                  <tr className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                    <td></td>\n                    <td colSpan={2}>\n                      <DetailsField label=\"Description\" horizontal={true}>\n                        <TemplateEditor\n                          width={'auto'}\n                          height={'auto'}\n                          autoHeight={true}\n                          value={template}\n                          showLineNumbers={false}\n                          monacoOptions={{\n                            readOnly: true,\n                            scrollBeyondLastLine: false,\n                          }}\n                        />\n                      </DetailsField>\n                    </td>\n                  </tr>\n                )}\n              </Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {!!templateToDelete && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete template\"\n          body={`Are you sure you want to delete template \"${templateToDelete}\"?`}\n          confirmText=\"Yes, delete\"\n          onConfirm={deleteTemplate}\n          onDismiss={() => setTemplateToDelete(undefined)}\n        />\n      )}\n    </>\n  );\n};\n","import { Alert } from '@grafana/ui';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { TemplatesTable } from '../receivers/TemplatesTable';\n\nexport const NotificationTemplates = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  if (error) {\n    return <Alert title=\"Failed to fetch notification templates\">{String(error)}</Alert>;\n  }\n\n  if (data) {\n    return <TemplatesTable config={data} alertManagerName={selectedAlertmanager!} />;\n  }\n\n  return null;\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { Stack } from '@grafana/experimental';\nimport { Button, Field, Icon, Input, useStyles2 } from '@grafana/ui';\n\nimport { useURLSearchParams } from '../../../hooks/useURLSearchParams';\n\nconst ContactPointsFilter = () => {\n  const styles = useStyles2(getStyles);\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n\n  const defaultValue = searchParams.get('search') ?? '';\n  const [searchValue, setSearchValue] = useState(defaultValue);\n\n  const [_, cancel] = useDebounce(\n    () => {\n      setSearchParams({ search: searchValue }, true);\n    },\n    300,\n    [setSearchParams, searchValue]\n  );\n\n  const clear = useCallback(() => {\n    cancel();\n    setSearchValue('');\n    setSearchParams({ search: '' }, true);\n  }, [cancel, setSearchParams]);\n\n  const hasInput = Boolean(defaultValue);\n\n  return (\n    <Stack direction=\"row\" alignItems=\"end\" gap={0.5}>\n      <Field className={styles.noBottom} label=\"Search by name or type\">\n        <Input\n          aria-label=\"search contact points\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchValue(event.currentTarget.value);\n          }}\n          value={searchValue}\n        />\n      </Field>\n      <Button variant=\"secondary\" icon=\"times\" onClick={() => clear()} disabled={!hasInput} aria-label=\"clear\">\n        Clear\n      </Button>\n    </Stack>\n  );\n};\n\nconst getStyles = () => ({\n  noBottom: css({\n    marginBottom: 0,\n  }),\n});\n\nexport { ContactPointsFilter };\n","import { Alert, LinkButton } from '@grafana/ui';\n\nimport { AlertmanagerAction } from '../../../hooks/useAbilities';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport { makeAMLink } from '../../../utils/misc';\nimport { Authorize } from '../../Authorize';\n\ninterface GlobalConfigAlertProps {\n  alertManagerName: string;\n}\n\nexport const GlobalConfigAlert = ({ alertManagerName }: GlobalConfigAlertProps) => {\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n\n  return (\n    <Authorize actions={[AlertmanagerAction.UpdateExternalConfiguration]}>\n      <Alert severity=\"info\" title=\"Global config for contact points\">\n        <p>\n          For each external Alertmanager you can define global settings, like server addresses, usernames and password,\n          for all the supported contact points.\n        </p>\n        <LinkButton href={makeAMLink('alerting/notifications/global-config', alertManagerName)} variant=\"secondary\">\n          {isVanillaAM ? 'View global config' : 'Edit global config'}\n        </LinkButton>\n      </Alert>\n    </Authorize>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { Button, Modal, ModalProps } from '@grafana/ui';\n\nimport { stringifyErrorLike } from '../../../utils/misc';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\n\n/**\n * This hook controls the delete modal for contact points, showing loading and error states when appropriate\n */\nexport const useDeleteContactPointModal = (\n  handleDelete: (name: string) => Promise<void>,\n  isLoading: boolean\n): ModalHook<string> => {\n  const [showModal, setShowModal] = useState(false);\n  const [contactPoint, setContactPoint] = useState<string>();\n  const [error, setError] = useState<unknown | undefined>();\n\n  const handleDismiss = useCallback(() => {\n    if (isLoading) {\n      return;\n    }\n\n    setContactPoint(undefined);\n    setShowModal(false);\n    setError(undefined);\n  }, [isLoading]);\n\n  const handleShow = useCallback((name: string) => {\n    setContactPoint(name);\n    setShowModal(true);\n    setError(undefined);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (contactPoint) {\n      handleDelete(contactPoint)\n        .then(() => setShowModal(false))\n        .catch(setError);\n    }\n  }, [handleDelete, contactPoint]);\n\n  const modalElement = useMemo(() => {\n    if (error) {\n      return <ErrorModal isOpen={showModal} onDismiss={handleDismiss} error={error} />;\n    }\n\n    return (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={!isLoading}\n        closeOnEscape={!isLoading}\n        title=\"Delete contact point\"\n      >\n        <p>Deleting this contact point will permanently remove it.</p>\n        <p>Are you sure you want to delete this contact point?</p>\n\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit} disabled={isLoading}>\n            {isLoading ? 'Deleting...' : 'Yes, delete contact point'}\n          </Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} disabled={isLoading}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    );\n  }, [error, handleDismiss, handleSubmit, isLoading, showModal]);\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\ninterface ErrorModalProps extends Pick<ModalProps, 'isOpen' | 'onDismiss'> {\n  error: unknown;\n}\nconst ErrorModal = ({ isOpen, onDismiss, error }: ErrorModalProps) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={onDismiss}\n    closeOnBackdropClick={true}\n    closeOnEscape={true}\n    title={'Something went wrong'}\n  >\n    <p>Failed to update your configuration:</p>\n    <p>\n      <pre>\n        <code>{stringifyErrorLike(error)}</code>\n      </pre>\n    </p>\n  </Modal>\n);\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { uniq } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { RECEIVER_META_KEY } from 'app/features/alerting/unified/components/contact-points/useContactPoints';\nimport { ContactPointWithMetadata } from 'app/features/alerting/unified/components/contact-points/utils';\n\nconst fuzzyFinder = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraDel: 1,\n  intraTrn: 1,\n});\n\n// let's search in two different haystacks, the name of the contact point and the type of the receiver(s)\nexport const useContactPointsSearch = (\n  contactPoints: ContactPointWithMetadata[],\n  search?: string | null\n): ContactPointWithMetadata[] => {\n  const nameHaystack = useMemo(() => {\n    return contactPoints.map((contactPoint) => contactPoint.name);\n  }, [contactPoints]);\n\n  const typeHaystack = useMemo(() => {\n    return contactPoints.map((contactPoint) =>\n      // we're using the resolved metadata key here instead of the \"type\" property – ex. we alias \"teams\" to \"microsoft teams\"\n      contactPoint.grafana_managed_receiver_configs.map((receiver) => receiver[RECEIVER_META_KEY].name).join(' ')\n    );\n  }, [contactPoints]);\n\n  if (!search) {\n    return contactPoints;\n  }\n\n  const nameHits = fuzzyFinder.filter(nameHaystack, search) ?? [];\n  const typeHits = fuzzyFinder.filter(typeHaystack, search) ?? [];\n\n  const hits = [...nameHits, ...typeHits];\n\n  return uniq(hits).map((id) => contactPoints[id]) ?? [];\n};\n","import { useMemo } from 'react';\n\nimport {\n  Alert,\n  Button,\n  LinkButton,\n  LoadingPlaceholder,\n  Pagination,\n  Stack,\n  Tab,\n  TabContent,\n  TabsBar,\n  Text,\n} from '@grafana/ui';\nimport { stringifyErrorLike } from 'app/features/alerting/unified/utils/misc';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { GrafanaAlertmanagerDeliveryWarning } from '../GrafanaAlertmanagerDeliveryWarning';\n\nimport { ContactPoint } from './ContactPoint';\nimport { NotificationTemplates } from './NotificationTemplates';\nimport { ContactPointsFilter } from './components/ContactPointsFilter';\nimport { GlobalConfigAlert } from './components/GlobalConfigAlert';\nimport { useDeleteContactPointModal } from './components/Modals';\nimport { useContactPointsWithStatus, useDeleteContactPoint } from './useContactPoints';\nimport { useContactPointsSearch } from './useContactPointsSearch';\nimport { ALL_CONTACT_POINTS, useExportContactPoint } from './useExportContactPoint';\nimport { ContactPointWithMetadata, isProvisioned } from './utils';\n\nexport enum ActiveTab {\n  ContactPoints = 'contact_points',\n  NotificationTemplates = 'templates',\n}\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nconst ContactPointsTab = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const [queryParams] = useURLSearchParams();\n\n  let { isLoading, error, contactPoints } = useContactPointsWithStatus();\n  const { deleteTrigger, updateAlertmanagerState } = useDeleteContactPoint(selectedAlertmanager!);\n  const [addContactPointSupported, addContactPointAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.CreateContactPoint\n  );\n  const [exportContactPointsSupported, exportContactPointsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportContactPoint\n  );\n\n  const [DeleteModal, showDeleteModal] = useDeleteContactPointModal(deleteTrigger, updateAlertmanagerState.isLoading);\n  const [ExportDrawer, showExportDrawer] = useExportContactPoint();\n\n  const search = queryParams.get('search');\n\n  if (error) {\n    // TODO fix this type casting, when error comes from \"getContactPointsStatus\" it probably won't be a SerializedError\n    return <Alert title=\"Failed to fetch contact points\">{stringifyErrorLike(error)}</Alert>;\n  }\n\n  if (isLoading) {\n    return <LoadingPlaceholder text=\"Loading...\" />;\n  }\n\n  const isGrafanaManagedAlertmanager = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n  return (\n    <>\n      {/* TODO we can add some additional info here with a ToggleTip */}\n      <Stack direction=\"row\" alignItems=\"end\" justifyContent=\"space-between\">\n        <ContactPointsFilter />\n\n        <Stack direction=\"row\" gap={1}>\n          {addContactPointSupported && (\n            <LinkButton\n              icon=\"plus\"\n              aria-label=\"add contact point\"\n              variant=\"primary\"\n              href=\"/alerting/notifications/receivers/new\"\n              disabled={!addContactPointAllowed}\n            >\n              Add contact point\n            </LinkButton>\n          )}\n          {exportContactPointsSupported && (\n            <Button\n              icon=\"download-alt\"\n              variant=\"secondary\"\n              aria-label=\"export all\"\n              disabled={!exportContactPointsAllowed}\n              onClick={() => showExportDrawer(ALL_CONTACT_POINTS)}\n            >\n              Export all\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n      <ContactPointsList\n        contactPoints={contactPoints}\n        search={search}\n        pageSize={DEFAULT_PAGE_SIZE}\n        onDelete={(name) => showDeleteModal(name)}\n        disabled={updateAlertmanagerState.isLoading}\n      />\n      {/* Grafana manager Alertmanager does not support global config, Mimir and Cortex do */}\n      {!isGrafanaManagedAlertmanager && <GlobalConfigAlert alertManagerName={selectedAlertmanager!} />}\n      {DeleteModal}\n      {ExportDrawer}\n    </>\n  );\n};\n\nconst NotificationTemplatesTab = () => {\n  const [createTemplateSupported, createTemplateAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.CreateNotificationTemplate\n  );\n\n  return (\n    <>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text variant=\"body\" color=\"secondary\">\n          Create notification templates to customize your notifications.\n        </Text>\n        {createTemplateSupported && (\n          <LinkButton\n            icon=\"plus\"\n            variant=\"primary\"\n            href=\"/alerting/notifications/templates/new\"\n            disabled={!createTemplateAllowed}\n          >\n            Add notification template\n          </LinkButton>\n        )}\n      </Stack>\n      <NotificationTemplates />\n    </>\n  );\n};\n\nconst useTabQueryParam = () => {\n  const [queryParams, setQueryParams] = useURLSearchParams();\n  const param = useMemo(() => {\n    const queryParam = queryParams.get('tab');\n\n    if (!queryParam || !Object.values(ActiveTab).map(String).includes(queryParam)) {\n      return ActiveTab.ContactPoints;\n    }\n\n    return queryParam || ActiveTab.ContactPoints;\n  }, [queryParams]);\n\n  const setParam = (tab: ActiveTab) => setQueryParams({ tab });\n\n  return [param, setParam] as const;\n};\n\nconst ContactPointsPageContents = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const [activeTab, setActiveTab] = useTabQueryParam();\n\n  let { contactPoints } = useContactPointsWithStatus();\n\n  const showingContactPoints = activeTab === ActiveTab.ContactPoints;\n  const showNotificationTemplates = activeTab === ActiveTab.NotificationTemplates;\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager!} />\n      <Stack direction=\"column\">\n        <TabsBar>\n          <Tab\n            label=\"Contact Points\"\n            active={showingContactPoints}\n            counter={contactPoints.length}\n            onChangeTab={() => setActiveTab(ActiveTab.ContactPoints)}\n          />\n          <Tab\n            label=\"Notification Templates\"\n            active={showNotificationTemplates}\n            onChangeTab={() => setActiveTab(ActiveTab.NotificationTemplates)}\n          />\n        </TabsBar>\n        <TabContent>\n          <Stack direction=\"column\">\n            {showingContactPoints && <ContactPointsTab />}\n            {showNotificationTemplates && <NotificationTemplatesTab />}\n          </Stack>\n        </TabContent>\n      </Stack>\n    </>\n  );\n};\n\ninterface ContactPointsListProps {\n  contactPoints: ContactPointWithMetadata[];\n  search?: string | null;\n  disabled?: boolean;\n  onDelete: (name: string) => void;\n  pageSize?: number;\n}\n\nconst ContactPointsList = ({\n  contactPoints,\n  disabled = false,\n  search,\n  pageSize = DEFAULT_PAGE_SIZE,\n  onDelete,\n}: ContactPointsListProps) => {\n  const searchResults = useContactPointsSearch(contactPoints, search);\n  const { page, pageItems, numberOfPages, onPageChange } = usePagination(searchResults, 1, pageSize);\n\n  return (\n    <>\n      {pageItems.map((contactPoint, index) => {\n        const provisioned = isProvisioned(contactPoint);\n        const policies = contactPoint.policies ?? [];\n        const key = `${contactPoint.name}-${index}`;\n\n        return (\n          <ContactPoint\n            key={key}\n            name={contactPoint.name}\n            disabled={disabled}\n            onDelete={onDelete}\n            receivers={contactPoint.grafana_managed_receiver_configs}\n            provisioned={provisioned}\n            policies={policies}\n          />\n        );\n      })}\n      <Pagination currentPage={page} numberOfPages={numberOfPages} onNavigate={onPageChange} hideWhenSinglePage />\n    </>\n  );\n};\n\nexport default ContactPointsPageContents;\n","import type { Monaco } from '@grafana/ui';\n\nimport { AlertmanagerTemplateFunction } from './language';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\nexport function getAlertManagerSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Function;\n  return [\n    {\n      label: AlertmanagerTemplateFunction.toUpper,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.toLower,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.title,\n      documentation: 'Capitalizes the first letter of each word',\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.join,\n      documentation: { value: 'Joins an array of strings using the separator provided.' },\n      detail: 'function(separator string, s []string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.match,\n      detail: 'function',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.safeHtml,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.reReplaceAll,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.stringSlice,\n      detail: 'function(s ...string)',\n      kind,\n    },\n  ];\n}\n","import { concat } from 'lodash';\nimport type { languages, editor, Position, IRange, IDisposable } from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport type { Monaco } from '@grafana/ui';\n\nimport { getAlertManagerSuggestions } from './alertManagerSuggestions';\nimport { SuggestionDefinition } from './suggestionDefinition';\nimport {\n  getAlertsSuggestions,\n  getAlertSuggestions,\n  getGlobalSuggestions,\n  getKeyValueSuggestions,\n  getSnippetsSuggestions,\n} from './templateDataSuggestions';\n\nexport function registerGoTemplateAutocomplete(monaco: Monaco): IDisposable {\n  const goTemplateAutocompleteProvider: languages.CompletionItemProvider = {\n    triggerCharacters: ['.'],\n    provideCompletionItems(model, position, context): languages.ProviderResult<languages.CompletionList> {\n      const word = model.getWordUntilPosition(position);\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: word.startColumn,\n        endColumn: word.endColumn,\n      };\n\n      const completionProvider = new CompletionProvider(monaco, range);\n\n      const insideExpression = isInsideGoExpression(model, position);\n      if (!insideExpression) {\n        return completionProvider.getSnippetsSuggestions();\n      }\n\n      if (context.triggerKind === monaco.languages.CompletionTriggerKind.Invoke && !context.triggerCharacter) {\n        return completionProvider.getFunctionsSuggestions();\n      }\n\n      const wordBeforeDot = model.getWordUntilPosition({\n        lineNumber: position.lineNumber,\n        column: position.column - 1,\n      });\n\n      return completionProvider.getTemplateDataSuggestions(wordBeforeDot.word);\n    },\n  };\n\n  return monaco.languages.registerCompletionItemProvider('go-template', goTemplateAutocompleteProvider);\n}\n\nfunction isInsideGoExpression(model: editor.ITextModel, position: Position) {\n  const searchRange = {\n    startLineNumber: position.lineNumber,\n    endLineNumber: position.lineNumber,\n    startColumn: model.getLineMinColumn(position.lineNumber),\n    endColumn: model.getLineMaxColumn(position.lineNumber),\n  };\n\n  const goSyntaxRegex = '\\\\{\\\\{[a-zA-Z0-9._() \"]+\\\\}\\\\}';\n  const matches = model.findMatches(goSyntaxRegex, searchRange, true, false, null, true);\n\n  return matches.some((match) => match.range.containsPosition(position));\n}\n\nexport class CompletionProvider {\n  constructor(\n    private readonly monaco: Monaco,\n    private readonly range: IRange\n  ) {}\n\n  getSnippetsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getSnippetsSuggestions(this.monaco));\n  };\n\n  getFunctionsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getAlertManagerSuggestions(this.monaco));\n  };\n\n  getTemplateDataSuggestions = (wordContext: string): languages.ProviderResult<languages.CompletionList> => {\n    switch (wordContext) {\n      case '':\n        return this.getCompletionsFromDefinitions(getGlobalSuggestions(this.monaco), getAlertSuggestions(this.monaco));\n      case 'Alerts':\n        return this.getCompletionsFromDefinitions(getAlertsSuggestions(this.monaco));\n      case 'GroupLabels':\n      case 'CommonLabels':\n      case 'CommonAnnotations':\n      case 'Labels':\n      case 'Annotations':\n        return this.getCompletionsFromDefinitions(getKeyValueSuggestions(this.monaco));\n      default:\n        return { suggestions: [] };\n    }\n  };\n\n  private getCompletionsFromDefinitions = (...args: SuggestionDefinition[][]): languages.CompletionList => {\n    const allDefinitions = concat(...args);\n\n    return {\n      suggestions: allDefinitions.map((definition) => buildAutocompleteSuggestion(definition, this.range)),\n    };\n  };\n}\n\nfunction buildAutocompleteSuggestion(\n  { label, detail, documentation, kind, insertText }: SuggestionDefinition,\n  range: IRange\n): languages.CompletionItem {\n  const insertFallback = typeof label === 'string' ? label : label.label;\n  const labelObject = typeof label === 'string' ? { label: label, description: detail } : { ...label };\n\n  labelObject.description ??= detail;\n\n  return {\n    label: labelObject,\n    kind: kind,\n    insertText: insertText ?? insertFallback,\n    range,\n    documentation: documentation,\n    detail: detail,\n  };\n}\n","import { LanguageDefinition } from './register';\n\nexport const GO_TEMPLATE_LANGUAGE_ID = 'go-template';\n\nconst goTemplateLanguageDefinition: LanguageDefinition = {\n  id: GO_TEMPLATE_LANGUAGE_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default goTemplateLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition\n  // completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    // monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","/**\n * This file contains the template editor we'll be using for alertmanager templates.\n *\n * It includes auto-complete for template data and syntax highlighting\n */\nimport { editor, IDisposable } from 'monaco-editor';\nimport { useEffect, useRef } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\nimport { CodeEditorProps } from '@grafana/ui/src/components/Monaco/types';\n\nimport { registerGoTemplateAutocomplete } from './editor/autocomplete';\nimport goTemplateLanguageDefinition, { GO_TEMPLATE_LANGUAGE_ID } from './editor/definition';\nimport { registerLanguage } from './editor/register';\n\ntype TemplateEditorProps = Omit<CodeEditorProps, 'language' | 'theme'> & {\n  autoHeight?: boolean;\n};\n\nconst TemplateEditor = (props: TemplateEditorProps) => {\n  const shouldAutoHeight = Boolean(props.autoHeight);\n  const disposeSuggestions = useRef<IDisposable | null>(null);\n\n  const onEditorDidMount = (editor: editor.IStandaloneCodeEditor) => {\n    if (shouldAutoHeight) {\n      const contentHeight = editor.getContentHeight();\n\n      try {\n        // we're passing NaN in to the width because the type definition wants a number (NaN is a number, go figure)\n        // but the width could be defined as a string \"auto\", passing NaN seems to just ignore our width update here\n        editor.layout({ height: contentHeight, width: NaN });\n      } catch (err) {}\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      disposeSuggestions.current?.dispose();\n    };\n  }, []);\n\n  return (\n    <CodeEditor\n      showLineNumbers={true}\n      showMiniMap={false}\n      {...props}\n      monacoOptions={{\n        scrollBeyondLastLine: false,\n      }}\n      onEditorDidMount={onEditorDidMount}\n      onBeforeEditorMount={(monaco) => {\n        registerLanguage(monaco, goTemplateLanguageDefinition);\n        disposeSuggestions.current = registerGoTemplateAutocomplete(monaco);\n      }}\n      language={GO_TEMPLATE_LANGUAGE_ID}\n    />\n  );\n};\n\nexport { TemplateEditor };\n","export const alertsLoopSnippet = `\n{{ range .Alerts }}\n  Status: {{ .Status }}\n  Starts at: {{ .StartsAt }}\n{{ end }}\n`;\n\nexport const alertDetailsSnippet = `\n[{{.Status}}] {{ .Labels.alertname }}\n\nLabels:\n{{ range .Labels.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n\n{{ if gt (len .Annotations) 0 }}\nAnnotations:\n{{ range .Annotations.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n{{ end }}\n\n{{ if gt (len .SilenceURL ) 0 }}\n  Silence alert: {{ .SilenceURL }}\n{{ end }}\n{{ if gt (len .DashboardURL ) 0 }}\n  Go to dashboard: {{ .DashboardURL }}\n{{ end }}\n`;\n\nexport const groupLabelsLoopSnippet = getKeyValueTemplate('GroupLabels.SortedPairs');\nexport const commonLabelsLoopSnippet = getKeyValueTemplate('CommonLabels.SortedPairs');\nexport const commonAnnotationsLoopSnippet = getKeyValueTemplate('CommonAnnotations.SortedPairs');\nexport const labelsLoopSnippet = getKeyValueTemplate('Labels.SortedPairs');\nexport const annotationsLoopSnippet = getKeyValueTemplate('Annotations.SortedPairs');\n\nfunction getKeyValueTemplate(arrayName: string) {\n  return `\n{{ range .${arrayName} }}\n  {{ .Name }} = {{ .Value }}\n{{ end }}`;\n}\n","import type { Monaco } from '@grafana/ui';\n\nimport {\n  alertDetailsSnippet,\n  alertsLoopSnippet,\n  annotationsLoopSnippet,\n  commonAnnotationsLoopSnippet,\n  commonLabelsLoopSnippet,\n  groupLabelsLoopSnippet,\n  labelsLoopSnippet,\n} from './snippets';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\n// Suggestions available at the top level of a template\nexport function getGlobalSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: 'Alerts',\n      kind,\n      detail: 'Alert[]',\n      documentation: { value: 'An Array containing all alerts' },\n    },\n    { label: 'Receiver', kind, detail: 'string' },\n    { label: 'Status', kind, detail: 'string' },\n    { label: 'GroupLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonAnnotations', kind, detail: '[]KeyValue' },\n    { label: 'ExternalURL', kind, detail: 'string' },\n  ];\n}\n\n// Suggestions that are valid only in the scope of an alert (e.g. in the .Alerts loop)\nexport function getAlertSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: { label: 'Status', detail: '(Alert)', description: 'string' },\n      kind,\n      detail: 'string',\n      documentation: { value: 'Status of the alert. It can be `firing` or `resolved`' },\n    },\n    {\n      label: { label: 'Labels', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: { value: 'A set of labels attached to the alert.' },\n    },\n    {\n      label: { label: 'Annotations', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: 'A set of annotations attached to the alert.',\n    },\n    {\n      label: { label: 'StartsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation: 'Time the alert started firing.',\n    },\n    {\n      label: { label: 'EndsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation:\n        'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n    },\n    {\n      label: { label: 'GeneratorURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Back link to Grafana or external Alertmanager.',\n    },\n    {\n      label: { label: 'SilenceURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation:\n        'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'DashboardURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'PanelURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'Fingerprint', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Fingerprint that can be used to identify the alert.',\n    },\n    {\n      label: { label: 'ValueString', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'String that contains labels and values of each reduced expression in the alert.',\n    },\n  ];\n}\n\n// Suggestions for .Alerts\nexport function getAlertsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'Firing', kind, detail: 'Alert[]' },\n    { label: 'Resolved', kind, detail: 'Alert[]' },\n  ];\n}\n\n// Suggestions for the KeyValue types\nexport function getKeyValueSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'SortedPairs', kind, detail: '[]KeyValue' },\n    { label: 'Names', kind, detail: '[]string' },\n    { label: 'Values', kind, detail: '[]string' },\n    {\n      label: 'Remove',\n      detail: 'KeyValue[] function(keys []string)',\n      kind: monaco.languages.CompletionItemKind.Method,\n    },\n  ];\n}\n\nexport const snippets = {\n  alerts: {\n    label: 'alertsloop',\n    description: 'Renders a loop through alerts',\n    snippet: alertsLoopSnippet,\n  },\n  alertDetails: {\n    label: 'alertdetails',\n    description: 'Renders all information available about the alert',\n    snippet: alertDetailsSnippet,\n  },\n  groupLabels: {\n    label: 'grouplabelsloop',\n    description: 'Renders a loop through group labels',\n    snippet: groupLabelsLoopSnippet,\n  },\n  commonLabels: {\n    label: 'commonlabelsloop',\n    description: 'Renders a loop through common labels',\n    snippet: commonLabelsLoopSnippet,\n  },\n  commonAnnotations: {\n    label: 'commonannotationsloop',\n    description: 'Renders a loop through common annotations',\n    snippet: commonAnnotationsLoopSnippet,\n  },\n  labels: {\n    label: 'labelsloop',\n    description: 'Renders a loop through labels',\n    snippet: labelsLoopSnippet,\n  },\n  annotations: {\n    label: 'annotationsloop',\n    description: 'Renders a loop through annotations',\n    snippet: annotationsLoopSnippet,\n  },\n};\n\n// Snippets\nexport function getSnippetsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const snippetKind = monaco.languages.CompletionItemKind.Snippet;\n  const snippetInsertRule = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n\n  const { alerts, alertDetails, groupLabels, commonLabels, commonAnnotations, labels, annotations } = snippets;\n\n  return [\n    {\n      label: alerts.label,\n      documentation: alerts.description,\n      kind: snippetKind,\n      insertText: alerts.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: {\n        label: alertDetails.label,\n        detail: '(Alert)',\n      },\n      documentation: alertDetails.description,\n      kind: snippetKind,\n      insertText: alertDetails.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: groupLabels.label,\n      documentation: groupLabels.description,\n      kind: snippetKind,\n      insertText: groupLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonLabels.label,\n      documentation: commonLabels.description,\n      kind: snippetKind,\n      insertText: commonLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonAnnotations.label,\n      documentation: commonAnnotations.description,\n      kind: snippetKind,\n      insertText: commonAnnotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: labels.label, detail: '(Alert)' },\n      documentation: labels.description,\n      kind: snippetKind,\n      insertText: labels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: annotations.label, detail: '(Alert)' },\n      documentation: annotations.description,\n      kind: snippetKind,\n      insertText: annotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n  ];\n}\n","import { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    // we'll disable cache by default to prevent overwriting other changes made since last fetch\n    refetchOnMountOrArgChange: true,\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    backgroundColor: theme.colors.background.secondary,\n\n    th: {\n      padding: theme.spacing(1),\n    },\n\n    td: {\n      padding: `0 ${theme.spacing(1)}`,\n    },\n\n    tr: {\n      height: '38px',\n    },\n  }),\n  evenRow: css({\n    backgroundColor: theme.colors.background.primary,\n  }),\n  colExpand: css({\n    width: '36px',\n  }),\n  nameCell: css({\n    gap: theme.spacing(1),\n  }),\n  actionsCell: css({\n    textAlign: 'right',\n    width: '1%',\n    whiteSpace: 'nowrap',\n\n    '& > * + *': {\n      marginLeft: theme.spacing(0.5),\n    },\n  }),\n});\n"],"names":["Authorize","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","GrafanaAlertmanagerDeliveryWarning","currentAlertmanager","styles","getStyles","externalAlertmanager","readConfigurationStatusSupported","readConfigurationStatusAllowed","canReadConfigurationStatus","amChoiceStatus","hasActiveExternalAMs","theme","TemplatesTable","config","alertManagerName","dispatch","expandedTemplates","setExpandedTemplates","tableStyles","templateRows","name","template","templateToDelete","setTemplateToDelete","deleteTemplate","provenance","idx","isExpanded","Fragment","CollapseToggle","Provisioning","ActionIcon","DetailsField","TemplateEditor","ConfirmModal","NotificationTemplates","selectedAlertmanager","data","error","useAlertmanagerConfig","Alert","ContactPointsFilter","searchParams","setSearchParams","useURLSearchParams","defaultValue","searchValue","setSearchValue","_","cancel","useDebounce","clear","hasInput","Field","Input","Icon","event","Button","GlobalConfigAlert","isVanillaAM","useDeleteContactPointModal","handleDelete","isLoading","showModal","setShowModal","contactPoint","setContactPoint","setError","handleDismiss","handleShow","handleSubmit","ErrorModal","Modal","isOpen","onDismiss","fuzzyFinder","useContactPointsSearch","contactPoints","search","nameHaystack","typeHaystack","receiver","nameHits","typeHits","hits","id","ActiveTab","DEFAULT_PAGE_SIZE","ContactPointsTab","queryParams","useContactPoints","deleteTrigger","updateAlertmanagerState","addContactPointSupported","addContactPointAllowed","exportContactPointsSupported","exportContactPointsAllowed","DeleteModal","showDeleteModal","ExportDrawer","showExportDrawer","useExportContactPoint","LoadingPlaceholder","isGrafanaManagedAlertmanager","Stack","ContactPointsList","NotificationTemplatesTab","createTemplateSupported","createTemplateAllowed","Text","useTabQueryParam","setQueryParams","queryParam","tab","ContactPointsPageContents","activeTab","setActiveTab","showingContactPoints","showNotificationTemplates","TabsBar","Tab","TabContent","disabled","pageSize","onDelete","searchResults","page","pageItems","numberOfPages","onPageChange","usePagination","index","provisioned","policies","key","ContactPoint","Pagination","getAlertManagerSuggestions","monaco","kind","registerGoTemplateAutocomplete","goTemplateAutocompleteProvider","model","position","context","word","range","completionProvider","CompletionProvider","isInsideGoExpression","wordBeforeDot","searchRange","match","wordContext","args","definition","buildAutocompleteSuggestion","label","detail","documentation","insertText","insertFallback","labelObject","GO_TEMPLATE_LANGUAGE_ID","registerLanguage","language","loader","l","monarch","props","shouldAutoHeight","disposeSuggestions","onEditorDidMount","editor","contentHeight","CodeEditor","alertsLoopSnippet","alertDetailsSnippet","groupLabelsLoopSnippet","getKeyValueTemplate","commonLabelsLoopSnippet","commonAnnotationsLoopSnippet","labelsLoopSnippet","annotationsLoopSnippet","arrayName","getGlobalSuggestions","getAlertSuggestions","getAlertsSuggestions","getKeyValueSuggestions","snippets","getSnippetsSuggestions","snippetKind","snippetInsertRule","alerts","alertDetails","groupLabels","commonLabels","commonAnnotations","labels","annotations","tooltip","icon","to","target","onClick","className","tooltipPlacement","rest","ariaLabel","amSourceName","options","fetchConfig","getAlertTableStyles"],"sourceRoot":""}