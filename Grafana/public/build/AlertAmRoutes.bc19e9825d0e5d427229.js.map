{"version":3,"file":"AlertAmRoutes.bc19e9825d0e5d427229.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaMuteTimingsExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Filters.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/grafanaApp.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/AlertGroupsSummary.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditDefaultPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditNotificationPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaPoliciesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Policy.tsx","webpack://grafana/./public/app/features/alerting/unified/NotificationPolicies.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/ConditionalWrap.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/notifications.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupHeader.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/common/TextVariants.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/util.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/routeTimingsFields.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/timingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/types/contact-points.ts","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts","webpack://grafana/./public/app/features/alerting/unified/utils/routeTree.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { css } from '@emotion/css';\nimport { ButtonHTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}: EmptyAreaWithCTAProps) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n    text: css({\n      marginBottom: theme.spacing(2),\n    }),\n    button: css({\n      margin: theme.spacing(2, 0, 1),\n    }),\n  };\n};\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface MuteTimingsExporterPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaMuteTimingsExporterPreview = ({ exportFormat, onClose }: MuteTimingsExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingsQuery({\n    format: exportFormat,\n  });\n  const downloadFileName = `mute-timings-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaMuteTimingExporterPreviewProps extends MuteTimingsExporterPreviewProps {\n  muteTimingName: string;\n}\nconst GrafanaMuteTimingExporterPreview = ({\n  exportFormat,\n  onClose,\n  muteTimingName,\n}: GrafanaMuteTimingExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingQuery({\n    format: exportFormat,\n    muteTiming: muteTimingName,\n  });\n  const downloadFileName = `mute-timing-${muteTimingName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\ninterface GrafanaMuteTimingsExporterProps {\n  onClose: () => void;\n  muteTimingName?: string;\n}\n\nexport const GrafanaMuteTimingsExporter = ({ onClose, muteTimingName }: GrafanaMuteTimingsExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      {muteTimingName ? (\n        <GrafanaMuteTimingExporterPreview exportFormat={activeTab} onClose={onClose} muteTimingName={muteTimingName} />\n      ) : (\n        <GrafanaMuteTimingsExporterPreview exportFormat={activeTab} onClose={onClose} />\n      )}\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Button, ConfirmModal, IconButton, Link, LinkButton, Menu, Stack, useStyles2 } from '@grafana/ui';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types/store';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { isDisabled } from '../../utils/mute-timings';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { GrafanaMuteTimingsExporter } from '../export/GrafanaMuteTimingsExporter';\n\nimport { mergeTimeIntervals, renderTimeIntervals } from './util';\n\nconst ALL_MUTE_TIMINGS = Symbol('all mute timings');\n\ntype ExportProps = [JSX.Element | null, (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void];\n\nconst useExportMuteTiming = (): ExportProps => {\n  const [muteTimingName, setMuteTimingName] = useState<string | typeof ALL_MUTE_TIMINGS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n\n  const handleClose = useCallback(() => {\n    setMuteTimingName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (receiverName: string | typeof ALL_MUTE_TIMINGS) => {\n    setMuteTimingName(receiverName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!muteTimingName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (muteTimingName === ALL_MUTE_TIMINGS) {\n      // use this drawer when we want to export all mute timings\n      return <GrafanaMuteTimingsExporter onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single mute timing\n      return <GrafanaMuteTimingsExporter muteTimingName={muteTimingName} onClose={handleClose} />;\n    }\n  }, [isExportDrawerOpen, handleClose, muteTimingName]);\n\n  return [drawer, handleOpen];\n};\n\ninterface MuteTimingsTableProps {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable = ({ alertManagerSourceName, muteTimingNames, hideActions }: MuteTimingsTableProps) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const { currentData } = useAlertmanagerConfig(alertManagerSourceName, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n  const config = currentData?.alertmanager_config;\n\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    // merge both fields mute_time_intervals and time_intervals to support both old and new config\n    const muteTimings = config ? mergeTimeIntervals(config) : [];\n    const muteTimingsProvenances = config?.muteTimeProvenances ?? {};\n\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: {\n            ...mute,\n            provenance: muteTimingsProvenances[mute.name],\n          },\n        };\n      });\n  }, [muteTimingNames, config]);\n\n  const [_, allowedToCreateMuteTiming] = useAlertmanagerAbility(AlertmanagerAction.CreateMuteTiming);\n\n  const [ExportDrawer, showExportDrawer] = useExportMuteTiming();\n  const [exportMuteTimingsSupported, exportMuteTimingsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportMuteTimings\n  );\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName, showExportDrawer);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span>\n          Enter specific time intervals when not to send notifications or freeze notifications for recurring periods of\n          time.\n        </span>\n        <Spacer />\n        {!hideActions && items.length > 0 && (\n          <Authorize actions={[AlertmanagerAction.CreateMuteTiming]}>\n            <LinkButton\n              className={styles.muteTimingsButtons}\n              icon=\"plus\"\n              variant=\"primary\"\n              href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n            >\n              Add mute timing\n            </LinkButton>\n          </Authorize>\n        )}\n        {exportMuteTimingsSupported && (\n          <Button\n            icon=\"download-alt\"\n            className={styles.muteTimingsButtons}\n            variant=\"secondary\"\n            aria-label=\"export all\"\n            disabled={!exportMuteTimingsAllowed}\n            onClick={() => showExportDrawer(ALL_MUTE_TIMINGS)}\n          >\n            Export all\n          </Button>\n        )}\n      </Stack>\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} pagination={{ itemsPerPage: 25 }} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={allowedToCreateMuteTiming}\n        />\n      ) : (\n        <EmptyAreaWithCTA text=\"No mute timings configured\" buttonLabel={''} showButton={false} />\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => {\n            dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName));\n            setMuteTimingName('');\n          }}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n      {ExportDrawer}\n    </div>\n  );\n};\n\nfunction useColumns(\n  alertManagerSourceName: string,\n  hideActions = false,\n  setMuteTimingName: (name: string) => void,\n  openExportDrawer: (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void\n) {\n  const [[_editSupported, allowedToEdit], [_deleteSupported, allowedToDelete]] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateMuteTiming,\n    AlertmanagerAction.DeleteMuteTiming,\n  ]);\n  const showActions = !hideActions && (allowedToEdit || allowedToDelete);\n\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportMuteTimings);\n  const styles = useStyles2(getStyles);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <>\n              {data.name} {data.provenance && <ProvisioningBadge />}\n            </>\n          );\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => {\n          return renderTimeIntervals(data);\n        },\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: '',\n        renderCell: function renderActions({ data }) {\n          return (\n            <ActionsAndBadge\n              muteTiming={data}\n              alertManagerSourceName={alertManagerSourceName}\n              setMuteTimingName={setMuteTimingName}\n            />\n          );\n        },\n        size: '150px',\n        className: styles.actionsColumn,\n      });\n    }\n    if (exportSupported) {\n      columns.push({\n        id: 'actions',\n        label: '',\n        renderCell: function renderActions({ data }) {\n          return (\n            <div>\n              <Menu.Item\n                icon=\"download-alt\"\n                label=\"Export\"\n                ariaLabel=\"export\"\n                disabled={!exportAllowed}\n                data-testid=\"export\"\n                onClick={() => openExportDrawer(data.name)}\n              />\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [\n    alertManagerSourceName,\n    setMuteTimingName,\n    showActions,\n    exportSupported,\n    exportAllowed,\n    openExportDrawer,\n    styles.actionsColumn,\n  ]);\n}\n\ninterface ActionsAndBadgeProps {\n  muteTiming: MuteTimeInterval;\n  alertManagerSourceName: string;\n  setMuteTimingName: (name: string) => void;\n}\n\nfunction ActionsAndBadge({ muteTiming, alertManagerSourceName, setMuteTimingName }: ActionsAndBadgeProps) {\n  const styles = useStyles2(getStyles);\n  const isGrafanaDataSource = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  if (muteTiming.provenance) {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n        {isDisabled(muteTiming) && !isGrafanaDataSource && (\n          <Badge text=\"Disabled\" color=\"orange\" className={styles.disabledBadge} />\n        )}\n        <Link\n          href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n            muteName: muteTiming.name,\n          })}\n        >\n          <IconButton name=\"file-alt\" tooltip=\"View mute timing\" />\n        </Link>\n      </Stack>\n    );\n  }\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n      {isDisabled(muteTiming) && !isGrafanaDataSource && (\n        <Badge text=\"Disabled\" color=\"orange\" className={styles.disabledBadge} />\n      )}\n      <Authorize actions={[AlertmanagerAction.UpdateMuteTiming]}>\n        <Link\n          href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n            muteName: muteTiming.name,\n          })}\n        >\n          <IconButton name=\"edit\" tooltip=\"Edit mute timing\" className={styles.editButton} />\n        </Link>\n      </Authorize>\n      <Authorize actions={[AlertmanagerAction.DeleteMuteTiming]}>\n        <IconButton name=\"trash-alt\" tooltip=\"Delete mute timing\" onClick={() => setMuteTimingName(muteTiming.name)} />\n      </Authorize>\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexFlow: 'column nowrap',\n  }),\n  muteTimingsButtons: css({\n    marginBottom: theme.spacing(2),\n    alignSelf: 'flex-end',\n  }),\n  disabledBadge: css({\n    height: 'fit-content',\n  }),\n  editButton: css({\n    display: 'flex',\n  }),\n  actionsColumn: css({\n    justifyContent: 'flex-end',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { debounce, isEqual } from 'lodash';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, Select, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { ObjectMatcher, Receiver, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { matcherToObjectMatcher } from '../../utils/alertmanager';\nimport {\n  normalizeMatchers,\n  parsePromQLStyleMatcherLoose,\n  parsePromQLStyleMatcherLooseSafe,\n} from '../../utils/matchers';\n\ninterface NotificationPoliciesFilterProps {\n  receivers: Receiver[];\n  onChangeMatchers: (labels: ObjectMatcher[]) => void;\n  onChangeReceiver: (receiver: string | undefined) => void;\n  matchingCount: number;\n}\n\nconst NotificationPoliciesFilter = ({\n  receivers,\n  onChangeReceiver,\n  onChangeMatchers,\n  matchingCount,\n}: NotificationPoliciesFilterProps) => {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n  const styles = useStyles2(getStyles);\n\n  const handleChangeLabels = useCallback(() => debounce(onChangeMatchers, 500), [onChangeMatchers]);\n\n  useEffect(() => {\n    onChangeReceiver(contactPoint);\n  }, [contactPoint, onChangeReceiver]);\n\n  useEffect(() => {\n    const matchers = parsePromQLStyleMatcherLooseSafe(queryString ?? '').map(matcherToObjectMatcher);\n    handleChangeLabels()(matchers);\n  }, [handleChangeLabels, queryString]);\n\n  const clearFilters = useCallback(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.value = '';\n    }\n    setSearchParams({ contactPoint: undefined, queryString: undefined });\n  }, [setSearchParams]);\n\n  const receiverOptions: Array<SelectableValue<string>> = receivers.map(toOption);\n  const selectedContactPoint = receiverOptions.find((option) => option.value === contactPoint) ?? null;\n\n  const hasFilters = queryString || contactPoint;\n\n  let inputValid = Boolean(queryString && queryString.length > 3);\n  try {\n    if (!queryString) {\n      inputValid = true;\n    } else {\n      parsePromQLStyleMatcherLoose(queryString);\n    }\n  } catch (err) {\n    inputValid = false;\n  }\n\n  return (\n    <Stack direction=\"row\" alignItems=\"flex-end\" gap={1}>\n      <Field\n        className={styles.noBottom}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter notification policies by using a comma separated list of matchers, e.g.:\n                    <pre>severity=critical, region=EMEA</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={!inputValid}\n        error={!inputValid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          ref={searchInputRef}\n          data-testid=\"search-query-input\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchParams({ queryString: event.currentTarget.value });\n          }}\n          defaultValue={queryString}\n        />\n      </Field>\n      <Field label=\"Search by contact point\" style={{ marginBottom: 0 }}>\n        <Select\n          id=\"receiver\"\n          aria-label=\"Search by contact point\"\n          value={selectedContactPoint}\n          options={receiverOptions}\n          onChange={(option) => {\n            setSearchParams({ contactPoint: option?.value });\n          }}\n          width={28}\n          isClearable\n        />\n      </Field>\n      {hasFilters && (\n        <Stack alignItems=\"center\">\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {matchingCount === 0 && 'No policies matching filters.'}\n            {matchingCount === 1 && `${matchingCount} policy matches the filters.`}\n            {matchingCount > 1 && `${matchingCount} policies match the filters.`}\n          </Text>\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n\n/**\n * Find a list of route IDs that match given input filters\n */\ntype FilterPredicate = (route: RouteWithID) => boolean;\n\n/**\n * Find routes int the tree that match the given predicate function\n * @param routeTree the route tree to search\n * @param predicateFn the predicate function to match routes\n * @returns\n * - matches: list of routes that match the predicate\n * - matchingRouteIdsWithPath: map with routeids that are part of the path of a matching route\n *  key is the route id, value is an array of route ids that are part of its path\n */\nexport function findRoutesMatchingPredicate(\n  routeTree: RouteWithID,\n  predicateFn: FilterPredicate\n): Map<RouteWithID, RouteWithID[]> {\n  // map with routids that are part of the path of a matching route\n  // key is the route id, value is an array of route ids that are part of the path\n  const matchingRouteIdsWithPath = new Map<RouteWithID, RouteWithID[]>();\n\n  function findMatch(route: RouteWithID, path: RouteWithID[]) {\n    const newPath = [...path, route];\n\n    if (predicateFn(route)) {\n      // if the route matches the predicate, we need to add the path to the map of matching routes\n      const previousPath = matchingRouteIdsWithPath.get(route) ?? [];\n      // add the current route id to the map with its path\n      matchingRouteIdsWithPath.set(route, [...previousPath, ...newPath]);\n    }\n\n    // if the route has subroutes, call findMatch recursively\n    route.routes?.forEach((route) => findMatch(route, newPath));\n  }\n\n  findMatch(routeTree, []);\n\n  return matchingRouteIdsWithPath;\n}\n\nexport function findRoutesByMatchers(route: RouteWithID, labelMatchersFilter: ObjectMatcher[]): boolean {\n  const routeMatchers = normalizeMatchers(route);\n\n  return labelMatchersFilter.every((filter) => routeMatchers.some((matcher) => isEqual(filter, matcher)));\n}\n\nconst toOption = (receiver: Receiver) => ({\n  label: receiver.name,\n  value: receiver.name,\n});\n\nconst getNotificationPoliciesFilters = (searchParams: URLSearchParams) => ({\n  queryString: searchParams.get('queryString') ?? undefined,\n  contactPoint: searchParams.get('contactPoint') ?? undefined,\n});\n\nconst getStyles = () => ({\n  noBottom: css({\n    marginBottom: 0,\n  }),\n});\n\nexport { NotificationPoliciesFilter };\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { onCallApi } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { isOnCallReceiver } from './onCall/onCall';\nimport { AmRouteReceiver } from './types';\n\nexport const useGetGrafanaReceiverTypeChecker = () => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data } = onCallApi.useGrafanaOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n  const getGrafanaReceiverType = (receiver: Receiver): SupportedPlugin | undefined => {\n    //CHECK FOR ONCALL PLUGIN\n    const onCallIntegrations = data ?? [];\n    if (isOnCallEnabled && isOnCallReceiver(receiver, onCallIntegrations)) {\n      return SupportedPlugin.OnCall;\n    }\n    //WE WILL ADD IN HERE IF THERE ARE MORE TYPES TO CHECK\n    return undefined;\n  };\n\n  return getGrafanaReceiverType;\n};\n\nexport const useGetAmRouteReceiverWithGrafanaAppTypes = (receivers: Receiver[]) => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  const receiverToSelectableContactPointValue = (receiver: Receiver): AmRouteReceiver => {\n    const amRouteReceiverValue: AmRouteReceiver = {\n      label: receiver.name,\n      value: receiver.name,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n    return amRouteReceiverValue;\n  };\n\n  return receivers.map(receiverToSelectableContactPointValue);\n};\n","import pluralize from 'pluralize';\nimport { Fragment } from 'react';\nimport * as React from 'react';\n\nimport { Badge, Stack } from '@grafana/ui';\n\ninterface Props {\n  active?: number;\n  suppressed?: number;\n  unprocessed?: number;\n}\n\nexport const AlertGroupsSummary = ({ active = 0, suppressed = 0, unprocessed = 0 }: Props) => {\n  const statsComponents: React.ReactNode[] = [];\n  const total = active + suppressed + unprocessed;\n\n  if (active) {\n    statsComponents.push(<Badge color=\"red\" key=\"firing\" text={`${active} firing`} />);\n  }\n\n  if (suppressed) {\n    statsComponents.push(<Badge color=\"blue\" key=\"suppressed\" text={`${suppressed} suppressed`} />);\n  }\n\n  if (unprocessed) {\n    statsComponents.push(<Badge color=\"orange\" key=\"unprocessed\" text={`${unprocessed} unprocessed`} />);\n  }\n\n  // if we only have one category it's not really necessary to repeat the total\n  if (statsComponents.length > 1) {\n    statsComponents.unshift(\n      <Fragment key=\"total\">\n        {total} {pluralize('instance', total)}\n      </Fragment>\n    );\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return hasStats ? <Stack gap={0.5}>{statsComponents}</Stack> : null;\n};\n","import { ReactNode, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nimport { Collapse, Field, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringsToSelectableValues,\n  stringToSelectableValue,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  actionButtons: ReactNode;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  route: RouteWithID;\n}\n\nexport const AmRootRouteForm = ({\n  actionButtons,\n  alertManagerSourceName,\n  onSubmit,\n  receivers,\n  route,\n}: AmRootRouteFormProps) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route.group_by));\n\n  const defaultValues = amRouteToFormAmRoute(route);\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues: {\n      ...defaultValues,\n      overrideTimings: true,\n      overrideGrouping: true,\n    },\n  });\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n        <>\n          <div className={styles.container} data-testid=\"am-receiver-select\">\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Default contact point\"\n                  {...field}\n                  className={styles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n              rules={{ required: { value: true, message: 'Required.' } }}\n            />\n            <span>or</span>\n            <Link\n              className={styles.linkText}\n              href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n            >\n              Create a contact point\n            </Link>\n          </div>\n        </>\n      </Field>\n      <Field\n        label=\"Group by\"\n        description=\"Combine multiple alerts into a single notification by grouping them by the same label values.\"\n        data-testid=\"am-group-select\"\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label=\"Group by\"\n              {...field}\n              allowCustomValue\n              className={styles.input}\n              onCreateOption={(opt: string) => {\n                setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                setValue('groupBy', [...(field.value || []), opt]);\n              }}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={[...commonGroupByOptions, ...groupByOptions]}\n            />\n          )}\n          control={control}\n          name=\"groupBy\"\n        />\n      </Field>\n      <Collapse\n        collapsible\n        className={styles.collapse}\n        isOpen={isTimingOptionsExpanded}\n        label=\"Timing options\"\n        onToggle={setIsTimingOptionsExpanded}\n      >\n        <div className={styles.timingFormContainer}>\n          <Field\n            label=\"Group wait\"\n            description=\"The waiting time before sending the first notification for a new group of alerts. Default 30 seconds.\"\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n            data-testid=\"am-group-wait\"\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n              className={styles.promDurationInput}\n              aria-label=\"Group wait\"\n            />\n          </Field>\n          <Field\n            label=\"Group interval\"\n            description=\"The wait time before sending a notification about changes in the alert group after the first notification has been sent. Default is 5 minutes.\"\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n            data-testid=\"am-group-interval\"\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Group interval\"\n            />\n          </Field>\n          <Field\n            label=\"Repeat interval\"\n            description=\"The wait time before resending a notification that has already been sent successfully. Default is 4 hours. Should be a multiple of Group interval.\"\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n            data-testid=\"am-repeat-interval\"\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value: string) => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Repeat interval\"\n            />\n          </Field>\n        </div>\n      </Collapse>\n      <div className={styles.container}>{actionButtons}</div>\n    </form>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { mergeTimeIntervals } from '../components/mute-timings/util';\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { timeIntervalToString } from '../utils/alertmanager';\n\nimport { useAlertmanagerConfig } from './useAlertmanagerConfig';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { currentData } = useAlertmanagerConfig(selectedAlertmanager);\n  const config = currentData?.alertmanager_config;\n\n  return useMemo(() => {\n    const time_intervals = config ? mergeTimeIntervals(config) : [];\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [config]);\n}\n","import { css } from '@emotion/css';\nimport { ReactNode, useState } from 'react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Badge,\n  Button,\n  Field,\n  FieldValidationMessage,\n  IconButton,\n  Input,\n  MultiSelect,\n  Select,\n  Stack,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { MatcherOperator, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { routeTimingsFields } from './routeTimingsFields';\n\nexport interface AmRoutesExpandedFormProps {\n  receivers: AmRouteReceiver[];\n  route?: RouteWithID;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  actionButtons: ReactNode;\n  defaults?: Partial<FormAmRoute>;\n}\n\nexport const AmRoutesExpandedForm = ({\n  actionButtons,\n  receivers,\n  route,\n  onSubmit,\n  defaults,\n}: AmRoutesExpandedFormProps) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route?.group_by));\n  const muteTimingOptions = useMuteTimingOptions();\n  const emptyMatcher = [{ name: '', operator: MatcherOperator.equal, value: '' }];\n\n  const receiversWithOnCallOnTop = receivers.sort(onCallFirst);\n\n  const formAmRoute = {\n    ...amRouteToFormAmRoute(route),\n    ...defaults,\n  };\n\n  const defaultValues: Omit<FormAmRoute, 'routes'> = {\n    ...formAmRoute,\n    // if we're adding a new route, show at least one empty matcher\n    object_matchers: route ? formAmRoute.object_matchers : emptyMatcher,\n  };\n\n  const {\n    handleSubmit,\n    control,\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues,\n  });\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'object_matchers',\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"hidden\" {...register('id')} />\n      <Stack direction=\"column\" alignItems=\"flex-start\">\n        <div>Matching labels</div>\n        {fields.length === 0 && (\n          <Badge\n            color=\"orange\"\n            className={styles.noMatchersWarning}\n            icon=\"exclamation-triangle\"\n            text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n          />\n        )}\n        {fields.length > 0 && (\n          <div className={styles.matchersContainer}>\n            {fields.map((field, index) => {\n              return (\n                <Stack direction=\"row\" key={field.id} alignItems=\"center\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors.object_matchers?.[index]?.name}\n                    error={errors.object_matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.name`, { required: 'Field is required' })}\n                      defaultValue={field.name}\n                      placeholder=\"label\"\n                      autoFocus\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <Controller\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={styles.matchersOperator}\n                          onChange={(value) => onChange(value?.value)}\n                          options={matcherFieldOptions}\n                          aria-label=\"Operator\"\n                        />\n                      )}\n                      defaultValue={field.operator}\n                      control={control}\n                      name={`object_matchers.${index}.operator`}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors.object_matchers?.[index]?.value}\n                    error={errors.object_matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.value`)}\n                      defaultValue={field.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  <IconButton tooltip=\"Remove matcher\" name={'trash-alt'} onClick={() => remove(index)}>\n                    Remove\n                  </IconButton>\n                </Stack>\n              );\n            })}\n          </div>\n        )}\n        <Button\n          className={styles.addMatcherBtn}\n          icon=\"plus\"\n          onClick={() => append(emptyArrayFieldMatcher)}\n          variant=\"secondary\"\n          type=\"button\"\n        >\n          Add matcher\n        </Button>\n      </Stack>\n\n      <Field label=\"Contact point\">\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              aria-label=\"Contact point\"\n              {...field}\n              className={formStyles.input}\n              onChange={(value) => onChange(mapSelectValueToString(value))}\n              options={receiversWithOnCallOnTop}\n              isClearable\n            />\n          )}\n          control={control}\n          name=\"receiver\"\n        />\n      </Field>\n      <Field label=\"Continue matching subsequent sibling nodes\">\n        <Switch id=\"continue-toggle\" {...register('continue')} />\n      </Field>\n      <Field label=\"Override grouping\">\n        <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n      </Field>\n      {watch().overrideGrouping && (\n        <Field\n          label=\"Group by\"\n          description=\"Combine multiple alerts into a single notification by grouping them by the same label values. If empty, it is inherited from the parent policy.\"\n        >\n          <Controller\n            rules={{\n              validate: (value) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  invalid={Boolean(error)}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                    setValue('groupBy', [...(field.value || []), opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            control={control}\n            name=\"groupBy\"\n          />\n        </Field>\n      )}\n      <Field label=\"Override general timings\">\n        <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n      </Field>\n      {watch().overrideTimings && (\n        <>\n          <Field\n            label={routeTimingsFields.groupWait.label}\n            description={routeTimingsFields.groupWait.description}\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupWait.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.groupInterval.label}\n            description={routeTimingsFields.groupInterval.description}\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.repeatInterval.label}\n            description={routeTimingsFields.repeatInterval.description}\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value = '') => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n        </>\n      )}\n      <Field\n        label=\"Mute timings\"\n        data-testid=\"am-mute-timing-select\"\n        description=\"Add mute timing to policy\"\n        invalid={!!errors.muteTimeIntervals}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label=\"Mute timings\"\n              {...field}\n              className={formStyles.input}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={muteTimingOptions}\n            />\n          )}\n          control={control}\n          name=\"muteTimeIntervals\"\n        />\n      </Field>\n      {actionButtons}\n    </form>\n  );\n};\n\nfunction onCallFirst(receiver: AmRouteReceiver) {\n  if (receiver.grafanaAppReceiverType === SupportedPlugin.OnCall) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css({\n      marginBottom: commonSpacing,\n    }),\n    matchersContainer: css({\n      backgroundColor: theme.colors.background.secondary,\n      padding: `${theme.spacing(1.5)} ${theme.spacing(2)}`,\n      paddingBottom: 0,\n      width: 'fit-content',\n    }),\n    matchersOperator: css({\n      minWidth: '120px',\n    }),\n    noMatchersWarning: css({\n      padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","import { groupBy } from 'lodash';\nimport { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Button, Icon, Modal, ModalProps, Spinner, Stack } from '@grafana/ui';\nimport {\n  AlertmanagerGroup,\n  AlertState,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { MatcherFormatter } from '../../utils/matchers';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { AlertGroup } from '../alert-groups/AlertGroup';\nimport { useGetAmRouteReceiverWithGrafanaAppTypes } from '../receivers/grafanaAppReceivers/grafanaApp';\n\nimport { AlertGroupsSummary } from './AlertGroupsSummary';\nimport { AmRootRouteForm } from './EditDefaultPolicyForm';\nimport { AmRoutesExpandedForm } from './EditNotificationPolicyForm';\nimport { Matchers } from './Matchers';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\ntype AddModalHook<T = undefined> = [JSX.Element, (item: T, position: InsertPosition) => void, () => void];\ntype EditModalHook = [JSX.Element, (item: RouteWithID, isDefaultRoute?: boolean) => void, () => void];\n\nconst useAddPolicyModal = (\n  receivers: Receiver[] = [],\n  handleAdd: (route: Partial<FormAmRoute>, referenceRoute: RouteWithID, position: InsertPosition) => void,\n  loading: boolean\n): AddModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [insertPosition, setInsertPosition] = useState<InsertPosition | undefined>(undefined);\n  const [referenceRoute, setReferenceRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setReferenceRoute(undefined);\n    setInsertPosition(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((referenceRoute: RouteWithID, position: InsertPosition) => {\n    setReferenceRoute(referenceRoute);\n    setInsertPosition(position);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Add notification policy\"\n        >\n          <AmRoutesExpandedForm\n            receivers={AmRouteReceivers}\n            defaults={{\n              groupBy: referenceRoute?.group_by,\n            }}\n            onSubmit={(newRoute) => {\n              if (referenceRoute && insertPosition) {\n                handleAdd(newRoute, referenceRoute, insertPosition);\n              }\n            }}\n            actionButtons={\n              <Modal.ButtonRow>\n                <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Save policy</Button>\n              </Modal.ButtonRow>\n            }\n          />\n        </Modal>\n      ),\n    [AmRouteReceivers, handleAdd, handleDismiss, insertPosition, loading, referenceRoute, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useEditPolicyModal = (\n  alertManagerSourceName: string,\n  receivers: Receiver[],\n  handleSave: (route: Partial<FormAmRoute>) => void,\n  loading: boolean\n): EditModalHook => {\n  const [showModal, setShowModal] = useState(false);\n  const [isDefaultPolicy, setIsDefaultPolicy] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((route: RouteWithID, isDefaultPolicy?: boolean) => {\n    setIsDefaultPolicy(isDefaultPolicy ?? false);\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Edit notification policy\"\n        >\n          {isDefaultPolicy && route && (\n            <AmRootRouteForm\n              // TODO *sigh* this alertmanagersourcename should come from context or something\n              // passing it down all the way here is a code smell\n              alertManagerSourceName={alertManagerSourceName}\n              onSubmit={handleSave}\n              receivers={AmRouteReceivers}\n              route={route}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update default policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n          {!isDefaultPolicy && (\n            <AmRoutesExpandedForm\n              receivers={AmRouteReceivers}\n              route={route}\n              onSubmit={handleSave}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n        </Modal>\n      ),\n    [AmRouteReceivers, alertManagerSourceName, handleDismiss, handleSave, isDefaultPolicy, loading, route, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useDeletePolicyModal = (handleDelete: (route: RouteWithID) => void, loading: boolean): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, [setRoute]);\n\n  const handleShow = useCallback((route: RouteWithID) => {\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (route) {\n      handleDelete(route);\n    }\n  }, [handleDelete, route]);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Delete notification policy\"\n        >\n          <p>Deleting this notification policy will permanently remove it.</p>\n          <p>Are you sure you want to delete this policy?</p>\n\n          <Modal.ButtonRow>\n            <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit}>\n              Yes, delete policy\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n              Cancel\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      ),\n    [handleDismiss, handleSubmit, loading, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useAlertGroupsModal = (\n  alertManagerSourceName: string\n): [JSX.Element, (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void, () => void] => {\n  const [showModal, setShowModal] = useState(false);\n  const [alertGroups, setAlertGroups] = useState<AlertmanagerGroup[]>([]);\n  const [matchers, setMatchers] = useState<ObjectMatcher[]>([]);\n  const [formatter, setFormatter] = useState<MatcherFormatter>('default');\n\n  const handleDismiss = useCallback(() => {\n    setShowModal(false);\n    setAlertGroups([]);\n    setMatchers([]);\n  }, []);\n\n  const handleShow = useCallback(\n    (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[], formatter?: MatcherFormatter) => {\n      setAlertGroups(alertGroups);\n      if (matchers) {\n        setMatchers(matchers);\n      }\n      if (formatter) {\n        setFormatter(formatter);\n      }\n      setShowModal(true);\n    },\n    []\n  );\n\n  const instancesByState = useMemo(() => {\n    const instances = alertGroups.flatMap((group) => group.alerts);\n    return groupBy(instances, (instance) => instance.status.state);\n  }, [alertGroups]);\n\n  const modalElement = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title={\n          <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={'wrap'}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Icon name=\"x\" /> Matchers\n            </Stack>\n            <Matchers matchers={matchers} formatter={formatter} />\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          <AlertGroupsSummary\n            active={instancesByState[AlertState.Active]?.length}\n            suppressed={instancesByState[AlertState.Suppressed]?.length}\n            unprocessed={instancesByState[AlertState.Unprocessed]?.length}\n          />\n          <div>\n            {alertGroups.map((group, index) => (\n              <AlertGroup key={index} alertManagerSourceName={alertManagerSourceName} group={group} />\n            ))}\n          </div>\n        </Stack>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    ),\n    [alertGroups, handleDismiss, instancesByState, matchers, formatter, showModal, alertManagerSourceName]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst UpdatingModal: FC<Pick<ModalProps, 'isOpen'>> = ({ isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={() => {}}\n    closeOnBackdropClick={false}\n    closeOnEscape={false}\n    title={\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        Updating... <Spinner inline />\n      </Stack>\n    }\n  >\n    Please wait while we update your notification policies.\n  </Modal>\n);\n\nexport { useAddPolicyModal, useDeletePolicyModal, useEditPolicyModal, useAlertGroupsModal };\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface GrafanaPoliciesPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaPoliciesExporterPreview = ({ exportFormat, onClose }: GrafanaPoliciesPreviewProps) => {\n  const { currentData: policiesDefinition = '', isFetching } = alertRuleApi.useExportPoliciesQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `policies-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={policiesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaPoliciesExporterProps {\n  onClose: () => void;\n}\n\nexport const GrafanaPoliciesExporter = ({ onClose }: GrafanaPoliciesExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaPoliciesExporterPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { defaults, groupBy, isArray, sumBy, uniqueId, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\nimport { FC, Fragment, ReactNode, useState } from 'react';\nimport * as React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  IconButton,\n  Menu,\n  Stack,\n  Text,\n  TextLink,\n  Tooltip,\n  getTagColorsFromName,\n  useStyles2,\n} from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport { PrimaryText } from 'app/features/alerting/unified/components/common/TextVariants';\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { ReceiversState } from 'app/types';\n\nimport { RoutesMatchingFilters } from '../../NotificationPolicies';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { getAmMatcherFormatter } from '../../utils/alertmanager';\nimport { MatcherFormatter, normalizeMatchers } from '../../utils/matchers';\nimport { createContactPointLink, createMuteTimingLink } from '../../utils/misc';\nimport { InheritableProperties, getInheritedProperties } from '../../utils/notification-policies';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { Authorize } from '../Authorize';\nimport { HoverCard } from '../HoverCard';\nimport { Label } from '../Label';\nimport { MetaText } from '../MetaText';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { GrafanaPoliciesExporter } from '../export/GrafanaPoliciesExporter';\n\nimport { Matchers } from './Matchers';\nimport { TIMING_OPTIONS_DEFAULTS, TimingOptions } from './timingOptions';\n\ninterface PolicyComponentProps {\n  receivers?: Receiver[];\n  alertGroups?: AlertmanagerGroup[];\n  contactPointsState?: ReceiversState;\n  readOnly?: boolean;\n  provisioned?: boolean;\n  inheritedProperties?: Partial<InheritableProperties>;\n  routesMatchingFilters?: RoutesMatchingFilters;\n\n  matchingInstancesPreview?: {\n    groupsMap?: Map<string, AlertmanagerGroup[]>;\n    enabled: boolean;\n  };\n\n  routeTree: RouteWithID;\n  currentRoute: RouteWithID;\n  alertManagerSourceName: string;\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, isAutogenerated?: boolean) => void;\n  onAddPolicy: (route: RouteWithID, position: InsertPosition) => void;\n  onDeletePolicy: (route: RouteWithID) => void;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n  isAutoGenerated?: boolean;\n}\n\nconst Policy = (props: PolicyComponentProps) => {\n  const {\n    receivers = [],\n    contactPointsState,\n    readOnly = false,\n    provisioned = false,\n    alertGroups = [],\n    alertManagerSourceName,\n    currentRoute,\n    routeTree,\n    inheritedProperties,\n    routesMatchingFilters = {\n      filtersApplied: false,\n      matchedRoutesWithPath: new Map<RouteWithID, RouteWithID[]>(),\n    },\n    matchingInstancesPreview = { enabled: false },\n    onEditPolicy,\n    onAddPolicy,\n    onDeletePolicy,\n    onShowAlertInstances,\n    isAutoGenerated = false,\n  } = props;\n\n  const styles = useStyles2(getStyles);\n\n  const isDefaultPolicy = currentRoute === routeTree;\n\n  const contactPoint = currentRoute.receiver;\n  const continueMatching = currentRoute.continue ?? false;\n\n  const matchers = normalizeMatchers(currentRoute);\n  const hasMatchers = Boolean(matchers && matchers.length);\n\n  const { filtersApplied, matchedRoutesWithPath } = routesMatchingFilters;\n  const matchedRoutes = Array.from(matchedRoutesWithPath.keys());\n\n  // check if this route matches the filters\n  const hasFocus = filtersApplied && matchedRoutes.some((route) => route.id === currentRoute.id);\n\n  // check if this route belongs to a path that matches the filters\n  const routesPath = Array.from(matchedRoutesWithPath.values()).flat();\n  const belongsToMatchPath = routesPath.some((route: RouteWithID) => route.id === currentRoute.id);\n\n  // gather errors here\n  const errors: ReactNode[] = [];\n\n  // if the route has no matchers, is not the default policy (that one has none) and it does not continue\n  // then we should warn the user that it's a suspicious setup\n  const showMatchesAllLabelsWarning = !hasMatchers && !isDefaultPolicy && !continueMatching;\n\n  // if the receiver / contact point has any errors show it on the policy\n  const actualContactPoint = contactPoint ?? inheritedProperties?.receiver ?? '';\n  const contactPointErrors = contactPointsState ? getContactPointErrors(actualContactPoint, contactPointsState) : [];\n\n  const allChildPolicies = currentRoute.routes ?? [];\n\n  // filter child policies that match\n  const childPolicies = filtersApplied\n    ? // filter by the ones that belong to the path that matches the filters\n      allChildPolicies.filter((policy) => routesPath.some((route: RouteWithID) => route.id === policy.id))\n    : allChildPolicies;\n\n  const hasChildPolicies = childPolicies.length > 0;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const matchingAlertGroups = matchingInstancesPreview?.groupsMap?.get(currentRoute.id);\n\n  // sum all alert instances for all groups we're handling\n  const numberOfAlertInstances = matchingAlertGroups\n    ? sumBy(matchingAlertGroups, (group) => group.alerts.length)\n    : undefined;\n\n  // simplified routing permissions\n  const [isSupportedToSeeAutogeneratedChunk, isAllowedToSeeAutogeneratedChunk] = useAlertmanagerAbility(\n    AlertmanagerAction.ViewAutogeneratedPolicyTree\n  );\n\n  // we collapse the auto-generated policies by default\n  const isAutogeneratedPolicyRoot = isAutoGeneratedRootAndSimplifiedEnabled(currentRoute);\n  const [showPolicyChildren, togglePolicyChildren] = useToggle(isAutogeneratedPolicyRoot ? false : true);\n\n  const groupBy = currentRoute.group_by;\n  const muteTimings = currentRoute.mute_time_intervals ?? [];\n\n  const timingOptions: TimingOptions = {\n    group_wait: currentRoute.group_wait,\n    group_interval: currentRoute.group_interval,\n    repeat_interval: currentRoute.repeat_interval,\n  };\n\n  contactPointErrors.forEach((error) => {\n    errors.push(error);\n  });\n\n  const POLICIES_PER_PAGE = 20;\n\n  const [visibleChildPolicies, setVisibleChildPolicies] = useState(POLICIES_PER_PAGE);\n\n  // build the menu actions for our policy\n  const dropdownMenuActions: JSX.Element[] = useCreateDropdownMenuActions(\n    isAutoGenerated,\n    isDefaultPolicy,\n    provisioned,\n    onEditPolicy,\n    currentRoute,\n    toggleShowExportDrawer,\n    onDeletePolicy\n  );\n\n  // check if this policy should be visible. If it's autogenerated and the user is not allowed to see autogenerated\n  // policies then we should not show it. Same if the user is not supported to see autogenerated policies.\n  const hideCurrentPolicy =\n    isAutoGenerated && (!isAllowedToSeeAutogeneratedChunk || !isSupportedToSeeAutogeneratedChunk);\n  const hideCurrentPolicyForFilters = filtersApplied && !belongsToMatchPath;\n\n  if (hideCurrentPolicy || hideCurrentPolicyForFilters) {\n    return null;\n  }\n\n  const isImmutablePolicy = isDefaultPolicy || isAutogeneratedPolicyRoot;\n  // TODO dead branch detection, warnings for all sort of configs that won't work or will never be activated\n\n  const childPoliciesBelongingToMatchPath = childPolicies.filter((child) =>\n    routesPath.some((route: RouteWithID) => route.id === child.id)\n  );\n\n  // child policies to render are the ones that belong to the path that matches the filters\n  const childPoliciesToRender = filtersApplied ? childPoliciesBelongingToMatchPath : childPolicies;\n  const pageOfChildren = childPoliciesToRender.slice(0, visibleChildPolicies);\n\n  const moreCount = childPoliciesToRender.length - pageOfChildren.length;\n  const showMore = moreCount > 0;\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={1.5}>\n        <div\n          className={styles.policyWrapper(hasFocus)}\n          data-testid={isDefaultPolicy ? 'am-root-route-container' : 'am-route-container'}\n        >\n          {/* continueMatching and showMatchesAllLabelsWarning are mutually exclusive so the icons can't overlap */}\n          {continueMatching && <ContinueMatchingIndicator />}\n          {showMatchesAllLabelsWarning && <AllMatchesIndicator />}\n\n          <div className={styles.policyItemWrapper}>\n            <Stack direction=\"column\" gap={1}>\n              {/* Matchers and actions */}\n              <div>\n                <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                  {hasChildPolicies ? (\n                    <IconButton\n                      name={showPolicyChildren ? 'angle-down' : 'angle-right'}\n                      onClick={togglePolicyChildren}\n                      aria-label={showPolicyChildren ? 'Collapse' : 'Expand'}\n                    />\n                  ) : null}\n                  {isImmutablePolicy ? (\n                    isAutogeneratedPolicyRoot ? (\n                      <AutogeneratedRootIndicator />\n                    ) : (\n                      <DefaultPolicyIndicator />\n                    )\n                  ) : hasMatchers ? (\n                    <Matchers matchers={matchers ?? []} formatter={getAmMatcherFormatter(alertManagerSourceName)} />\n                  ) : (\n                    <span className={styles.metadata}>No matchers</span>\n                  )}\n                  <Spacer />\n                  {/* TODO maybe we should move errors to the gutter instead? */}\n                  {errors.length > 0 && <Errors errors={errors} />}\n                  {provisioned && <ProvisioningBadge />}\n                  <Stack direction=\"row\" gap={0.5}>\n                    {!isAutoGenerated && !readOnly && (\n                      <Authorize actions={[AlertmanagerAction.CreateNotificationPolicy]}>\n                        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n                          {isDefaultPolicy ? (\n                            <Button\n                              variant=\"secondary\"\n                              icon=\"plus\"\n                              size=\"sm\"\n                              disabled={provisioned}\n                              type=\"button\"\n                              onClick={() => onAddPolicy(currentRoute, 'child')}\n                            >\n                              New child policy\n                            </Button>\n                          ) : (\n                            <Dropdown\n                              overlay={\n                                <Menu>\n                                  <Menu.Item\n                                    label=\"New sibling above\"\n                                    icon=\"arrow-up\"\n                                    onClick={() => onAddPolicy(currentRoute, 'above')}\n                                  />\n                                  <Menu.Item\n                                    label=\"New sibling below\"\n                                    icon=\"arrow-down\"\n                                    onClick={() => onAddPolicy(currentRoute, 'below')}\n                                  />\n                                  <Menu.Divider />\n                                  <Menu.Item\n                                    label=\"New child policy\"\n                                    icon=\"plus\"\n                                    onClick={() => onAddPolicy(currentRoute, 'child')}\n                                  />\n                                </Menu>\n                              }\n                            >\n                              <Button\n                                size=\"sm\"\n                                variant=\"secondary\"\n                                disabled={provisioned}\n                                icon=\"angle-down\"\n                                type=\"button\"\n                              >\n                                Add new policy\n                              </Button>\n                            </Dropdown>\n                          )}\n                        </ConditionalWrap>\n                      </Authorize>\n                    )}\n                    {dropdownMenuActions.length > 0 && (\n                      <Dropdown overlay={<Menu>{dropdownMenuActions}</Menu>}>\n                        <Button\n                          icon=\"ellipsis-h\"\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          type=\"button\"\n                          aria-label=\"more-actions\"\n                          data-testid=\"more-actions\"\n                        />\n                      </Dropdown>\n                    )}\n                  </Stack>\n                </Stack>\n              </div>\n\n              {/* Metadata row */}\n              <MetadataRow\n                matchingInstancesPreview={matchingInstancesPreview}\n                numberOfAlertInstances={numberOfAlertInstances}\n                contactPoint={contactPoint ?? undefined}\n                groupBy={groupBy}\n                muteTimings={muteTimings}\n                timingOptions={timingOptions}\n                inheritedProperties={inheritedProperties}\n                alertManagerSourceName={alertManagerSourceName}\n                receivers={receivers}\n                matchingAlertGroups={matchingAlertGroups}\n                matchers={matchers}\n                isDefaultPolicy={isDefaultPolicy}\n                onShowAlertInstances={onShowAlertInstances}\n              />\n            </Stack>\n          </div>\n        </div>\n        <div className={styles.childPolicies}>\n          {showPolicyChildren && (\n            <>\n              {pageOfChildren.map((child) => {\n                const childInheritedProperties = getInheritedProperties(currentRoute, child, inheritedProperties);\n                // This child is autogenerated if it's the autogenerated root or if it's a child of an autogenerated policy.\n                const isThisChildAutoGenerated = isAutoGeneratedRootAndSimplifiedEnabled(child) || isAutoGenerated;\n                /* pass the \"readOnly\" prop from the parent, because for any child policy , if its parent it's not editable,\n                then the child policy should not be editable either */\n                const isThisChildReadOnly = readOnly || provisioned || isAutoGenerated;\n\n                return (\n                  <Policy\n                    key={child.id}\n                    routeTree={routeTree}\n                    currentRoute={child}\n                    receivers={receivers}\n                    contactPointsState={contactPointsState}\n                    readOnly={isThisChildReadOnly}\n                    inheritedProperties={childInheritedProperties}\n                    onAddPolicy={onAddPolicy}\n                    onEditPolicy={onEditPolicy}\n                    onDeletePolicy={onDeletePolicy}\n                    onShowAlertInstances={onShowAlertInstances}\n                    alertManagerSourceName={alertManagerSourceName}\n                    alertGroups={alertGroups}\n                    routesMatchingFilters={routesMatchingFilters}\n                    matchingInstancesPreview={matchingInstancesPreview}\n                    isAutoGenerated={isThisChildAutoGenerated}\n                    provisioned={provisioned}\n                  />\n                );\n              })}\n              {showMore && (\n                <Button\n                  size=\"sm\"\n                  icon=\"angle-down\"\n                  variant=\"secondary\"\n                  className={styles.moreButtons}\n                  onClick={() => setVisibleChildPolicies(visibleChildPolicies + POLICIES_PER_PAGE)}\n                >\n                  {moreCount} additional {pluralize('policy', moreCount)}\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n        {showExportDrawer && <GrafanaPoliciesExporter onClose={toggleShowExportDrawer} />}\n      </Stack>\n    </>\n  );\n};\n\ninterface MetadataRowProps {\n  matchingInstancesPreview: { groupsMap?: Map<string, AlertmanagerGroup[]>; enabled: boolean };\n  numberOfAlertInstances?: number;\n  contactPoint?: string;\n  groupBy?: string[];\n  muteTimings?: string[];\n  timingOptions?: TimingOptions;\n  inheritedProperties?: Partial<InheritableProperties>;\n  alertManagerSourceName: string;\n  receivers: Receiver[];\n  matchingAlertGroups?: AlertmanagerGroup[];\n  matchers?: ObjectMatcher[];\n  isDefaultPolicy: boolean;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n}\n\nfunction MetadataRow({\n  numberOfAlertInstances,\n  isDefaultPolicy,\n  timingOptions,\n  groupBy,\n  muteTimings = [],\n  matchingInstancesPreview,\n  inheritedProperties,\n  matchingAlertGroups,\n  onShowAlertInstances,\n  matchers,\n  contactPoint,\n  alertManagerSourceName,\n  receivers,\n}: MetadataRowProps) {\n  const styles = useStyles2(getStyles);\n\n  const inheritedGrouping = inheritedProperties && inheritedProperties.group_by;\n  const hasInheritedProperties = inheritedProperties && Object.keys(inheritedProperties).length > 0;\n\n  const noGrouping = isArray(groupBy) && groupBy[0] === '...';\n  const customGrouping = !noGrouping && isArray(groupBy) && groupBy.length > 0;\n  const singleGroup = isDefaultPolicy && isArray(groupBy) && groupBy.length === 0;\n\n  const hasMuteTimings = Boolean(muteTimings.length);\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {matchingInstancesPreview.enabled && (\n          <MetaText\n            icon=\"layers-alt\"\n            onClick={() => {\n              matchingAlertGroups &&\n                onShowAlertInstances(matchingAlertGroups, matchers, getAmMatcherFormatter(alertManagerSourceName));\n            }}\n            data-testid=\"matching-instances\"\n          >\n            <Text color=\"primary\">{numberOfAlertInstances ?? '-'}</Text>\n            <span>{pluralize('instance', numberOfAlertInstances)}</span>\n          </MetaText>\n        )}\n        {contactPoint && (\n          <MetaText icon=\"at\" data-testid=\"contact-point\">\n            <span>Delivered to</span>\n            <ContactPointsHoverDetails\n              alertManagerSourceName={alertManagerSourceName}\n              receivers={receivers}\n              contactPoint={contactPoint}\n            />\n          </MetaText>\n        )}\n        {!inheritedGrouping && (\n          <>\n            {customGrouping && (\n              <MetaText icon=\"layer-group\" data-testid=\"grouping\">\n                <span>Grouped by</span>\n                <Text color=\"primary\">{groupBy.join(', ')}</Text>\n              </MetaText>\n            )}\n            {singleGroup && (\n              <MetaText icon=\"layer-group\">\n                <span>Single group</span>\n              </MetaText>\n            )}\n            {noGrouping && (\n              <MetaText icon=\"layer-group\">\n                <span>Not grouping</span>\n              </MetaText>\n            )}\n          </>\n        )}\n        {hasMuteTimings && (\n          <MetaText icon=\"calendar-slash\" data-testid=\"mute-timings\">\n            <span>Muted when</span>\n            <MuteTimings timings={muteTimings} alertManagerSourceName={alertManagerSourceName} />\n          </MetaText>\n        )}\n        {timingOptions && (\n          // for the default policy we will also merge the default timings, that way a user can observe what the timing options would be\n          <TimingOptionsMeta\n            timingOptions={isDefaultPolicy ? defaults(timingOptions, TIMING_OPTIONS_DEFAULTS) : timingOptions}\n          />\n        )}\n        {hasInheritedProperties && (\n          <>\n            <MetaText icon=\"corner-down-right-alt\" data-testid=\"inherited-properties\">\n              <span>Inherited</span>\n              <InheritedProperties properties={inheritedProperties} />\n            </MetaText>\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nexport const useCreateDropdownMenuActions = (\n  isAutoGenerated: boolean,\n  isDefaultPolicy: boolean,\n  provisioned: boolean,\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, readOnly?: boolean) => void,\n  currentRoute: RouteWithID,\n  toggleShowExportDrawer: (nextValue?: any) => void,\n  onDeletePolicy: (route: RouteWithID) => void\n) => {\n  const [\n    [updatePoliciesSupported, updatePoliciesAllowed],\n    [deletePolicySupported, deletePolicyAllowed],\n    [exportPoliciesSupported, exportPoliciesAllowed],\n  ] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateNotificationPolicyTree,\n    AlertmanagerAction.DeleteNotificationPolicy,\n    AlertmanagerAction.ExportNotificationPolicies,\n  ]);\n  const dropdownMenuActions = [];\n  const showExportAction = exportPoliciesAllowed && exportPoliciesSupported && isDefaultPolicy && !isAutoGenerated;\n  const showEditAction = updatePoliciesSupported && updatePoliciesAllowed;\n  const showDeleteAction = deletePolicySupported && deletePolicyAllowed && !isDefaultPolicy && !isAutoGenerated;\n\n  if (showEditAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"edit-policy\">\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            icon=\"edit\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Edit\"\n            onClick={() => onEditPolicy(currentRoute, isDefaultPolicy)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n\n  if (showExportAction) {\n    dropdownMenuActions.push(\n      <Menu.Item key=\"export-policy\" icon=\"download-alt\" label=\"Export\" onClick={toggleShowExportDrawer} />\n    );\n  }\n\n  if (showDeleteAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"delete-policy\">\n        <Menu.Divider />\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            destructive\n            icon=\"trash-alt\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Delete\"\n            onClick={() => onDeletePolicy(currentRoute)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n  return dropdownMenuActions;\n};\n\nexport const AUTOGENERATED_ROOT_LABEL_NAME = '__grafana_autogenerated__';\n\nexport function isAutoGeneratedRootAndSimplifiedEnabled(route: RouteWithID) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_ROOT_LABEL_NAME &&\n        objectMatcher[1] === MatcherOperator.equal &&\n        objectMatcher[2] === 'true'\n      );\n    }) ?? false\n  );\n  // return simplifiedRoutingToggleEnabled && route.receiver === 'contact_point_5';\n}\n\nconst ProvisionedTooltip = (children: ReactNode) => (\n  <Tooltip content=\"Provisioned items cannot be edited in the UI\" placement=\"top\">\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst Errors: FC<{ errors: React.ReactNode[] }> = ({ errors }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"column\" gap={0.5}>\n        {errors.map((error) => (\n          <Fragment key={uniqueId()}>{error}</Fragment>\n        ))}\n      </Stack>\n    }\n  >\n    <span>\n      <Badge icon=\"exclamation-circle\" color=\"red\" text={pluralize('error', errors.length, true)} />\n    </span>\n  </HoverCard>\n);\n\nconst ContinueMatchingIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This route will continue matching other policies\">\n      <div className={styles.gutterIcon} data-testid=\"continue-matching\">\n        <Icon name=\"arrow-down\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst AllMatchesIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This policy matches all labels\">\n      <div className={styles.gutterIcon} data-testid=\"matches-all\">\n        <Icon name=\"exclamation-triangle\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nfunction DefaultPolicyIndicator() {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <Text element=\"h2\" variant=\"body\" weight=\"medium\">\n        Default policy\n      </Text>\n      <span className={styles.metadata}>\n        All alert instances will be handled by the default policy if no other matching policies are found.\n      </span>\n    </>\n  );\n}\n\nfunction AutogeneratedRootIndicator() {\n  return (\n    <Text element=\"h3\" variant=\"body\" weight=\"medium\">\n      Auto-generated policies\n    </Text>\n  );\n}\n\nconst InheritedProperties: FC<{ properties: InheritableProperties }> = ({ properties }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"row\" gap={0.5}>\n        {Object.entries(properties).map(([key, value]) => {\n          if (!value) {\n            return null;\n          }\n\n          return <Label key={key} label={routePropertyToLabel(key)} value={routePropertyToValue(key, value)} />;\n        })}\n      </Stack>\n    }\n  >\n    <div>\n      <Text color=\"primary\">{pluralize('property', Object.keys(properties).length, true)}</Text>\n    </div>\n  </HoverCard>\n);\n\nconst MuteTimings: FC<{ timings: string[]; alertManagerSourceName: string }> = ({\n  timings,\n  alertManagerSourceName,\n}) => {\n  /* TODO make a better mute timing overview, allow combining multiple in to one overview */\n  /*\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={<MetaText icon=\"calendar-slash\">Mute Timings</MetaText>}\n      content={\n        // TODO show a combined view of all mute timings here, combining the weekdays, years, months, etc\n        <Stack direction=\"row\" gap={0.5}>\n          <Label label=\"Weekdays\" value=\"Saturday and Sunday\" />\n        </Stack>\n      }\n    >\n      <div>\n        <Strong>{muteTimings.join(', ')}</Strong>\n      </div>\n    </HoverCard>\n  */\n  return (\n    <div>\n      {timings.map((timing) => (\n        <TextLink\n          key={timing}\n          href={createMuteTimingLink(timing, alertManagerSourceName)}\n          color=\"primary\"\n          variant=\"bodySmall\"\n          inline={false}\n        >\n          {timing}\n        </TextLink>\n      ))}\n    </div>\n  );\n};\n\ninterface TimingOptionsMetaProps {\n  timingOptions: TimingOptions;\n}\nexport const TimingOptionsMeta = ({ timingOptions }: TimingOptionsMetaProps) => {\n  const groupWait = timingOptions.group_wait;\n  const groupInterval = timingOptions.group_interval;\n  const repeatInterval = timingOptions.repeat_interval;\n\n  // we don't have any timing options to show – we're inheriting everything from the parent\n  // and those show up in a separate \"inherited properties\" component\n  if (!groupWait && !groupInterval && !repeatInterval) {\n    return null;\n  }\n\n  const metaOptions: ReactNode[] = [];\n\n  if (groupWait) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupWait.description',\n          'How long to initially wait to send a notification for a group of alert instances.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupWait.label\">\n            Wait <PrimaryText content={groupWait} /> to group instances\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (groupInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupInterval.description',\n          'How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupInterval.label\">\n            Wait <PrimaryText content={groupInterval} /> before sending updates\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (repeatInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.repeatInterval.description',\n          'How often notifications are sent if the group of alerts has not changed since the last notification.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.repeatInterval.label\">\n            Repeated every <PrimaryText content={repeatInterval} />\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <MetaText icon=\"hourglass\" data-testid=\"timing-options\">\n      {metaOptions.map((meta, index) => (\n        <span key={uniqueId()}>\n          {meta}\n          {index < metaOptions.length - 1 && ' · '}\n        </span>\n      ))}\n    </MetaText>\n  );\n};\n\ninterface ContactPointDetailsProps {\n  alertManagerSourceName: string;\n  contactPoint: string;\n  receivers: Receiver[];\n}\n\n// @TODO make this work for cloud AMs too\nconst ContactPointsHoverDetails: FC<ContactPointDetailsProps> = ({\n  alertManagerSourceName,\n  contactPoint,\n  receivers,\n}) => {\n  const details = receivers.find((receiver) => receiver.name === contactPoint);\n  if (!details) {\n    return (\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    );\n  }\n\n  const integrations = details.grafana_managed_receiver_configs;\n  if (!integrations) {\n    return (\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    );\n  }\n\n  const groupedIntegrations = groupBy(details.grafana_managed_receiver_configs, (config) => config.type);\n\n  return (\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={\n        <MetaText icon=\"at\">\n          <div>Contact Point</div>\n          <Text color=\"primary\">{contactPoint}</Text>\n        </MetaText>\n      }\n      key={uniqueId()}\n      content={\n        <Stack direction=\"row\" gap={0.5}>\n          {/* use \"label\" to indicate how many of that type we have in the contact point */}\n          {Object.entries(groupedIntegrations).map(([type, integrations]) => (\n            <Label\n              key={uniqueId()}\n              label={integrations.length > 1 ? integrations.length : undefined}\n              icon={INTEGRATION_ICONS[type]}\n              value={upperFirst(type)}\n            />\n          ))}\n        </Stack>\n      }\n    >\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    </HoverCard>\n  );\n};\n\nfunction getContactPointErrors(contactPoint: string, contactPointsState: ReceiversState): JSX.Element[] {\n  const notifierStates = Object.entries(contactPointsState[contactPoint]?.notifiers ?? []);\n  const contactPointErrors = notifierStates.reduce((acc: JSX.Element[] = [], [_, notifierStatuses]) => {\n    const notifierErrors = notifierStatuses\n      .filter((status) => status.lastNotifyAttemptError)\n      .map((status) => (\n        <Label\n          icon=\"at\"\n          key={uniqueId()}\n          label={`Contact Point › ${status.name}`}\n          value={status.lastNotifyAttemptError}\n        />\n      ));\n\n    return acc.concat(notifierErrors);\n  }, []);\n\n  return contactPointErrors;\n}\n\nconst routePropertyToLabel = (key: keyof InheritableProperties | string): string => {\n  switch (key) {\n    case 'receiver':\n      return 'Contact Point';\n    case 'group_by':\n      return 'Group by';\n    case 'group_interval':\n      return 'Group interval';\n    case 'group_wait':\n      return 'Group wait';\n    case 'repeat_interval':\n      return 'Repeat interval';\n    default:\n      return key;\n  }\n};\n\nconst routePropertyToValue = (\n  key: keyof InheritableProperties | string,\n  value: string | string[]\n): NonNullable<ReactNode> => {\n  const isNotGrouping = key === 'group_by' && Array.isArray(value) && value[0] === '...';\n  const isSingleGroup = key === 'group_by' && Array.isArray(value) && value.length === 0;\n\n  if (isNotGrouping) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Not grouping\n      </Text>\n    );\n  }\n\n  if (isSingleGroup) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Single group\n      </Text>\n    );\n  }\n\n  return Array.isArray(value) ? value.join(', ') : value;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.radius.default,\n      }),\n    };\n  },\n  childPolicies: css({\n    marginLeft: theme.spacing(4),\n    position: 'relative',\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      height: 'calc(100% - 10px)',\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n      marginTop: 0,\n      marginLeft: '-20px',\n    },\n  }),\n  policyItemWrapper: css({\n    padding: theme.spacing(1.5),\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: theme.shape.borderRadius(2),\n    borderBottomRightRadius: theme.shape.borderRadius(2),\n  }),\n  policyWrapper: (hasFocus = false) =>\n    css({\n      flex: 1,\n      position: 'relative',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      border: `solid 1px ${theme.colors.border.weak}`,\n      ...(hasFocus && {\n        borderColor: theme.colors.primary.border,\n        background: theme.colors.primary.transparent,\n      }),\n    }),\n  metadata: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n  break: css({\n    width: '100%',\n    height: 0,\n    marginBottom: theme.spacing(2),\n  }),\n  gutterIcon: css({\n    position: 'absolute',\n    top: 0,\n    transform: 'translateY(50%)',\n    left: `-${theme.spacing(4)}`,\n    color: theme.colors.text.secondary,\n    background: theme.colors.background.primary,\n    width: '25px',\n    height: '25px',\n    textAlign: 'center',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: 0,\n  }),\n  moreButtons: css({\n    marginTop: theme.spacing(0.5),\n    marginBottom: theme.spacing(1.5),\n  }),\n});\n\nexport { Policy };\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, Stack, Tab, TabContent, TabsBar, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { useGetContactPointsState } from './api/receiversApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { MuteTimingsTable } from './components/mute-timings/MuteTimingsTable';\nimport { mergeTimeIntervals } from './components/mute-timings/util';\nimport {\n  NotificationPoliciesFilter,\n  findRoutesByMatchers,\n  findRoutesMatchingPredicate,\n} from './components/notification-policies/Filters';\nimport {\n  useAddPolicyModal,\n  useAlertGroupsModal,\n  useDeletePolicyModal,\n  useEditPolicyModal,\n} from './components/notification-policies/Modals';\nimport { Policy } from './components/notification-policies/Policy';\nimport { useAlertmanagerConfig } from './hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { updateAlertManagerConfigAction } from './state/actions';\nimport { FormAmRoute } from './types/amroutes';\nimport { useRouteGroupsMatcher } from './useRouteGroupsMatcher';\nimport { addUniqueIdentifierToRoute } from './utils/amroutes';\nimport { computeInheritedTree } from './utils/notification-policies';\nimport { initialAsyncRequestState } from './utils/redux';\nimport {\n  InsertPosition,\n  addRouteToReferenceRoute,\n  cleanRouteIDs,\n  mergePartialAmRouteWithRouteTree,\n  omitRouteFromRouteTree,\n} from './utils/routeTree';\n\nenum ActiveTab {\n  NotificationPolicies = 'notification_policies',\n  MuteTimings = 'mute_timings',\n}\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerAlertGroupsQuery } = alertmanagerApi;\n\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams);\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n  const [updatingTree, setUpdatingTree] = useState<boolean>(false);\n  const [contactPointFilter, setContactPointFilter] = useState<string | undefined>();\n  const [labelMatchersFilter, setLabelMatchersFilter] = useState<ObjectMatcher[]>([]);\n\n  const { selectedAlertmanager, hasConfigurationAPI, isGrafanaAlertmanager } = useAlertmanager();\n  const { getRouteGroupsMap } = useRouteGroupsMatcher();\n\n  const contactPointsState = useGetContactPointsState(selectedAlertmanager ?? '');\n\n  const {\n    currentData: result,\n    isLoading: resultLoading,\n    error: resultError,\n  } = useAlertmanagerConfig(selectedAlertmanager, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n\n  const config = result?.alertmanager_config;\n\n  const { currentData: alertGroups, refetch: refetchAlertGroups } = useGetAlertmanagerAlertGroupsQuery(\n    { amSourceName: selectedAlertmanager ?? '' },\n    { skip: !selectedAlertmanager }\n  );\n\n  const receivers = config?.receivers ?? [];\n\n  const rootRoute = useMemo(() => {\n    if (config?.route) {\n      return addUniqueIdentifierToRoute(config.route);\n    }\n    return;\n  }, [config?.route]);\n\n  // useAsync could also work but it's hard to wait until it's done in the tests\n  // Combining with useEffect gives more predictable results because the condition is in useEffect\n  const [{ value: routeAlertGroupsMap, error: instancesPreviewError }, triggerGetRouteGroupsMap] = useAsyncFn(\n    getRouteGroupsMap,\n    [getRouteGroupsMap]\n  );\n\n  useEffect(() => {\n    if (rootRoute && alertGroups) {\n      triggerGetRouteGroupsMap(rootRoute, alertGroups, { unquoteMatchers: !isGrafanaAlertmanager });\n    }\n  }, [rootRoute, alertGroups, triggerGetRouteGroupsMap, isGrafanaAlertmanager]);\n\n  // these are computed from the contactPoint and labels matchers filter\n  const routesMatchingFilters = useMemo(() => {\n    if (!rootRoute) {\n      const emptyResult: RoutesMatchingFilters = {\n        filtersApplied: false,\n        matchedRoutesWithPath: new Map(),\n      };\n\n      return emptyResult;\n    }\n\n    return findRoutesMatchingFilters(rootRoute, { contactPointFilter, labelMatchersFilter });\n  }, [contactPointFilter, labelMatchersFilter, rootRoute]);\n\n  const isProvisioned = Boolean(config?.route?.provenance);\n\n  function handleSave(partialRoute: Partial<FormAmRoute>) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = mergePartialAmRouteWithRouteTree(selectedAlertmanager ?? '', partialRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleDelete(route: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = omitRouteFromRouteTree(route, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleAdd(partialRoute: Partial<FormAmRoute>, referenceRoute: RouteWithID, insertPosition: InsertPosition) {\n    if (!rootRoute) {\n      return;\n    }\n\n    const newRouteTree = addRouteToReferenceRoute(\n      selectedAlertmanager ?? '',\n      partialRoute,\n      referenceRoute,\n      rootRoute,\n      insertPosition\n    );\n    updateRouteTree(newRouteTree);\n  }\n\n  function updateRouteTree(routeTree: Route | RouteWithID) {\n    if (!result) {\n      return;\n    }\n\n    // make sure we omit all IDs from our routes\n    const newRouteTree = cleanRouteIDs(routeTree);\n\n    setUpdatingTree(true);\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newRouteTree,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: selectedAlertmanager!,\n        successMessage: 'Updated notification policies',\n      })\n    )\n      .unwrap()\n      .then(() => {\n        if (selectedAlertmanager) {\n          refetchAlertGroups();\n        }\n        closeEditModal();\n        closeAddModal();\n        closeDeleteModal();\n      })\n      .finally(() => {\n        setUpdatingTree(false);\n      });\n  }\n\n  // edit, add, delete modals\n  const [addModal, openAddModal, closeAddModal] = useAddPolicyModal(receivers, handleAdd, updatingTree);\n  const [editModal, openEditModal, closeEditModal] = useEditPolicyModal(\n    selectedAlertmanager ?? '',\n    receivers,\n    handleSave,\n    updatingTree\n  );\n  const [deleteModal, openDeleteModal, closeDeleteModal] = useDeletePolicyModal(handleDelete, updatingTree);\n  const [alertInstancesModal, showAlertGroupsModal] = useAlertGroupsModal(selectedAlertmanager ?? '');\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n  const time_intervals = result?.alertmanager_config ? mergeTimeIntervals(result?.alertmanager_config) : [];\n\n  const numberOfMuteTimings = time_intervals.length;\n  const haveData = result && !resultError && !resultLoading;\n  const isFetching = !result && resultLoading;\n  const haveError = resultError && !resultLoading;\n\n  const muteTimingsTabActive = activeTab === ActiveTab.MuteTimings;\n  const policyTreeTabActive = activeTab === ActiveTab.NotificationPolicies;\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n      <TabsBar>\n        <Tab\n          label={'Notification Policies'}\n          active={policyTreeTabActive}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.NotificationPolicies);\n            setQueryParams({ tab: ActiveTab.NotificationPolicies });\n          }}\n        />\n        <Tab\n          label={'Mute Timings'}\n          active={muteTimingsTabActive}\n          counter={numberOfMuteTimings}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.MuteTimings);\n            setQueryParams({ tab: ActiveTab.MuteTimings });\n          }}\n        />\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {isFetching && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n        {haveError && (\n          <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n            {resultError.message || 'Unknown error.'}\n          </Alert>\n        )}\n        {haveData && (\n          <>\n            {policyTreeTabActive && (\n              <>\n                <Stack direction=\"column\" gap={1}>\n                  {rootRoute && (\n                    <NotificationPoliciesFilter\n                      receivers={receivers}\n                      onChangeMatchers={setLabelMatchersFilter}\n                      onChangeReceiver={setContactPointFilter}\n                      matchingCount={routesMatchingFilters.matchedRoutesWithPath.size}\n                    />\n                  )}\n                  {rootRoute && (\n                    <Policy\n                      receivers={receivers}\n                      routeTree={rootRoute}\n                      currentRoute={rootRoute}\n                      alertGroups={alertGroups ?? []}\n                      contactPointsState={contactPointsState.receivers}\n                      readOnly={!hasConfigurationAPI}\n                      provisioned={isProvisioned}\n                      alertManagerSourceName={selectedAlertmanager}\n                      onAddPolicy={openAddModal}\n                      onEditPolicy={openEditModal}\n                      onDeletePolicy={openDeleteModal}\n                      onShowAlertInstances={showAlertGroupsModal}\n                      routesMatchingFilters={routesMatchingFilters}\n                      matchingInstancesPreview={{ groupsMap: routeAlertGroupsMap, enabled: !instancesPreviewError }}\n                      isAutoGenerated={false}\n                    />\n                  )}\n                </Stack>\n                {addModal}\n                {editModal}\n                {deleteModal}\n                {alertInstancesModal}\n              </>\n            )}\n            {muteTimingsTabActive && (\n              <MuteTimingsTable alertManagerSourceName={selectedAlertmanager} hideActions={!hasConfigurationAPI} />\n            )}\n          </>\n        )}\n      </TabContent>\n    </>\n  );\n};\n\ntype RouteFilters = {\n  contactPointFilter?: string;\n  labelMatchersFilter?: ObjectMatcher[];\n};\n\ntype FilterResult = Map<RouteWithID, RouteWithID[]>;\n\nexport interface RoutesMatchingFilters {\n  filtersApplied: boolean;\n  matchedRoutesWithPath: FilterResult;\n}\n\nexport const findRoutesMatchingFilters = (rootRoute: RouteWithID, filters: RouteFilters): RoutesMatchingFilters => {\n  const { contactPointFilter, labelMatchersFilter = [] } = filters;\n  const hasFilter = contactPointFilter || labelMatchersFilter.length > 0;\n  const havebothFilters = Boolean(contactPointFilter) && labelMatchersFilter.length > 0;\n\n  // if filters are empty we short-circuit this function\n  if (!hasFilter) {\n    return { filtersApplied: false, matchedRoutesWithPath: new Map() };\n  }\n\n  // we'll collect all of the routes matching the filters\n  // we track an array of matching routes, each item in the array is for 1 type of filter\n  //\n  // [contactPointMatches, labelMatcherMatches] -> [[{ a: [], b: [] }], [{ a: [], c: [] }]]\n  // later we'll use intersection to find results in all sets of filter matchers\n  let matchedRoutes: RouteWithID[][] = [];\n\n  // compute fully inherited tree so all policies have their inherited receiver\n  const fullRoute = computeInheritedTree(rootRoute);\n\n  // find all routes for our contact point filter\n  const matchingRoutesForContactPoint = contactPointFilter\n    ? findRoutesMatchingPredicate(fullRoute, (route) => route.receiver === contactPointFilter)\n    : new Map();\n\n  const routesMatchingContactPoint = Array.from(matchingRoutesForContactPoint.keys());\n  if (routesMatchingContactPoint) {\n    matchedRoutes.push(routesMatchingContactPoint);\n  }\n\n  // find all routes matching our label matchers\n  const matchingRoutesForLabelMatchers = labelMatchersFilter.length\n    ? findRoutesMatchingPredicate(fullRoute, (route) => findRoutesByMatchers(route, labelMatchersFilter))\n    : new Map();\n\n  const routesMatchingLabelFilters = Array.from(matchingRoutesForLabelMatchers.keys());\n  if (matchingRoutesForLabelMatchers.size > 0) {\n    matchedRoutes.push(routesMatchingLabelFilters);\n  }\n\n  // now that we have our maps for all filters, we just need to find the intersection of all maps by route if we have both filters\n  const routesForAllFilterResults = havebothFilters\n    ? findMapIntersection(matchingRoutesForLabelMatchers, matchingRoutesForContactPoint)\n    : new Map([...matchingRoutesForLabelMatchers, ...matchingRoutesForContactPoint]);\n\n  return {\n    filtersApplied: true,\n    matchedRoutesWithPath: routesForAllFilterResults,\n  };\n};\n\n// this function takes multiple maps and creates a new map with routes that exist in all maps\n//\n// map 1: { a: [], b: [] }\n// map 2: { a: [], c: [] }\n// return: { a: [] }\nfunction findMapIntersection(...matchingRoutes: FilterResult[]): FilterResult {\n  const result = new Map<RouteWithID, RouteWithID[]>();\n\n  // Iterate through the keys of the first map'\n  for (const key of matchingRoutes[0].keys()) {\n    // Check if the key exists in all other maps\n    if (matchingRoutes.every((map) => map.has(key))) {\n      // If yes, add the key to the result map\n      // @ts-ignore\n      result.set(key, matchingRoutes[0].get(key));\n    }\n  }\n\n  return result;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css({\n    marginTop: theme.spacing(2),\n  }),\n});\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap): QueryParamValues {\n  let tab = ActiveTab.NotificationPolicies; // default tab\n\n  if (queryParams['tab'] === ActiveTab.NotificationPolicies) {\n    tab = ActiveTab.NotificationPolicies;\n  }\n\n  if (queryParams['tab'] === ActiveTab.MuteTimings) {\n    tab = ActiveTab.MuteTimings;\n  }\n\n  return {\n    tab,\n  };\n}\n\nconst NotificationPoliciesPage = () => (\n  <AlertmanagerPageWrapper navId=\"am-routes\" accessType=\"notification\">\n    <AmRoutes />\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(NotificationPoliciesPage, { style: 'page' });\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { HTMLAttributes } from 'react';\n\nimport { IconSize, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { cloneElement, forwardRef, Ref } from 'react';\n\ninterface ConditionalWrapProps {\n  shouldWrap: boolean;\n  children: JSX.Element;\n  wrap: (children: JSX.Element) => JSX.Element;\n}\n\nfunction ConditionalWrap({ children, shouldWrap, wrap }: ConditionalWrapProps, _ref: Ref<HTMLElement>) {\n  return shouldWrap ? cloneElement(wrap(children)) : children;\n}\n\nexport default forwardRef(ConditionalWrap);\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { AlertingAction, useAlertingAbility } from '../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n  const externalAlertmanager = currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME;\n\n  const [readConfigurationStatusSupported, readConfigurationStatusAllowed] = useAlertingAbility(\n    AlertingAction.ReadConfigurationStatus\n  );\n  const canReadConfigurationStatus = readConfigurationStatusSupported && readConfigurationStatusAllowed;\n\n  const { currentData: amChoiceStatus } = alertmanagerApi.endpoints.getGrafanaAlertingConfigurationStatus.useQuery(\n    undefined,\n    {\n      skip: externalAlertmanager || !canReadConfigurationStatus,\n    }\n  );\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || externalAlertmanager) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            {isGrafanaSource ? 'See alert rule' : 'See source'}\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css({\n    '& + &': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  actionsRow: css({\n    padding: `${theme.spacing(2, 0)} !important`,\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  receivers: css({\n    padding: theme.spacing(1, 0),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'Notification state',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Instance labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css({\n    marginTop: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      marginLeft: theme.spacing(4.5),\n    },\n  }),\n  duration: css({\n    marginLeft: theme.spacing(1),\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nexport const getNotificationsTextColors = (theme: GrafanaTheme2) => ({\n  [AlertState.Active]: css({\n    color: theme.colors.error.text,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.text,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.text,\n  }),\n});\n","import pluralize from 'pluralize';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getNotificationsTextColors } from '../../styles/notifications';\n\ninterface Props {\n  group: AlertmanagerGroup;\n}\n\nexport const AlertGroupHeader = ({ group }: Props) => {\n  const textStyles = useStyles2(getNotificationsTextColors);\n  const total = group.alerts.length;\n  const countByStatus = group.alerts.reduce(\n    (statusObj, alert) => {\n      if (statusObj[alert.status.state]) {\n        statusObj[alert.status.state] += 1;\n      } else {\n        statusObj[alert.status.state] = 1;\n      }\n      return statusObj;\n    },\n    {} as Record<AlertState, number>\n  );\n\n  return (\n    <div>\n      {`${total} ${pluralize('alert', total)}: `}\n      {Object.entries(countByStatus).map(([state, count], index) => {\n        return (\n          <span\n            key={`${JSON.stringify(group.labels)}-notifications-${index}`}\n            className={textStyles[state as AlertState]}\n          >\n            {index > 0 && ', '}\n            {`${count} ${state}`}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack, TextLink } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { createContactPointLink } from '../../utils/misc';\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  const contactPoint = group.receiver.name;\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to{' '}\n                  <TextLink\n                    href={createContactPointLink(contactPoint, alertManagerSourceName)}\n                    variant=\"bodySmall\"\n                    color=\"primary\"\n                    inline={false}\n                  >\n                    {group.receiver.name}\n                  </TextLink>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  summary: css({}),\n  [AlertState.Active]: css({\n    color: theme.colors.error.main,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.main,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.main,\n  }),\n});\n","// These are convenience components to deal with i18n shenanigans\n// (see https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#jsx)\n// These help when we need to interpolate variables inside translated strings,\n// where we need to style them differently\n\nimport { Text } from '@grafana/ui';\n\nexport const PrimaryText = ({ content }: { content: string }) => <Text color=\"primary\">{content}</Text>;\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ClipboardButton, CodeEditor, TextLink, useStyles2 } from '@grafana/ui';\n\nimport { allGrafanaExportProviders, ExportFormats, ExportProvider, ProvisioningType } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n  const provider = allGrafanaExportProviders[format];\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [provider, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <FileExportInlineDocumentation exportProvider={provider} />\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          Copy code\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          Download\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n});\n\nfunction FileExportInlineDocumentation({ exportProvider }: { exportProvider: ExportProvider<unknown> }) {\n  const { name, type } = exportProvider;\n\n  const exportInlineDoc: Record<ProvisioningType, { title: string; component: React.ReactNode }> = {\n    file: {\n      title: 'File-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for File Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/file-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    api: {\n      title: 'API-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for API Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/http-api-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    terraform: {\n      title: 'Terraform-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for Terraform Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/terraform-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n  };\n\n  const { title, component } = exportInlineDoc[type];\n\n  return (\n    <Alert title={title} severity=\"info\" bottomSpacing={0} topSpacing={0}>\n      {component}\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { Drawer } from '@grafana/ui';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  return (\n    <Drawer\n      title={title}\n      subtitle=\"Select the format and download the file or copy the contents to clipboard\"\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export type ProvisioningType = 'file' | 'api' | 'terraform';\n\nexport interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  type: ProvisioningType;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  type: 'file',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n  type: 'file',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n  type: 'terraform',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import moment from 'moment';\nimport { Fragment } from 'react';\n\nimport { AlertmanagerConfig, MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport {\n  getDaysOfMonthString,\n  getMonthsString,\n  getTimeString,\n  getWeekdayString,\n  getYearsString,\n} from '../../utils/alertmanager';\n\n// https://github.com/prometheus/alertmanager/blob/9de8ef36755298a68b6ab20244d4369d38bdea99/timeinterval/timeinterval.go#L443\nconst TIME_RANGE_REGEX = /^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)/;\n\nconst isvalidTimeFormat = (timeString: string): boolean => {\n  return timeString ? TIME_RANGE_REGEX.test(timeString) : true;\n};\n\n// merge both fields mute_time_intervals and time_intervals to support both old and new config\nexport const mergeTimeIntervals = (alertManagerConfig: AlertmanagerConfig) => {\n  return [...(alertManagerConfig.mute_time_intervals ?? []), ...(alertManagerConfig.time_intervals ?? [])];\n};\n\n// Usage\nconst isValidStartAndEndTime = (startTime?: string, endTime?: string): boolean => {\n  // empty time range is perfactly valid for a mute timing\n  if (!startTime && !endTime) {\n    return true;\n  }\n\n  if ((!startTime && endTime) || (startTime && !endTime)) {\n    return false;\n  }\n\n  const timeUnit = 'HH:mm';\n  // @ts-ignore typescript types here incorrect, sigh\n  const startDate = moment().startOf('day').add(startTime, timeUnit);\n  // @ts-ignore typescript types here incorrect, sigh\n  const endDate = moment().startOf('day').add(endTime, timeUnit);\n\n  if (startTime && endTime && startDate.isBefore(endDate)) {\n    return true;\n  }\n\n  if (startTime && endTime && endDate.isAfter(startDate)) {\n    return true;\n  }\n\n  return false;\n};\n\nfunction renderTimeIntervals(muteTiming: MuteTimeInterval) {\n  const timeIntervals = muteTiming.time_intervals;\n\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years, location } = interval;\n    const timeString = getTimeString(times, location);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </Fragment>\n    );\n  });\n}\n\nexport { isValidStartAndEndTime, isvalidTimeFormat, renderTimeIntervals };\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTagColorsFromName, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MatcherFormatter, matcherFormatter } from '../../utils/matchers';\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[]; formatter?: MatcherFormatter };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} formatter={formatter} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n  formatter?: MatcherFormatter;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(matcher[0]).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {matcherFormatter[formatter](matcher)}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.borderRadius(2),\n\n        // Ensure we preserve whitespace, as otherwise it's not noticeable _at all_\n        // when rendering the matcher, and is only noticeable when editing\n        whiteSpace: 'pre',\n      }),\n    };\n  },\n  metadata: css({\n    color: theme.colors.text.secondary,\n\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n\nexport { Matchers };\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TimeOptions } from '../../types/time';\n\nexport function PromDurationDocs() {\n  const styles = useStyles2(getPromDurationStyles);\n  return (\n    <div>\n      Prometheus duration format consist of a number followed by a time unit.\n      <br />\n      Different units can be combined for more granularity.\n      <hr />\n      <div className={styles.list}>\n        <div className={styles.header}>\n          <div>Symbol</div>\n          <div>Time unit</div>\n          <div>Example</div>\n        </div>\n        <PromDurationDocsTimeUnit unit={TimeOptions.seconds} name=\"seconds\" example=\"20s\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.minutes} name=\"minutes\" example=\"10m\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.hours} name=\"hours\" example=\"4h\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.days} name=\"days\" example=\"3d\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.weeks} name=\"weeks\" example=\"2w\" />\n        <div className={styles.examples}>\n          <div>Multiple units combined</div>\n          <code>1m30s, 2h30m20s, 1w2d</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PromDurationDocsTimeUnit({ unit, name, example }: { unit: TimeOptions; name: string; example: string }) {\n  const styles = useStyles2(getPromDurationStyles);\n\n  return (\n    <>\n      <div className={styles.unit}>{unit}</div>\n      <div>{name}</div>\n      <code>{example}</code>\n    </>\n  );\n}\n\nconst getPromDurationStyles = (theme: GrafanaTheme2) => ({\n  unit: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  list: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content 1fr 2fr',\n    gap: theme.spacing(1, 3),\n  }),\n  header: css({\n    display: 'contents',\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  examples: css({\n    display: 'contents',\n    '& > div': {\n      gridColumn: '1 / span 2',\n    },\n  }),\n});\n","import { forwardRef } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport { PromDurationDocs } from './PromDurationDocs';\n\nexport const PromDurationInput = forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>((props, ref) => {\n  return (\n    <Input\n      suffix={\n        <HoverCard content={<PromDurationDocs />} disabled={false}>\n          <Icon name=\"info-circle\" size=\"lg\" />\n        </HoverCard>\n      }\n      {...props}\n      ref={ref}\n    />\n  );\n});\n\nPromDurationInput.displayName = 'PromDurationInput';\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      alignItems: 'center',\n      display: 'flex',\n      flexFlow: 'row nowrap',\n\n      '& > * + *': {\n        marginLeft: theme.spacing(1),\n      },\n    }),\n    input: css({\n      flex: 1,\n    }),\n    promDurationInput: css({\n      maxWidth: theme.spacing(32),\n    }),\n    timingFormContainer: css({\n      padding: theme.spacing(1),\n    }),\n    linkText: css({\n      textDecoration: 'underline',\n    }),\n    collapse: css({\n      border: 'none',\n      background: 'none',\n      color: theme.colors.text.primary,\n    }),\n  };\n};\n","export const routeTimingsFields = {\n  groupWait: {\n    label: 'Group wait',\n    description:\n      'The wait time before sending the first notification for a new group of alerts. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group wait value',\n  },\n  groupInterval: {\n    label: 'Group interval',\n    description:\n      'The wait time before sending a notification about changes in the alert group after the first notification has been sent. If empty, it is inherited from the parent policy.',\n    ariaLabel: 'Group interval value',\n  },\n  repeatInterval: {\n    label: 'Repeat interval',\n    description: 'The wait time before resending a notification that has already been sent successfully.',\n    ariaLabel: 'Repeat interval value',\n  },\n};\n","export type TimingOptions = {\n  group_wait?: string;\n  group_interval?: string;\n  repeat_interval?: string;\n};\n\nexport const TIMING_OPTIONS_DEFAULTS: Required<TimingOptions> = {\n  group_wait: '30s',\n  group_interval: '5m',\n  repeat_interval: '4h',\n};\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, useStyles2, Tooltip } from '@grafana/ui';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { isAlertingRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (isAlertingRulerRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (isRecordingRulerRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css({\n    flexGrow: 1,\n    height: '100%',\n    paddingBottom: '16px',\n    marginBottom: theme.spacing(2),\n  }),\n  applyButton: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexGrow: 0,\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n});\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    // we'll disable cache by default to prevent overwriting other changes made since last fetch\n    refetchOnMountOrArgChange: true,\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { IconName } from '@grafana/ui';\n\nexport const INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n  webhook: 'link',\n  sns: 'amazon',\n};\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logError, logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport type { MatchOptions, RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(matcher: typeof routeMatcher): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  useEffect(() => {\n    const { disposeWorker } = loadWorker();\n    return disposeWorker;\n  }, []);\n\n  const getRouteGroupsMap = useCallback(\n    async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        alertGroupsCount: alertGroups.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  const matchInstancesToRoute = useCallback(\n    async (rootRoute: RouteWithID, instancesToMatch: Labels[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Instances Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        instancesToMatchCount: instancesToMatch.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n","import { uniqueId } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { encodeMatcher, normalizeMatchers, parseMatcherToArray, unquoteWithUnescape } from './matchers';\nimport { findExistingRoute } from './routeTree';\nimport { isValidPrometheusDuration, safeParsePrometheusDuration } from './time';\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    []\n  );\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder', isFixed: true },\n  { label: 'alertname', value: 'alertname', isFixed: true },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupIntervalValue: '',\n  repeatIntervalValue: '',\n  muteTimeIntervals: [],\n};\n\n// add unique identifiers to each route in the route tree, that way we can figure out what route we've edited / deleted\nexport function addUniqueIdentifierToRoute(route: Route): RouteWithID {\n  return {\n    id: uniqueId('route-'),\n    ...route,\n    routes: (route.routes ?? []).map(addUniqueIdentifierToRoute),\n  };\n}\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: RouteWithID | Route | undefined): FormAmRoute => {\n  if (!route) {\n    return emptyRoute;\n  }\n\n  const id = 'id' in route ? route.id : uniqueId('route-');\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return formAmRoute;\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const subFormRoute = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n  });\n\n  const objectMatchers =\n    route.object_matchers?.map((matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] })) ?? [];\n\n  const matchers =\n    route.matchers\n      ?.flatMap((matcher) => {\n        // parse the matcher to an array of matchers, PromQL-style matchers can contain more than one matcher (in a matcher, yes it's confusing)\n        return parseMatcherToArray(matcher).flatMap(matcherToMatcherField);\n      })\n      .map(({ name, operator, value }) => ({\n        name: unquoteWithUnescape(name),\n        operator,\n        value: unquoteWithUnescape(value),\n      })) ?? [];\n\n  return {\n    id,\n    // Frontend migration to use object_matchers instead of matchers, match, and match_re\n    object_matchers: [\n      ...matchers,\n      ...objectMatchers,\n      ...matchersToArrayFieldMatchers(route.match, false),\n      ...matchersToArrayFieldMatchers(route.match_re, true),\n    ],\n    continue: route.continue ?? false,\n    receiver: route.receiver ?? '',\n    overrideGrouping: Array.isArray(route.group_by) && route.group_by.length > 0,\n    groupBy: route.group_by ?? undefined,\n    overrideTimings: [route.group_wait, route.group_interval, route.repeat_interval].some(Boolean),\n    groupWaitValue: route.group_wait ?? '',\n    groupIntervalValue: route.group_interval ?? '',\n    repeatIntervalValue: route.repeat_interval ?? '',\n    routes: formRoutes,\n    muteTimeIntervals: route.mute_time_intervals ?? [],\n  };\n};\n\n// convert a FormAmRoute to a Route\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string,\n  formAmRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(formAmRoute.id ?? '', routeTree);\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupIntervalValue,\n    repeatIntervalValue,\n    receiver,\n  } = formAmRoute;\n\n  // \"undefined\" means \"inherit from the parent policy\", currently supported by group_by, group_wait, group_interval, and repeat_interval\n  const INHERIT_FROM_PARENT = undefined;\n\n  const group_by = overrideGrouping ? groupBy : INHERIT_FROM_PARENT;\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? groupWaitValue : INHERIT_FROM_PARENT;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? groupIntervalValue : INHERIT_FROM_PARENT;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? repeatIntervalValue : INHERIT_FROM_PARENT;\n\n  // Empty matcher values are valid. Such matchers require specified label to not exists\n  const object_matchers: ObjectMatcher[] | undefined = formAmRoute.object_matchers\n    ?.filter((route) => route.name && route.operator && route.value !== null && route.value !== undefined)\n    .map(({ name, operator, value }) => [name, operator, value]);\n\n  const routes = formAmRoute.routes?.map((subRoute) =>\n    formAmRouteToAmRoute(alertManagerSourceName, subRoute, routeTree)\n  );\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: object_matchers,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: routes,\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n    receiver: receiver,\n  };\n\n  // non-Grafana managed rules should use \"matchers\", Grafana-managed rules should use \"object_matchers\"\n  // Grafana maintains a fork of AM to support all utf-8 characters in the \"object_matchers\" property values but this\n  // does not exist in upstream AlertManager\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    // to support UTF-8 characters we must wrap label keys and values with double quotes if they contain reserved characters.\n    amRoute.matchers = formAmRoute.object_matchers?.map(encodeMatcher);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.object_matchers = normalizeMatchers(amRoute);\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string | null => {\n  // this allows us to deal with cleared values\n  if (selectableValue === null) {\n    return null;\n  }\n\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport function promDurationValidator(duration?: string) {\n  if (!duration || duration.length === 0) {\n    return true;\n  }\n\n  return isValidPrometheusDuration(duration) || 'Invalid duration format. Must be {number}{time_unit}';\n}\n\n// function to convert ObjectMatchers to a array of strings\nexport const objectMatchersToString = (matchers: ObjectMatcher[]): string[] => {\n  return matchers.map((matcher) => {\n    const [name, operator, value] = matcher;\n    return `${name}${operator}${value}`;\n  });\n};\n\nexport const repeatIntervalValidator = (repeatInterval: string, groupInterval = '') => {\n  if (repeatInterval.length === 0) {\n    return true;\n  }\n\n  const validRepeatInterval = promDurationValidator(repeatInterval);\n  const validGroupInterval = promDurationValidator(groupInterval);\n\n  if (validRepeatInterval !== true) {\n    return validRepeatInterval;\n  }\n\n  if (validGroupInterval !== true) {\n    return validGroupInterval;\n  }\n\n  const repeatDuration = safeParsePrometheusDuration(repeatInterval);\n  const groupDuration = safeParsePrometheusDuration(groupInterval);\n\n  const isRepeatLowerThanGroupDuration = groupDuration !== 0 && repeatDuration < groupDuration;\n\n  return isRepeatLowerThanGroupDuration ? 'Repeat interval should be higher or equal to Group interval' : true;\n};\n","import { isUndefined, omitBy } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval, TimeRange } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n  location: '',\n  disable: false,\n};\n\nexport const validateArrayField = (\n  value: string | undefined,\n  validateValue: (input: string) => boolean,\n  invalidText: string\n) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str?: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years, location, disable }) => {\n      const interval = {\n        times: convertTimesToDto(times, disable),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n        location: location ? location : undefined,\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n\n/*\n * Convert times from form to dto, if disable is true, then return an empty array as times\n If the times array is empty and disable is false, then return undefined\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\nfunction convertTimesToDto(times: TimeRange[] | undefined, disable: boolean) {\n  if (disable) {\n    return [];\n  }\n  const timesToReturn = times?.filter(({ start_time, end_time }) => !!start_time && !!end_time);\n  return timesToReturn?.length ? timesToReturn : undefined;\n}\n\n/*\n * Get disable field from dto, if any of the lists is an empty array, then the disable field is true\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\n\nexport function isTimeIntervalDisabled(intervals: TimeInterval): boolean {\n  if (\n    intervals.times?.length === 0 ||\n    intervals.weekdays?.length === 0 ||\n    intervals.days_of_month?.length === 0 ||\n    intervals.months?.length === 0 ||\n    intervals.years?.length === 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/*\n   Return true if all the time intervals are disabled\n  * @param muteTimeInterval\n  * @returns MuteTimingFields\n  * */\nexport function isDisabled(muteTiming: MuteTimeInterval) {\n  return muteTiming.time_intervals.every((timeInterval) => isTimeIntervalDisabled(timeInterval));\n}\n","import { isArray, pick, reduce } from 'lodash';\n\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Route,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from 'app/types/unified-alerting-dto';\n\nimport { Label, normalizeMatchers, unquoteWithUnescape } from './matchers';\n\n// If a policy has no matchers it still can be a match, hence matchers can be empty and match can be true\n// So we cannot use null as an indicator of no match\ninterface LabelMatchResult {\n  match: boolean;\n  matcher: ObjectMatcher | null;\n}\n\nexport const INHERITABLE_KEYS = ['receiver', 'group_by', 'group_wait', 'group_interval', 'repeat_interval'] as const;\nexport type InheritableKeys = typeof INHERITABLE_KEYS;\nexport type InheritableProperties = Pick<Route, InheritableKeys[number]>;\n\ntype LabelsMatch = Map<Label, LabelMatchResult>;\n\ninterface MatchingResult {\n  matches: boolean;\n  labelsMatch: LabelsMatch;\n}\n\n// returns a match results for given set of matchers (from a policy for instance) and a set of labels\nexport function matchLabels(matchers: ObjectMatcher[], labels: Label[]): MatchingResult {\n  const matches = matchLabelsSet(matchers, labels);\n\n  // create initial map of label => match result\n  const labelsMatch: LabelsMatch = new Map(labels.map((label) => [label, { match: false, matcher: null }]));\n\n  // for each matcher, check which label it matched for\n  matchers.forEach((matcher) => {\n    const matchingLabel = labels.find((label) => isLabelMatch(matcher, label));\n\n    // record that matcher for the label\n    if (matchingLabel) {\n      labelsMatch.set(matchingLabel, {\n        match: true,\n        matcher,\n      });\n    }\n  });\n\n  return { matches, labelsMatch };\n}\n\n// Compare set of matchers to set of label\nexport function matchLabelsSet(matchers: ObjectMatcher[], labels: Label[]): boolean {\n  for (const matcher of matchers) {\n    if (!isLabelMatchInSet(matcher, labels)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport interface AlertInstanceMatch {\n  instance: Labels;\n  labelsMatch: LabelsMatch;\n}\n\nexport interface RouteMatchResult<T extends Route> {\n  route: T;\n  labelsMatch: LabelsMatch;\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\n\n// If the current node is not a match, return nothing\n// Normalization should have happened earlier in the code\nfunction findMatchingRoutes<T extends Route>(route: T, labels: Label[]): Array<RouteMatchResult<T>> {\n  let childMatches: Array<RouteMatchResult<T>> = [];\n\n  // If the current node is not a match, return nothing\n  const matchResult = matchLabels(route.object_matchers ?? [], labels);\n  if (!matchResult.matches) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (route.routes) {\n    for (const child of route.routes) {\n      let matchingChildren = findMatchingRoutes(child, labels);\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      childMatches = childMatches.concat(matchingChildren);\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (childMatches.length === 0) {\n    childMatches.push({ route, labelsMatch: matchResult.labelsMatch });\n  }\n\n  return childMatches;\n}\n\n// This is a performance improvement to normalize matchers only once and use the normalized version later on\nexport function normalizeRoute(rootRoute: RouteWithID): RouteWithID {\n  function normalizeRoute(route: RouteWithID) {\n    route.object_matchers = normalizeMatchers(route);\n    delete route.matchers;\n    delete route.match;\n    delete route.match_re;\n    route.routes?.forEach(normalizeRoute);\n  }\n\n  const normalizedRootRoute = structuredClone(rootRoute);\n  normalizeRoute(normalizedRootRoute);\n\n  return normalizedRootRoute;\n}\n\nexport function unquoteRouteMatchers(route: RouteWithID): RouteWithID {\n  function unquoteRoute(route: RouteWithID) {\n    route.object_matchers = route.object_matchers?.map(([name, operator, value]) => {\n      return [unquoteWithUnescape(name), operator, unquoteWithUnescape(value)];\n    });\n    route.routes?.forEach(unquoteRoute);\n  }\n\n  const unwrappedRootRoute = structuredClone(route);\n  unquoteRoute(unwrappedRootRoute);\n\n  return unwrappedRootRoute;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute.route === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: InheritableProperties\n): InheritableProperties {\n  const propsFromParent: InheritableProperties = pick(parentRoute, INHERITABLE_KEYS);\n  const inheritableProperties: InheritableProperties = {\n    ...propsFromParent,\n    ...propertiesParentInherited,\n  };\n\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: InheritableProperties, parentValue, property) => {\n      const parentHasValue = parentValue != null;\n\n      const inheritableValues = [undefined, '', null];\n      // @ts-ignore\n      const childIsInheriting = inheritableValues.some((value) => childRoute[property] === value);\n      const inheritFromValue = childIsInheriting && parentHasValue;\n\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' &&\n        parentHasValue &&\n        isArray(childRoute[property]) &&\n        childRoute[property]?.length === 0;\n\n      const inheritFromParent = inheritFromValue || inheritEmptyGroupByFromParent;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree<T extends Route>(parent: T): T {\n  return {\n    ...parent,\n    routes: parent.routes?.map((child) => {\n      const inheritedProperties = getInheritedProperties(parent, child);\n\n      return computeInheritedTree({\n        ...child,\n        ...inheritedProperties,\n      });\n    }),\n  };\n}\n\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  // At the time of writing, Alertmanager compiles to another (anchored) Regular Expression,\n  // so we should also anchor our UI matches for consistency with this behaviour\n  // https://github.com/prometheus/alertmanager/blob/fd37ce9c95898ca68be1ab4d4529517174b73c33/pkg/labels/matcher.go#L69\n  [MatcherOperator.regex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return re.test(lv);\n  },\n  [MatcherOperator.notRegex]: (lv, mv) => {\n    const re = new RegExp(`^(?:${mv})$`);\n    return !re.test(lv);\n  },\n};\n\nfunction isLabelMatchInSet(matcher: ObjectMatcher, labels: Label[]): boolean {\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  let labelValue = ''; // matchers that have no labels are treated as empty string label values\n  const labelForMatcher = Object.fromEntries(labels)[matcherKey];\n  if (labelForMatcher) {\n    labelValue = labelForMatcher;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\n// ⚠️ DO NOT USE THIS FUNCTION FOR ROUTE SELECTION ALGORITHM\n// for route selection algorithm, always compare a single matcher to the entire label set\n// see \"matchLabelsSet\"\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label): boolean {\n  let [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties, isLabelMatchInSet };\n","/**\n * Various helper functions to modify (immutably) the route tree, aka \"notification policies\"\n */\n\nimport { produce } from 'immer';\nimport { omit } from 'lodash';\n\nimport { insertAfterImmutably, insertBeforeImmutably } from '@grafana/data/src/utils/arrayUtils';\nimport { Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\n\nimport { formAmRouteToAmRoute } from './amroutes';\n\n// add a form submission to the route tree\nexport const mergePartialAmRouteWithRouteTree = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(partialFormRoute.id ?? '', routeTree);\n  if (!existing) {\n    throw new Error(`No such route with ID '${partialFormRoute.id}'`);\n  }\n\n  function findAndReplace(currentRoute: RouteWithID): Route {\n    let updatedRoute: Route = currentRoute;\n\n    if (currentRoute.id === partialFormRoute.id) {\n      const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n      updatedRoute = {\n        ...currentRoute,\n        ...newRoute,\n      };\n    }\n\n    return {\n      ...updatedRoute,\n      routes: currentRoute.routes?.map(findAndReplace),\n    };\n  }\n\n  return findAndReplace(routeTree);\n};\n\n// remove a route from the policy tree, returns a new tree\n// make sure to omit the \"id\" because Prometheus / Loki / Mimir will reject the payload\nexport const omitRouteFromRouteTree = (findRoute: RouteWithID, routeTree: RouteWithID): RouteWithID => {\n  if (findRoute.id === routeTree.id) {\n    throw new Error('You cant remove the root policy');\n  }\n\n  function findAndOmit(currentRoute: RouteWithID): RouteWithID {\n    return {\n      ...currentRoute,\n      routes: currentRoute.routes?.reduce((acc: RouteWithID[] = [], route) => {\n        if (route.id === findRoute.id) {\n          return acc;\n        }\n\n        acc.push(findAndOmit(route));\n        return acc;\n      }, []),\n    };\n  }\n\n  return findAndOmit(routeTree);\n};\n\nexport type InsertPosition = 'above' | 'below' | 'child';\n\n// add a new route to a parent route\nexport const addRouteToReferenceRoute = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  referenceRoute: RouteWithID,\n  routeTree: RouteWithID,\n  position: InsertPosition\n): RouteWithID => {\n  const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n\n  return produce(routeTree, (draftTree) => {\n    const [routeInTree, parentRoute, positionInParent] = findRouteInTree(draftTree, referenceRoute);\n\n    if (routeInTree === undefined || parentRoute === undefined || positionInParent === undefined) {\n      throw new Error(`could not find reference route \"${referenceRoute.id}\" in tree`);\n    }\n\n    // if user wants to insert new child policy, append to the bottom of children\n    if (position === 'child') {\n      if (routeInTree.routes) {\n        routeInTree.routes.push(newRoute);\n      } else {\n        routeInTree.routes = [newRoute];\n      }\n    }\n\n    // insert new policy before / above the referenceRoute\n    if (position === 'above') {\n      parentRoute.routes = insertBeforeImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n\n    // insert new policy after / below the referenceRoute\n    if (position === 'below') {\n      parentRoute.routes = insertAfterImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n  });\n};\n\ntype RouteMatch = Route | undefined;\n\nexport function findRouteInTree(\n  routeTree: RouteWithID,\n  referenceRoute: RouteWithID\n): [matchingRoute: RouteMatch, parentRoute: RouteMatch, positionInParent: number | undefined] {\n  let matchingRoute: RouteMatch;\n  let matchingRouteParent: RouteMatch;\n  let matchingRoutePositionInParent: number | undefined;\n\n  // recurse through the tree to find the matching route, its parent and the position of the route in the parent\n  function findRouteInTree(currentRoute: RouteWithID, index: number, parentRoute: RouteWithID) {\n    if (matchingRoute) {\n      return;\n    }\n\n    if (currentRoute.id === referenceRoute.id) {\n      matchingRoute = currentRoute;\n      matchingRouteParent = parentRoute;\n      matchingRoutePositionInParent = index;\n    }\n\n    if (currentRoute.routes) {\n      currentRoute.routes.forEach((route, index) => findRouteInTree(route, index, currentRoute));\n    }\n  }\n\n  findRouteInTree(routeTree, 0, routeTree);\n\n  return [matchingRoute, matchingRouteParent, matchingRoutePositionInParent];\n}\n\nexport function cleanRouteIDs(route: Route | RouteWithID): Route {\n  return omit(\n    {\n      ...route,\n      routes: route.routes?.map((route) => cleanRouteIDs(route)),\n    },\n    'id'\n  );\n}\n\nexport function findExistingRoute(id: string, routeTree: RouteWithID): RouteWithID | undefined {\n  return routeTree.id === id ? routeTree : routeTree.routes?.find((route) => findExistingRoute(id, route));\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","receiversApi","alertingApi","build","amSourceName","error","useGetContactPointsState","alertManagerSourceName","contactPointsStateEmpty","contactPointsState","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","styles","getStyles","commonProps","EmptyArea","Button","theme","GrafanaMuteTimingsExporterPreview","exportFormat","onClose","muteTimingsDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaMuteTimingExporterPreview","muteTimingName","GrafanaMuteTimingsExporter","activeTab","setActiveTab","GrafanaExportDrawer","ALL_MUTE_TIMINGS","useExportMuteTiming","setMuteTimingName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","handleClose","handleOpen","receiverName","MuteTimingsTable","muteTimingNames","hideActions","currentData","useAlertmanagerConfig","config","items","muteTimings","muteTimingsProvenances","name","mute","_","allowedToCreateMuteTiming","ExportDrawer","showExportDrawer","exportMuteTimingsSupported","exportMuteTimingsAllowed","columns","useColumns","Stack","Spacer","Authorize","DynamicTable","ConfirmModal","openExportDrawer","_editSupported","allowedToEdit","_deleteSupported","allowedToDelete","showActions","exportSupported","exportAllowed","data","Provisioning","ActionsAndBadge","Menu","muteTiming","isGrafanaDataSource","Badge","Link","IconButton","NotificationPoliciesFilter","receivers","onChangeReceiver","onChangeMatchers","matchingCount","searchParams","setSearchParams","useURLSearchParams","searchInputRef","queryString","contactPoint","getNotificationPoliciesFilters","handleChangeLabels","matchers","clearFilters","receiverOptions","toOption","selectedContactPoint","option","hasFilters","inputValid","Field","Label","Tooltip","Icon","Input","event","Select","Text","findRoutesMatchingPredicate","routeTree","predicateFn","matchingRouteIdsWithPath","findMatch","route","path","newPath","previousPath","findRoutesByMatchers","labelMatchersFilter","routeMatchers","filter","matcher","receiver","useGetGrafanaReceiverTypeChecker","isOnCallEnabled","usePluginBridge","onCallApi","onCallIntegrations","useGetAmRouteReceiverWithGrafanaAppTypes","getGrafanaReceiverType","receiverToSelectableContactPointValue","AlertGroupsSummary","active","suppressed","unprocessed","statsComponents","total","AmRootRouteForm","actionButtons","onSubmit","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","defaultValues","handleSubmit","register","control","errors","setValue","getValues","onChange","ref","field","value","opt","opts","Collapse","PromDurationInput","groupInterval","useMuteTimingOptions","selectedAlertmanager","interval","AmRoutesExpandedForm","defaults","formStyles","muteTimingOptions","emptyMatcher","receiversWithOnCallOnTop","onCallFirst","formAmRoute","watch","fields","append","remove","index","Switch","FieldValidationMessage","routeTimingsFields","commonSpacing","useAddPolicyModal","handleAdd","loading","showModal","setShowModal","insertPosition","setInsertPosition","referenceRoute","setReferenceRoute","AmRouteReceivers","handleDismiss","handleShow","position","UpdatingModal","Modal","newRoute","useEditPolicyModal","handleSave","isDefaultPolicy","setIsDefaultPolicy","setRoute","useDeletePolicyModal","handleDelete","useAlertGroupsModal","alertGroups","setAlertGroups","setMatchers","formatter","setFormatter","instancesByState","instances","group","instance","Matchers","AlertGroup","isOpen","Spinner","GrafanaPoliciesExporterPreview","policiesDefinition","GrafanaPoliciesExporter","Policy","props","readOnly","provisioned","currentRoute","inheritedProperties","routesMatchingFilters","matchingInstancesPreview","onEditPolicy","onAddPolicy","onDeletePolicy","onShowAlertInstances","isAutoGenerated","continueMatching","hasMatchers","filtersApplied","matchedRoutesWithPath","matchedRoutes","hasFocus","routesPath","belongsToMatchPath","showMatchesAllLabelsWarning","actualContactPoint","contactPointErrors","getContactPointErrors","allChildPolicies","childPolicies","policy","hasChildPolicies","matchingAlertGroups","numberOfAlertInstances","isSupportedToSeeAutogeneratedChunk","isAllowedToSeeAutogeneratedChunk","isAutogeneratedPolicyRoot","isAutoGeneratedRootAndSimplifiedEnabled","showPolicyChildren","togglePolicyChildren","groupBy","timingOptions","POLICIES_PER_PAGE","visibleChildPolicies","setVisibleChildPolicies","dropdownMenuActions","useCreateDropdownMenuActions","isImmutablePolicy","childPoliciesBelongingToMatchPath","child","childPoliciesToRender","pageOfChildren","moreCount","showMore","ContinueMatchingIndicator","AllMatchesIndicator","AutogeneratedRootIndicator","DefaultPolicyIndicator","Errors","ConditionalWrap","ProvisionedTooltip","Dropdown","MetadataRow","childInheritedProperties","isThisChildAutoGenerated","isThisChildReadOnly","inheritedGrouping","hasInheritedProperties","noGrouping","customGrouping","singleGroup","hasMuteTimings","MetaText","ContactPointsHoverDetails","MuteTimings","TimingOptionsMeta","InheritedProperties","updatePoliciesSupported","updatePoliciesAllowed","deletePolicySupported","deletePolicyAllowed","exportPoliciesSupported","exportPoliciesAllowed","showExportAction","showEditAction","showDeleteAction","Fragment","AUTOGENERATED_ROOT_LABEL_NAME","objectMatcher","children","HoverCard","properties","key","routePropertyToLabel","routePropertyToValue","timings","timing","TextLink","groupWait","repeatInterval","metaOptions","meta","details","groupedIntegrations","type","integrations","acc","notifierStatuses","notifierErrors","status","isNotGrouping","isSingleGroup","label","color","borderColor","ActiveTab","AmRoutes","useGetAlertmanagerAlertGroupsQuery","alertmanagerApi","queryParams","setQueryParams","useQueryParams","tab","getActiveTabFromUrl","updatingTree","setUpdatingTree","contactPointFilter","setContactPointFilter","setLabelMatchersFilter","hasConfigurationAPI","isGrafanaAlertmanager","getRouteGroupsMap","useRouteGroupsMatcher","result","resultLoading","resultError","refetchAlertGroups","rootRoute","routeAlertGroupsMap","instancesPreviewError","triggerGetRouteGroupsMap","useAsyncFn","findRoutesMatchingFilters","isProvisioned","partialRoute","newRouteTree","updateRouteTree","closeEditModal","closeAddModal","closeDeleteModal","addModal","openAddModal","editModal","openEditModal","deleteModal","openDeleteModal","alertInstancesModal","showAlertGroupsModal","state","numberOfMuteTimings","haveData","haveError","muteTimingsTabActive","policyTreeTabActive","GrafanaAlertmanagerDeliveryWarning","TabsBar","Tab","TabContent","Alert","filters","hasFilter","havebothFilters","fullRoute","matchingRoutesForContactPoint","routesMatchingContactPoint","matchingRoutesForLabelMatchers","routesMatchingLabelFilters","findMapIntersection","matchingRoutes","map","NotificationPoliciesPage","actions","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","CollapseToggle","isCollapsed","onToggle","idControlled","className","size","restOfProps","shouldWrap","wrap","_ref","currentAlertmanager","externalAlertmanager","readConfigurationStatusSupported","readConfigurationStatusAllowed","canReadConfigurationStatus","amChoiceStatus","hasActiveExternalAMs","AlertDetails","alert","isGrafanaSource","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","AlertGroupAlertsTable","alerts","AmAlertStateTag","labels","AlertLabels","DynamicTableWithGuidelines","getNotificationsTextColors","AlertGroupHeader","textStyles","countByStatus","statusObj","count","setIsCollapsed","receiverInGroup","PrimaryText","content","format","textDefinition","fileExportPreviewStyles","provider","onDownload","blob","formattedTextDefinition","FileExportInlineDocumentation","height","exportProvider","exportInlineDoc","title","component","onTabChange","formatProviders","grafanaRulesTabs","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","TIME_RANGE_REGEX","isvalidTimeFormat","timeString","mergeTimeIntervals","alertManagerConfig","isValidStartAndEndTime","startTime","endTime","timeUnit","startDate","endDate","renderTimeIntervals","times","weekdays","days_of_month","months","years","location","weekdayString","daysString","monthsString","yearsString","NUM_MATCHERS","firstFew","rest","hasMoreMatchers","MatcherBadge","PromDurationDocs","getPromDurationStyles","PromDurationDocsTimeUnit","unit","example","getFormStyles","TIMING_OPTIONS_DEFAULTS","cloudRulesTabs","RuleInspector","drawerStyles","onApply","formValues","RuleInspectorTabs","InspectorYamlTab","tabs","yamlTabStyle","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","options","fetchConfig","INTEGRATION_ICONS","createWorker","routeMatcher","loadWorker","worker","comlink","e","validateWorker","disposeWorker","timeSpent","matchInstancesToRoute","instancesToMatch","matchersToArrayFieldMatchers","isRegex","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","addUniqueIdentifierToRoute","amRouteToFormAmRoute","id","formRoutes","subRoute","subFormRoute","objectMatchers","operator","formAmRouteToAmRoute","existing","overrideGrouping","overrideTimings","groupWaitValue","groupIntervalValue","repeatIntervalValue","INHERIT_FROM_PARENT","group_by","group_wait","group_interval","repeat_interval","object_matchers","routes","amRoute","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","promDurationValidator","duration","objectMatchersToString","repeatIntervalValidator","validRepeatInterval","validGroupInterval","repeatDuration","groupDuration","DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","validateArrayField","validateValue","invalidText","x","entry","convertStringToArray","s","createMuteTiming","timeIntervals","disable","convertTimesToDto","v","timesToReturn","start_time","end_time","isTimeIntervalDisabled","intervals","isDisabled","timeInterval","INHERITABLE_KEYS","matchLabels","matches","matchLabelsSet","labelsMatch","matchingLabel","isLabelMatch","isLabelMatchInSet","findMatchingRoutes","childMatches","matchResult","matchingChildren","normalizeRoute","normalizedRootRoute","unquoteRouteMatchers","unquoteRoute","unwrappedRootRoute","findMatchingAlertGroups","matchingGroups","matchingAlerts","matchingRoute","getInheritedProperties","parentRoute","childRoute","propertiesParentInherited","inheritableProperties","parentValue","property","parentHasValue","inheritFromValue","inheritEmptyGroupByFromParent","computeInheritedTree","parent","OperatorFunctions","lv","mv","matcherKey","matcherValue","labelValue","labelForMatcher","matchFunction","labelKey","mergePartialAmRouteWithRouteTree","partialFormRoute","findExistingRoute","findAndReplace","updatedRoute","omitRouteFromRouteTree","findRoute","findAndOmit","addRouteToReferenceRoute","draftTree","routeInTree","positionInParent","findRouteInTree","matchingRouteParent","matchingRoutePositionInParent","cleanRouteIDs"],"sourceRoot":""}